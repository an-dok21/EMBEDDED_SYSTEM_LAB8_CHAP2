
Bai8_ESP_Wifi.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007c8c  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003010  08007e1c  08007e1c  00008e1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ae2c  0800ae2c  0000c064  2**0
                  CONTENTS
  4 .ARM          00000008  0800ae2c  0800ae2c  0000be2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ae34  0800ae34  0000c064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ae34  0800ae34  0000be34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ae38  0800ae38  0000be38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  0800ae3c  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000c064  2**0
                  CONTENTS
 10 .bss          00000520  20000064  20000064  0000c064  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000584  20000584  0000c064  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000c064  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001923f  00000000  00000000  0000c094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000042e9  00000000  00000000  000252d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000016a0  00000000  00000000  000295c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000119d  00000000  00000000  0002ac60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026570  00000000  00000000  0002bdfd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000207bd  00000000  00000000  0005236d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000df837  00000000  00000000  00072b2a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00152361  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000061cc  00000000  00000000  001523a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000084  00000000  00000000  00158570  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000064 	.word	0x20000064
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007e04 	.word	0x08007e04

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000068 	.word	0x20000068
 80001cc:	08007e04 	.word	0x08007e04

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b96a 	b.w	800055c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	460c      	mov	r4, r1
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d14e      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ac:	4694      	mov	ip, r2
 80002ae:	458c      	cmp	ip, r1
 80002b0:	4686      	mov	lr, r0
 80002b2:	fab2 f282 	clz	r2, r2
 80002b6:	d962      	bls.n	800037e <__udivmoddi4+0xde>
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0320 	rsb	r3, r2, #32
 80002be:	4091      	lsls	r1, r2
 80002c0:	fa20 f303 	lsr.w	r3, r0, r3
 80002c4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002c8:	4319      	orrs	r1, r3
 80002ca:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ce:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002d2:	fa1f f68c 	uxth.w	r6, ip
 80002d6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002da:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002de:	fb07 1114 	mls	r1, r7, r4, r1
 80002e2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e6:	fb04 f106 	mul.w	r1, r4, r6
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f104 30ff 	add.w	r0, r4, #4294967295
 80002f6:	f080 8112 	bcs.w	800051e <__udivmoddi4+0x27e>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 810f 	bls.w	800051e <__udivmoddi4+0x27e>
 8000300:	3c02      	subs	r4, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a59      	subs	r1, r3, r1
 8000306:	fa1f f38e 	uxth.w	r3, lr
 800030a:	fbb1 f0f7 	udiv	r0, r1, r7
 800030e:	fb07 1110 	mls	r1, r7, r0, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb00 f606 	mul.w	r6, r0, r6
 800031a:	429e      	cmp	r6, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x94>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f100 31ff 	add.w	r1, r0, #4294967295
 8000326:	f080 80fc 	bcs.w	8000522 <__udivmoddi4+0x282>
 800032a:	429e      	cmp	r6, r3
 800032c:	f240 80f9 	bls.w	8000522 <__udivmoddi4+0x282>
 8000330:	4463      	add	r3, ip
 8000332:	3802      	subs	r0, #2
 8000334:	1b9b      	subs	r3, r3, r6
 8000336:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800033a:	2100      	movs	r1, #0
 800033c:	b11d      	cbz	r5, 8000346 <__udivmoddi4+0xa6>
 800033e:	40d3      	lsrs	r3, r2
 8000340:	2200      	movs	r2, #0
 8000342:	e9c5 3200 	strd	r3, r2, [r5]
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d905      	bls.n	800035a <__udivmoddi4+0xba>
 800034e:	b10d      	cbz	r5, 8000354 <__udivmoddi4+0xb4>
 8000350:	e9c5 0100 	strd	r0, r1, [r5]
 8000354:	2100      	movs	r1, #0
 8000356:	4608      	mov	r0, r1
 8000358:	e7f5      	b.n	8000346 <__udivmoddi4+0xa6>
 800035a:	fab3 f183 	clz	r1, r3
 800035e:	2900      	cmp	r1, #0
 8000360:	d146      	bne.n	80003f0 <__udivmoddi4+0x150>
 8000362:	42a3      	cmp	r3, r4
 8000364:	d302      	bcc.n	800036c <__udivmoddi4+0xcc>
 8000366:	4290      	cmp	r0, r2
 8000368:	f0c0 80f0 	bcc.w	800054c <__udivmoddi4+0x2ac>
 800036c:	1a86      	subs	r6, r0, r2
 800036e:	eb64 0303 	sbc.w	r3, r4, r3
 8000372:	2001      	movs	r0, #1
 8000374:	2d00      	cmp	r5, #0
 8000376:	d0e6      	beq.n	8000346 <__udivmoddi4+0xa6>
 8000378:	e9c5 6300 	strd	r6, r3, [r5]
 800037c:	e7e3      	b.n	8000346 <__udivmoddi4+0xa6>
 800037e:	2a00      	cmp	r2, #0
 8000380:	f040 8090 	bne.w	80004a4 <__udivmoddi4+0x204>
 8000384:	eba1 040c 	sub.w	r4, r1, ip
 8000388:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800038c:	fa1f f78c 	uxth.w	r7, ip
 8000390:	2101      	movs	r1, #1
 8000392:	fbb4 f6f8 	udiv	r6, r4, r8
 8000396:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800039a:	fb08 4416 	mls	r4, r8, r6, r4
 800039e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003a2:	fb07 f006 	mul.w	r0, r7, r6
 80003a6:	4298      	cmp	r0, r3
 80003a8:	d908      	bls.n	80003bc <__udivmoddi4+0x11c>
 80003aa:	eb1c 0303 	adds.w	r3, ip, r3
 80003ae:	f106 34ff 	add.w	r4, r6, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x11a>
 80003b4:	4298      	cmp	r0, r3
 80003b6:	f200 80cd 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 80003ba:	4626      	mov	r6, r4
 80003bc:	1a1c      	subs	r4, r3, r0
 80003be:	fa1f f38e 	uxth.w	r3, lr
 80003c2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003c6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ca:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ce:	fb00 f707 	mul.w	r7, r0, r7
 80003d2:	429f      	cmp	r7, r3
 80003d4:	d908      	bls.n	80003e8 <__udivmoddi4+0x148>
 80003d6:	eb1c 0303 	adds.w	r3, ip, r3
 80003da:	f100 34ff 	add.w	r4, r0, #4294967295
 80003de:	d202      	bcs.n	80003e6 <__udivmoddi4+0x146>
 80003e0:	429f      	cmp	r7, r3
 80003e2:	f200 80b0 	bhi.w	8000546 <__udivmoddi4+0x2a6>
 80003e6:	4620      	mov	r0, r4
 80003e8:	1bdb      	subs	r3, r3, r7
 80003ea:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003ee:	e7a5      	b.n	800033c <__udivmoddi4+0x9c>
 80003f0:	f1c1 0620 	rsb	r6, r1, #32
 80003f4:	408b      	lsls	r3, r1
 80003f6:	fa22 f706 	lsr.w	r7, r2, r6
 80003fa:	431f      	orrs	r7, r3
 80003fc:	fa20 fc06 	lsr.w	ip, r0, r6
 8000400:	fa04 f301 	lsl.w	r3, r4, r1
 8000404:	ea43 030c 	orr.w	r3, r3, ip
 8000408:	40f4      	lsrs	r4, r6
 800040a:	fa00 f801 	lsl.w	r8, r0, r1
 800040e:	0c38      	lsrs	r0, r7, #16
 8000410:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000414:	fbb4 fef0 	udiv	lr, r4, r0
 8000418:	fa1f fc87 	uxth.w	ip, r7
 800041c:	fb00 441e 	mls	r4, r0, lr, r4
 8000420:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000424:	fb0e f90c 	mul.w	r9, lr, ip
 8000428:	45a1      	cmp	r9, r4
 800042a:	fa02 f201 	lsl.w	r2, r2, r1
 800042e:	d90a      	bls.n	8000446 <__udivmoddi4+0x1a6>
 8000430:	193c      	adds	r4, r7, r4
 8000432:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000436:	f080 8084 	bcs.w	8000542 <__udivmoddi4+0x2a2>
 800043a:	45a1      	cmp	r9, r4
 800043c:	f240 8081 	bls.w	8000542 <__udivmoddi4+0x2a2>
 8000440:	f1ae 0e02 	sub.w	lr, lr, #2
 8000444:	443c      	add	r4, r7
 8000446:	eba4 0409 	sub.w	r4, r4, r9
 800044a:	fa1f f983 	uxth.w	r9, r3
 800044e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000452:	fb00 4413 	mls	r4, r0, r3, r4
 8000456:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800045a:	fb03 fc0c 	mul.w	ip, r3, ip
 800045e:	45a4      	cmp	ip, r4
 8000460:	d907      	bls.n	8000472 <__udivmoddi4+0x1d2>
 8000462:	193c      	adds	r4, r7, r4
 8000464:	f103 30ff 	add.w	r0, r3, #4294967295
 8000468:	d267      	bcs.n	800053a <__udivmoddi4+0x29a>
 800046a:	45a4      	cmp	ip, r4
 800046c:	d965      	bls.n	800053a <__udivmoddi4+0x29a>
 800046e:	3b02      	subs	r3, #2
 8000470:	443c      	add	r4, r7
 8000472:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000476:	fba0 9302 	umull	r9, r3, r0, r2
 800047a:	eba4 040c 	sub.w	r4, r4, ip
 800047e:	429c      	cmp	r4, r3
 8000480:	46ce      	mov	lr, r9
 8000482:	469c      	mov	ip, r3
 8000484:	d351      	bcc.n	800052a <__udivmoddi4+0x28a>
 8000486:	d04e      	beq.n	8000526 <__udivmoddi4+0x286>
 8000488:	b155      	cbz	r5, 80004a0 <__udivmoddi4+0x200>
 800048a:	ebb8 030e 	subs.w	r3, r8, lr
 800048e:	eb64 040c 	sbc.w	r4, r4, ip
 8000492:	fa04 f606 	lsl.w	r6, r4, r6
 8000496:	40cb      	lsrs	r3, r1
 8000498:	431e      	orrs	r6, r3
 800049a:	40cc      	lsrs	r4, r1
 800049c:	e9c5 6400 	strd	r6, r4, [r5]
 80004a0:	2100      	movs	r1, #0
 80004a2:	e750      	b.n	8000346 <__udivmoddi4+0xa6>
 80004a4:	f1c2 0320 	rsb	r3, r2, #32
 80004a8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ac:	fa0c fc02 	lsl.w	ip, ip, r2
 80004b0:	fa24 f303 	lsr.w	r3, r4, r3
 80004b4:	4094      	lsls	r4, r2
 80004b6:	430c      	orrs	r4, r1
 80004b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004bc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004c0:	fa1f f78c 	uxth.w	r7, ip
 80004c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c8:	fb08 3110 	mls	r1, r8, r0, r3
 80004cc:	0c23      	lsrs	r3, r4, #16
 80004ce:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004d2:	fb00 f107 	mul.w	r1, r0, r7
 80004d6:	4299      	cmp	r1, r3
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x24c>
 80004da:	eb1c 0303 	adds.w	r3, ip, r3
 80004de:	f100 36ff 	add.w	r6, r0, #4294967295
 80004e2:	d22c      	bcs.n	800053e <__udivmoddi4+0x29e>
 80004e4:	4299      	cmp	r1, r3
 80004e6:	d92a      	bls.n	800053e <__udivmoddi4+0x29e>
 80004e8:	3802      	subs	r0, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	1a5b      	subs	r3, r3, r1
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb3 f1f8 	udiv	r1, r3, r8
 80004f4:	fb08 3311 	mls	r3, r8, r1, r3
 80004f8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004fc:	fb01 f307 	mul.w	r3, r1, r7
 8000500:	42a3      	cmp	r3, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x276>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f101 36ff 	add.w	r6, r1, #4294967295
 800050c:	d213      	bcs.n	8000536 <__udivmoddi4+0x296>
 800050e:	42a3      	cmp	r3, r4
 8000510:	d911      	bls.n	8000536 <__udivmoddi4+0x296>
 8000512:	3902      	subs	r1, #2
 8000514:	4464      	add	r4, ip
 8000516:	1ae4      	subs	r4, r4, r3
 8000518:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800051c:	e739      	b.n	8000392 <__udivmoddi4+0xf2>
 800051e:	4604      	mov	r4, r0
 8000520:	e6f0      	b.n	8000304 <__udivmoddi4+0x64>
 8000522:	4608      	mov	r0, r1
 8000524:	e706      	b.n	8000334 <__udivmoddi4+0x94>
 8000526:	45c8      	cmp	r8, r9
 8000528:	d2ae      	bcs.n	8000488 <__udivmoddi4+0x1e8>
 800052a:	ebb9 0e02 	subs.w	lr, r9, r2
 800052e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000532:	3801      	subs	r0, #1
 8000534:	e7a8      	b.n	8000488 <__udivmoddi4+0x1e8>
 8000536:	4631      	mov	r1, r6
 8000538:	e7ed      	b.n	8000516 <__udivmoddi4+0x276>
 800053a:	4603      	mov	r3, r0
 800053c:	e799      	b.n	8000472 <__udivmoddi4+0x1d2>
 800053e:	4630      	mov	r0, r6
 8000540:	e7d4      	b.n	80004ec <__udivmoddi4+0x24c>
 8000542:	46d6      	mov	lr, sl
 8000544:	e77f      	b.n	8000446 <__udivmoddi4+0x1a6>
 8000546:	4463      	add	r3, ip
 8000548:	3802      	subs	r0, #2
 800054a:	e74d      	b.n	80003e8 <__udivmoddi4+0x148>
 800054c:	4606      	mov	r6, r0
 800054e:	4623      	mov	r3, r4
 8000550:	4608      	mov	r0, r1
 8000552:	e70f      	b.n	8000374 <__udivmoddi4+0xd4>
 8000554:	3e02      	subs	r6, #2
 8000556:	4463      	add	r3, ip
 8000558:	e730      	b.n	80003bc <__udivmoddi4+0x11c>
 800055a:	bf00      	nop

0800055c <__aeabi_idiv0>:
 800055c:	4770      	bx	lr
 800055e:	bf00      	nop

08000560 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	b084      	sub	sp, #16
 8000564:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000566:	463b      	mov	r3, r7
 8000568:	2200      	movs	r2, #0
 800056a:	601a      	str	r2, [r3, #0]
 800056c:	605a      	str	r2, [r3, #4]
 800056e:	609a      	str	r2, [r3, #8]
 8000570:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000572:	4b3d      	ldr	r3, [pc, #244]	@ (8000668 <MX_ADC1_Init+0x108>)
 8000574:	4a3d      	ldr	r2, [pc, #244]	@ (800066c <MX_ADC1_Init+0x10c>)
 8000576:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000578:	4b3b      	ldr	r3, [pc, #236]	@ (8000668 <MX_ADC1_Init+0x108>)
 800057a:	2200      	movs	r2, #0
 800057c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800057e:	4b3a      	ldr	r3, [pc, #232]	@ (8000668 <MX_ADC1_Init+0x108>)
 8000580:	2200      	movs	r2, #0
 8000582:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000584:	4b38      	ldr	r3, [pc, #224]	@ (8000668 <MX_ADC1_Init+0x108>)
 8000586:	2201      	movs	r2, #1
 8000588:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800058a:	4b37      	ldr	r3, [pc, #220]	@ (8000668 <MX_ADC1_Init+0x108>)
 800058c:	2200      	movs	r2, #0
 800058e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000590:	4b35      	ldr	r3, [pc, #212]	@ (8000668 <MX_ADC1_Init+0x108>)
 8000592:	2200      	movs	r2, #0
 8000594:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000598:	4b33      	ldr	r3, [pc, #204]	@ (8000668 <MX_ADC1_Init+0x108>)
 800059a:	2200      	movs	r2, #0
 800059c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800059e:	4b32      	ldr	r3, [pc, #200]	@ (8000668 <MX_ADC1_Init+0x108>)
 80005a0:	4a33      	ldr	r2, [pc, #204]	@ (8000670 <MX_ADC1_Init+0x110>)
 80005a2:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80005a4:	4b30      	ldr	r3, [pc, #192]	@ (8000668 <MX_ADC1_Init+0x108>)
 80005a6:	2200      	movs	r2, #0
 80005a8:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 5;
 80005aa:	4b2f      	ldr	r3, [pc, #188]	@ (8000668 <MX_ADC1_Init+0x108>)
 80005ac:	2205      	movs	r2, #5
 80005ae:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80005b0:	4b2d      	ldr	r3, [pc, #180]	@ (8000668 <MX_ADC1_Init+0x108>)
 80005b2:	2200      	movs	r2, #0
 80005b4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80005b8:	4b2b      	ldr	r3, [pc, #172]	@ (8000668 <MX_ADC1_Init+0x108>)
 80005ba:	2201      	movs	r2, #1
 80005bc:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80005be:	482a      	ldr	r0, [pc, #168]	@ (8000668 <MX_ADC1_Init+0x108>)
 80005c0:	f001 ffc8 	bl	8002554 <HAL_ADC_Init>
 80005c4:	4603      	mov	r3, r0
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	d001      	beq.n	80005ce <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80005ca:	f001 fa0d 	bl	80019e8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80005ce:	2308      	movs	r3, #8
 80005d0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80005d2:	2301      	movs	r3, #1
 80005d4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80005d6:	2300      	movs	r3, #0
 80005d8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005da:	463b      	mov	r3, r7
 80005dc:	4619      	mov	r1, r3
 80005de:	4822      	ldr	r0, [pc, #136]	@ (8000668 <MX_ADC1_Init+0x108>)
 80005e0:	f002 f92a 	bl	8002838 <HAL_ADC_ConfigChannel>
 80005e4:	4603      	mov	r3, r0
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	d001      	beq.n	80005ee <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 80005ea:	f001 f9fd 	bl	80019e8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80005ee:	2309      	movs	r3, #9
 80005f0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 80005f2:	2302      	movs	r3, #2
 80005f4:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005f6:	463b      	mov	r3, r7
 80005f8:	4619      	mov	r1, r3
 80005fa:	481b      	ldr	r0, [pc, #108]	@ (8000668 <MX_ADC1_Init+0x108>)
 80005fc:	f002 f91c 	bl	8002838 <HAL_ADC_ConfigChannel>
 8000600:	4603      	mov	r3, r0
 8000602:	2b00      	cmp	r3, #0
 8000604:	d001      	beq.n	800060a <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 8000606:	f001 f9ef 	bl	80019e8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 800060a:	230a      	movs	r3, #10
 800060c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 800060e:	2303      	movs	r3, #3
 8000610:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000612:	463b      	mov	r3, r7
 8000614:	4619      	mov	r1, r3
 8000616:	4814      	ldr	r0, [pc, #80]	@ (8000668 <MX_ADC1_Init+0x108>)
 8000618:	f002 f90e 	bl	8002838 <HAL_ADC_ConfigChannel>
 800061c:	4603      	mov	r3, r0
 800061e:	2b00      	cmp	r3, #0
 8000620:	d001      	beq.n	8000626 <MX_ADC1_Init+0xc6>
  {
    Error_Handler();
 8000622:	f001 f9e1 	bl	80019e8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000626:	230b      	movs	r3, #11
 8000628:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 800062a:	2304      	movs	r3, #4
 800062c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800062e:	463b      	mov	r3, r7
 8000630:	4619      	mov	r1, r3
 8000632:	480d      	ldr	r0, [pc, #52]	@ (8000668 <MX_ADC1_Init+0x108>)
 8000634:	f002 f900 	bl	8002838 <HAL_ADC_ConfigChannel>
 8000638:	4603      	mov	r3, r0
 800063a:	2b00      	cmp	r3, #0
 800063c:	d001      	beq.n	8000642 <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 800063e:	f001 f9d3 	bl	80019e8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8000642:	230c      	movs	r3, #12
 8000644:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8000646:	2305      	movs	r3, #5
 8000648:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800064a:	463b      	mov	r3, r7
 800064c:	4619      	mov	r1, r3
 800064e:	4806      	ldr	r0, [pc, #24]	@ (8000668 <MX_ADC1_Init+0x108>)
 8000650:	f002 f8f2 	bl	8002838 <HAL_ADC_ConfigChannel>
 8000654:	4603      	mov	r3, r0
 8000656:	2b00      	cmp	r3, #0
 8000658:	d001      	beq.n	800065e <MX_ADC1_Init+0xfe>
  {
    Error_Handler();
 800065a:	f001 f9c5 	bl	80019e8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800065e:	bf00      	nop
 8000660:	3710      	adds	r7, #16
 8000662:	46bd      	mov	sp, r7
 8000664:	bd80      	pop	{r7, pc}
 8000666:	bf00      	nop
 8000668:	20000080 	.word	0x20000080
 800066c:	40012000 	.word	0x40012000
 8000670:	0f000001 	.word	0x0f000001

08000674 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	b08a      	sub	sp, #40	@ 0x28
 8000678:	af00      	add	r7, sp, #0
 800067a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800067c:	f107 0314 	add.w	r3, r7, #20
 8000680:	2200      	movs	r2, #0
 8000682:	601a      	str	r2, [r3, #0]
 8000684:	605a      	str	r2, [r3, #4]
 8000686:	609a      	str	r2, [r3, #8]
 8000688:	60da      	str	r2, [r3, #12]
 800068a:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	4a3c      	ldr	r2, [pc, #240]	@ (8000784 <HAL_ADC_MspInit+0x110>)
 8000692:	4293      	cmp	r3, r2
 8000694:	d171      	bne.n	800077a <HAL_ADC_MspInit+0x106>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000696:	2300      	movs	r3, #0
 8000698:	613b      	str	r3, [r7, #16]
 800069a:	4b3b      	ldr	r3, [pc, #236]	@ (8000788 <HAL_ADC_MspInit+0x114>)
 800069c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800069e:	4a3a      	ldr	r2, [pc, #232]	@ (8000788 <HAL_ADC_MspInit+0x114>)
 80006a0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80006a4:	6453      	str	r3, [r2, #68]	@ 0x44
 80006a6:	4b38      	ldr	r3, [pc, #224]	@ (8000788 <HAL_ADC_MspInit+0x114>)
 80006a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80006aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80006ae:	613b      	str	r3, [r7, #16]
 80006b0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80006b2:	2300      	movs	r3, #0
 80006b4:	60fb      	str	r3, [r7, #12]
 80006b6:	4b34      	ldr	r3, [pc, #208]	@ (8000788 <HAL_ADC_MspInit+0x114>)
 80006b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006ba:	4a33      	ldr	r2, [pc, #204]	@ (8000788 <HAL_ADC_MspInit+0x114>)
 80006bc:	f043 0304 	orr.w	r3, r3, #4
 80006c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80006c2:	4b31      	ldr	r3, [pc, #196]	@ (8000788 <HAL_ADC_MspInit+0x114>)
 80006c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006c6:	f003 0304 	and.w	r3, r3, #4
 80006ca:	60fb      	str	r3, [r7, #12]
 80006cc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80006ce:	2300      	movs	r3, #0
 80006d0:	60bb      	str	r3, [r7, #8]
 80006d2:	4b2d      	ldr	r3, [pc, #180]	@ (8000788 <HAL_ADC_MspInit+0x114>)
 80006d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006d6:	4a2c      	ldr	r2, [pc, #176]	@ (8000788 <HAL_ADC_MspInit+0x114>)
 80006d8:	f043 0302 	orr.w	r3, r3, #2
 80006dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80006de:	4b2a      	ldr	r3, [pc, #168]	@ (8000788 <HAL_ADC_MspInit+0x114>)
 80006e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006e2:	f003 0302 	and.w	r3, r3, #2
 80006e6:	60bb      	str	r3, [r7, #8]
 80006e8:	68bb      	ldr	r3, [r7, #8]
    PC1     ------> ADC1_IN11
    PC2     ------> ADC1_IN12
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 80006ea:	2307      	movs	r3, #7
 80006ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80006ee:	2303      	movs	r3, #3
 80006f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006f2:	2300      	movs	r3, #0
 80006f4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80006f6:	f107 0314 	add.w	r3, r7, #20
 80006fa:	4619      	mov	r1, r3
 80006fc:	4823      	ldr	r0, [pc, #140]	@ (800078c <HAL_ADC_MspInit+0x118>)
 80006fe:	f003 f84f 	bl	80037a0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000702:	2303      	movs	r3, #3
 8000704:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000706:	2303      	movs	r3, #3
 8000708:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800070a:	2300      	movs	r3, #0
 800070c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800070e:	f107 0314 	add.w	r3, r7, #20
 8000712:	4619      	mov	r1, r3
 8000714:	481e      	ldr	r0, [pc, #120]	@ (8000790 <HAL_ADC_MspInit+0x11c>)
 8000716:	f003 f843 	bl	80037a0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800071a:	4b1e      	ldr	r3, [pc, #120]	@ (8000794 <HAL_ADC_MspInit+0x120>)
 800071c:	4a1e      	ldr	r2, [pc, #120]	@ (8000798 <HAL_ADC_MspInit+0x124>)
 800071e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000720:	4b1c      	ldr	r3, [pc, #112]	@ (8000794 <HAL_ADC_MspInit+0x120>)
 8000722:	2200      	movs	r2, #0
 8000724:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000726:	4b1b      	ldr	r3, [pc, #108]	@ (8000794 <HAL_ADC_MspInit+0x120>)
 8000728:	2200      	movs	r2, #0
 800072a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800072c:	4b19      	ldr	r3, [pc, #100]	@ (8000794 <HAL_ADC_MspInit+0x120>)
 800072e:	2200      	movs	r2, #0
 8000730:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000732:	4b18      	ldr	r3, [pc, #96]	@ (8000794 <HAL_ADC_MspInit+0x120>)
 8000734:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000738:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800073a:	4b16      	ldr	r3, [pc, #88]	@ (8000794 <HAL_ADC_MspInit+0x120>)
 800073c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000740:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000742:	4b14      	ldr	r3, [pc, #80]	@ (8000794 <HAL_ADC_MspInit+0x120>)
 8000744:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000748:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800074a:	4b12      	ldr	r3, [pc, #72]	@ (8000794 <HAL_ADC_MspInit+0x120>)
 800074c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000750:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000752:	4b10      	ldr	r3, [pc, #64]	@ (8000794 <HAL_ADC_MspInit+0x120>)
 8000754:	2200      	movs	r2, #0
 8000756:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000758:	4b0e      	ldr	r3, [pc, #56]	@ (8000794 <HAL_ADC_MspInit+0x120>)
 800075a:	2200      	movs	r2, #0
 800075c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800075e:	480d      	ldr	r0, [pc, #52]	@ (8000794 <HAL_ADC_MspInit+0x120>)
 8000760:	f002 fc1c 	bl	8002f9c <HAL_DMA_Init>
 8000764:	4603      	mov	r3, r0
 8000766:	2b00      	cmp	r3, #0
 8000768:	d001      	beq.n	800076e <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 800076a:	f001 f93d 	bl	80019e8 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	4a08      	ldr	r2, [pc, #32]	@ (8000794 <HAL_ADC_MspInit+0x120>)
 8000772:	639a      	str	r2, [r3, #56]	@ 0x38
 8000774:	4a07      	ldr	r2, [pc, #28]	@ (8000794 <HAL_ADC_MspInit+0x120>)
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800077a:	bf00      	nop
 800077c:	3728      	adds	r7, #40	@ 0x28
 800077e:	46bd      	mov	sp, r7
 8000780:	bd80      	pop	{r7, pc}
 8000782:	bf00      	nop
 8000784:	40012000 	.word	0x40012000
 8000788:	40023800 	.word	0x40023800
 800078c:	40020800 	.word	0x40020800
 8000790:	40020400 	.word	0x40020400
 8000794:	200000c8 	.word	0x200000c8
 8000798:	40026410 	.word	0x40026410

0800079c <button_init>:
#include "button.h"

uint16_t button_count[16];
uint16_t spi_button = 0x0000;

void button_init(){
 800079c:	b580      	push	{r7, lr}
 800079e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 1);
 80007a0:	2201      	movs	r2, #1
 80007a2:	2108      	movs	r1, #8
 80007a4:	4802      	ldr	r0, [pc, #8]	@ (80007b0 <button_init+0x14>)
 80007a6:	f003 f997 	bl	8003ad8 <HAL_GPIO_WritePin>
}
 80007aa:	bf00      	nop
 80007ac:	bd80      	pop	{r7, pc}
 80007ae:	bf00      	nop
 80007b0:	40020c00 	.word	0x40020c00

080007b4 <button_Scan>:

void button_Scan(){
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b084      	sub	sp, #16
 80007b8:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 0);
 80007ba:	2200      	movs	r2, #0
 80007bc:	2108      	movs	r1, #8
 80007be:	482f      	ldr	r0, [pc, #188]	@ (800087c <button_Scan+0xc8>)
 80007c0:	f003 f98a 	bl	8003ad8 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 1);
 80007c4:	2201      	movs	r2, #1
 80007c6:	2108      	movs	r1, #8
 80007c8:	482c      	ldr	r0, [pc, #176]	@ (800087c <button_Scan+0xc8>)
 80007ca:	f003 f985 	bl	8003ad8 <HAL_GPIO_WritePin>
	  HAL_SPI_Receive(&hspi1, (void*)&spi_button, 2, 10);
 80007ce:	230a      	movs	r3, #10
 80007d0:	2202      	movs	r2, #2
 80007d2:	492b      	ldr	r1, [pc, #172]	@ (8000880 <button_Scan+0xcc>)
 80007d4:	482b      	ldr	r0, [pc, #172]	@ (8000884 <button_Scan+0xd0>)
 80007d6:	f004 f954 	bl	8004a82 <HAL_SPI_Receive>
	  int button_index = 0;
 80007da:	2300      	movs	r3, #0
 80007dc:	60fb      	str	r3, [r7, #12]
	  uint16_t mask = 0x8000;
 80007de:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80007e2:	817b      	strh	r3, [r7, #10]
	  for(int i = 0; i < 16; i++){
 80007e4:	2300      	movs	r3, #0
 80007e6:	607b      	str	r3, [r7, #4]
 80007e8:	e03f      	b.n	800086a <button_Scan+0xb6>
		  if(i >= 0 && i <= 3){
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	db06      	blt.n	80007fe <button_Scan+0x4a>
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	2b03      	cmp	r3, #3
 80007f4:	dc03      	bgt.n	80007fe <button_Scan+0x4a>
			  button_index = i + 4; // do theo schematic thì spi gửi ko giống như button trên mạch
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	3304      	adds	r3, #4
 80007fa:	60fb      	str	r3, [r7, #12]
 80007fc:	e018      	b.n	8000830 <button_Scan+0x7c>
		  } else if (i >= 4 && i <= 7){  //-> cần convert lại cho nó đúng với thứ tự mình mún
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	2b03      	cmp	r3, #3
 8000802:	dd07      	ble.n	8000814 <button_Scan+0x60>
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	2b07      	cmp	r3, #7
 8000808:	dc04      	bgt.n	8000814 <button_Scan+0x60>
			  button_index = 7 - i;
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	f1c3 0307 	rsb	r3, r3, #7
 8000810:	60fb      	str	r3, [r7, #12]
 8000812:	e00d      	b.n	8000830 <button_Scan+0x7c>
		  } else if (i >= 8 && i <= 11){
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	2b07      	cmp	r3, #7
 8000818:	dd06      	ble.n	8000828 <button_Scan+0x74>
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	2b0b      	cmp	r3, #11
 800081e:	dc03      	bgt.n	8000828 <button_Scan+0x74>
			  button_index = i + 4;
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	3304      	adds	r3, #4
 8000824:	60fb      	str	r3, [r7, #12]
 8000826:	e003      	b.n	8000830 <button_Scan+0x7c>
		  } else {
			  button_index = 23 - i;
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	f1c3 0317 	rsb	r3, r3, #23
 800082e:	60fb      	str	r3, [r7, #12]
		  }
		  if(spi_button & mask) button_count[button_index] = 0;
 8000830:	4b13      	ldr	r3, [pc, #76]	@ (8000880 <button_Scan+0xcc>)
 8000832:	881a      	ldrh	r2, [r3, #0]
 8000834:	897b      	ldrh	r3, [r7, #10]
 8000836:	4013      	ands	r3, r2
 8000838:	b29b      	uxth	r3, r3
 800083a:	2b00      	cmp	r3, #0
 800083c:	d005      	beq.n	800084a <button_Scan+0x96>
 800083e:	4a12      	ldr	r2, [pc, #72]	@ (8000888 <button_Scan+0xd4>)
 8000840:	68fb      	ldr	r3, [r7, #12]
 8000842:	2100      	movs	r1, #0
 8000844:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8000848:	e009      	b.n	800085e <button_Scan+0xaa>
		  else button_count[button_index]++;
 800084a:	4a0f      	ldr	r2, [pc, #60]	@ (8000888 <button_Scan+0xd4>)
 800084c:	68fb      	ldr	r3, [r7, #12]
 800084e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000852:	3301      	adds	r3, #1
 8000854:	b299      	uxth	r1, r3
 8000856:	4a0c      	ldr	r2, [pc, #48]	@ (8000888 <button_Scan+0xd4>)
 8000858:	68fb      	ldr	r3, [r7, #12]
 800085a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
//		  if(spi_button & mask) button_count[i] = 0;
//		  else button_count[i]++;
		  mask = mask >> 1;
 800085e:	897b      	ldrh	r3, [r7, #10]
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	817b      	strh	r3, [r7, #10]
	  for(int i = 0; i < 16; i++){
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	3301      	adds	r3, #1
 8000868:	607b      	str	r3, [r7, #4]
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	2b0f      	cmp	r3, #15
 800086e:	ddbc      	ble.n	80007ea <button_Scan+0x36>
	  }
}
 8000870:	bf00      	nop
 8000872:	bf00      	nop
 8000874:	3710      	adds	r7, #16
 8000876:	46bd      	mov	sp, r7
 8000878:	bd80      	pop	{r7, pc}
 800087a:	bf00      	nop
 800087c:	40020c00 	.word	0x40020c00
 8000880:	20000148 	.word	0x20000148
 8000884:	20000214 	.word	0x20000214
 8000888:	20000128 	.word	0x20000128

0800088c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	b082      	sub	sp, #8
 8000890:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000892:	2300      	movs	r3, #0
 8000894:	607b      	str	r3, [r7, #4]
 8000896:	4b0c      	ldr	r3, [pc, #48]	@ (80008c8 <MX_DMA_Init+0x3c>)
 8000898:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800089a:	4a0b      	ldr	r2, [pc, #44]	@ (80008c8 <MX_DMA_Init+0x3c>)
 800089c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80008a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80008a2:	4b09      	ldr	r3, [pc, #36]	@ (80008c8 <MX_DMA_Init+0x3c>)
 80008a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008a6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80008aa:	607b      	str	r3, [r7, #4]
 80008ac:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80008ae:	2200      	movs	r2, #0
 80008b0:	2100      	movs	r1, #0
 80008b2:	2038      	movs	r0, #56	@ 0x38
 80008b4:	f002 fb3b 	bl	8002f2e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80008b8:	2038      	movs	r0, #56	@ 0x38
 80008ba:	f002 fb54 	bl	8002f66 <HAL_NVIC_EnableIRQ>

}
 80008be:	bf00      	nop
 80008c0:	3708      	adds	r7, #8
 80008c2:	46bd      	mov	sp, r7
 80008c4:	bd80      	pop	{r7, pc}
 80008c6:	bf00      	nop
 80008c8:	40023800 	.word	0x40023800

080008cc <MX_FSMC_Init>:

SRAM_HandleTypeDef hsram1;

/* FSMC initialization function */
void MX_FSMC_Init(void)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b08e      	sub	sp, #56	@ 0x38
 80008d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 80008d2:	f107 031c 	add.w	r3, r7, #28
 80008d6:	2200      	movs	r2, #0
 80008d8:	601a      	str	r2, [r3, #0]
 80008da:	605a      	str	r2, [r3, #4]
 80008dc:	609a      	str	r2, [r3, #8]
 80008de:	60da      	str	r2, [r3, #12]
 80008e0:	611a      	str	r2, [r3, #16]
 80008e2:	615a      	str	r2, [r3, #20]
 80008e4:	619a      	str	r2, [r3, #24]
  FSMC_NORSRAM_TimingTypeDef ExtTiming = {0};
 80008e6:	463b      	mov	r3, r7
 80008e8:	2200      	movs	r2, #0
 80008ea:	601a      	str	r2, [r3, #0]
 80008ec:	605a      	str	r2, [r3, #4]
 80008ee:	609a      	str	r2, [r3, #8]
 80008f0:	60da      	str	r2, [r3, #12]
 80008f2:	611a      	str	r2, [r3, #16]
 80008f4:	615a      	str	r2, [r3, #20]
 80008f6:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 80008f8:	4b2f      	ldr	r3, [pc, #188]	@ (80009b8 <MX_FSMC_Init+0xec>)
 80008fa:	f04f 4220 	mov.w	r2, #2684354560	@ 0xa0000000
 80008fe:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8000900:	4b2d      	ldr	r3, [pc, #180]	@ (80009b8 <MX_FSMC_Init+0xec>)
 8000902:	4a2e      	ldr	r2, [pc, #184]	@ (80009bc <MX_FSMC_Init+0xf0>)
 8000904:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 8000906:	4b2c      	ldr	r3, [pc, #176]	@ (80009b8 <MX_FSMC_Init+0xec>)
 8000908:	2200      	movs	r2, #0
 800090a:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 800090c:	4b2a      	ldr	r3, [pc, #168]	@ (80009b8 <MX_FSMC_Init+0xec>)
 800090e:	2200      	movs	r2, #0
 8000910:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 8000912:	4b29      	ldr	r3, [pc, #164]	@ (80009b8 <MX_FSMC_Init+0xec>)
 8000914:	2200      	movs	r2, #0
 8000916:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8000918:	4b27      	ldr	r3, [pc, #156]	@ (80009b8 <MX_FSMC_Init+0xec>)
 800091a:	2210      	movs	r2, #16
 800091c:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 800091e:	4b26      	ldr	r3, [pc, #152]	@ (80009b8 <MX_FSMC_Init+0xec>)
 8000920:	2200      	movs	r2, #0
 8000922:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8000924:	4b24      	ldr	r3, [pc, #144]	@ (80009b8 <MX_FSMC_Init+0xec>)
 8000926:	2200      	movs	r2, #0
 8000928:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 800092a:	4b23      	ldr	r3, [pc, #140]	@ (80009b8 <MX_FSMC_Init+0xec>)
 800092c:	2200      	movs	r2, #0
 800092e:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8000930:	4b21      	ldr	r3, [pc, #132]	@ (80009b8 <MX_FSMC_Init+0xec>)
 8000932:	2200      	movs	r2, #0
 8000934:	625a      	str	r2, [r3, #36]	@ 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 8000936:	4b20      	ldr	r3, [pc, #128]	@ (80009b8 <MX_FSMC_Init+0xec>)
 8000938:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800093c:	629a      	str	r2, [r3, #40]	@ 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 800093e:	4b1e      	ldr	r3, [pc, #120]	@ (80009b8 <MX_FSMC_Init+0xec>)
 8000940:	2200      	movs	r2, #0
 8000942:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_ENABLE;
 8000944:	4b1c      	ldr	r3, [pc, #112]	@ (80009b8 <MX_FSMC_Init+0xec>)
 8000946:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800094a:	631a      	str	r2, [r3, #48]	@ 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 800094c:	4b1a      	ldr	r3, [pc, #104]	@ (80009b8 <MX_FSMC_Init+0xec>)
 800094e:	2200      	movs	r2, #0
 8000950:	635a      	str	r2, [r3, #52]	@ 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 8000952:	4b19      	ldr	r3, [pc, #100]	@ (80009b8 <MX_FSMC_Init+0xec>)
 8000954:	2200      	movs	r2, #0
 8000956:	639a      	str	r2, [r3, #56]	@ 0x38
  hsram1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 8000958:	4b17      	ldr	r3, [pc, #92]	@ (80009b8 <MX_FSMC_Init+0xec>)
 800095a:	2200      	movs	r2, #0
 800095c:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Timing */
  Timing.AddressSetupTime = 0xf;
 800095e:	230f      	movs	r3, #15
 8000960:	61fb      	str	r3, [r7, #28]
  Timing.AddressHoldTime = 15;
 8000962:	230f      	movs	r3, #15
 8000964:	623b      	str	r3, [r7, #32]
  Timing.DataSetupTime = 60;
 8000966:	233c      	movs	r3, #60	@ 0x3c
 8000968:	627b      	str	r3, [r7, #36]	@ 0x24
  Timing.BusTurnAroundDuration = 0;
 800096a:	2300      	movs	r3, #0
 800096c:	62bb      	str	r3, [r7, #40]	@ 0x28
  Timing.CLKDivision = 16;
 800096e:	2310      	movs	r3, #16
 8000970:	62fb      	str	r3, [r7, #44]	@ 0x2c
  Timing.DataLatency = 17;
 8000972:	2311      	movs	r3, #17
 8000974:	633b      	str	r3, [r7, #48]	@ 0x30
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 8000976:	2300      	movs	r3, #0
 8000978:	637b      	str	r3, [r7, #52]	@ 0x34
  /* ExtTiming */
  ExtTiming.AddressSetupTime = 8;
 800097a:	2308      	movs	r3, #8
 800097c:	603b      	str	r3, [r7, #0]
  ExtTiming.AddressHoldTime = 15;
 800097e:	230f      	movs	r3, #15
 8000980:	607b      	str	r3, [r7, #4]
  ExtTiming.DataSetupTime = 9;
 8000982:	2309      	movs	r3, #9
 8000984:	60bb      	str	r3, [r7, #8]
  ExtTiming.BusTurnAroundDuration = 0;
 8000986:	2300      	movs	r3, #0
 8000988:	60fb      	str	r3, [r7, #12]
  ExtTiming.CLKDivision = 16;
 800098a:	2310      	movs	r3, #16
 800098c:	613b      	str	r3, [r7, #16]
  ExtTiming.DataLatency = 17;
 800098e:	2311      	movs	r3, #17
 8000990:	617b      	str	r3, [r7, #20]
  ExtTiming.AccessMode = FSMC_ACCESS_MODE_A;
 8000992:	2300      	movs	r3, #0
 8000994:	61bb      	str	r3, [r7, #24]

  if (HAL_SRAM_Init(&hsram1, &Timing, &ExtTiming) != HAL_OK)
 8000996:	463a      	mov	r2, r7
 8000998:	f107 031c 	add.w	r3, r7, #28
 800099c:	4619      	mov	r1, r3
 800099e:	4806      	ldr	r0, [pc, #24]	@ (80009b8 <MX_FSMC_Init+0xec>)
 80009a0:	f004 fc52 	bl	8005248 <HAL_SRAM_Init>
 80009a4:	4603      	mov	r3, r0
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d001      	beq.n	80009ae <MX_FSMC_Init+0xe2>
  {
    Error_Handler( );
 80009aa:	f001 f81d 	bl	80019e8 <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 80009ae:	bf00      	nop
 80009b0:	3738      	adds	r7, #56	@ 0x38
 80009b2:	46bd      	mov	sp, r7
 80009b4:	bd80      	pop	{r7, pc}
 80009b6:	bf00      	nop
 80009b8:	2000014c 	.word	0x2000014c
 80009bc:	a0000104 	.word	0xa0000104

080009c0 <HAL_FSMC_MspInit>:

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b086      	sub	sp, #24
 80009c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009c6:	1d3b      	adds	r3, r7, #4
 80009c8:	2200      	movs	r2, #0
 80009ca:	601a      	str	r2, [r3, #0]
 80009cc:	605a      	str	r2, [r3, #4]
 80009ce:	609a      	str	r2, [r3, #8]
 80009d0:	60da      	str	r2, [r3, #12]
 80009d2:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 80009d4:	4b1c      	ldr	r3, [pc, #112]	@ (8000a48 <HAL_FSMC_MspInit+0x88>)
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d131      	bne.n	8000a40 <HAL_FSMC_MspInit+0x80>
    return;
  }
  FSMC_Initialized = 1;
 80009dc:	4b1a      	ldr	r3, [pc, #104]	@ (8000a48 <HAL_FSMC_MspInit+0x88>)
 80009de:	2201      	movs	r2, #1
 80009e0:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 80009e2:	2300      	movs	r3, #0
 80009e4:	603b      	str	r3, [r7, #0]
 80009e6:	4b19      	ldr	r3, [pc, #100]	@ (8000a4c <HAL_FSMC_MspInit+0x8c>)
 80009e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80009ea:	4a18      	ldr	r2, [pc, #96]	@ (8000a4c <HAL_FSMC_MspInit+0x8c>)
 80009ec:	f043 0301 	orr.w	r3, r3, #1
 80009f0:	6393      	str	r3, [r2, #56]	@ 0x38
 80009f2:	4b16      	ldr	r3, [pc, #88]	@ (8000a4c <HAL_FSMC_MspInit+0x8c>)
 80009f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80009f6:	f003 0301 	and.w	r3, r3, #1
 80009fa:	603b      	str	r3, [r7, #0]
 80009fc:	683b      	ldr	r3, [r7, #0]
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 80009fe:	f64f 7388 	movw	r3, #65416	@ 0xff88
 8000a02:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a04:	2302      	movs	r3, #2
 8000a06:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a0c:	2303      	movs	r3, #3
 8000a0e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8000a10:	230c      	movs	r3, #12
 8000a12:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000a14:	1d3b      	adds	r3, r7, #4
 8000a16:	4619      	mov	r1, r3
 8000a18:	480d      	ldr	r0, [pc, #52]	@ (8000a50 <HAL_FSMC_MspInit+0x90>)
 8000a1a:	f002 fec1 	bl	80037a0 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 8000a1e:	f24c 73b3 	movw	r3, #51123	@ 0xc7b3
 8000a22:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a24:	2302      	movs	r3, #2
 8000a26:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a2c:	2303      	movs	r3, #3
 8000a2e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8000a30:	230c      	movs	r3, #12
 8000a32:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a34:	1d3b      	adds	r3, r7, #4
 8000a36:	4619      	mov	r1, r3
 8000a38:	4806      	ldr	r0, [pc, #24]	@ (8000a54 <HAL_FSMC_MspInit+0x94>)
 8000a3a:	f002 feb1 	bl	80037a0 <HAL_GPIO_Init>
 8000a3e:	e000      	b.n	8000a42 <HAL_FSMC_MspInit+0x82>
    return;
 8000a40:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 8000a42:	3718      	adds	r7, #24
 8000a44:	46bd      	mov	sp, r7
 8000a46:	bd80      	pop	{r7, pc}
 8000a48:	2000019c 	.word	0x2000019c
 8000a4c:	40023800 	.word	0x40023800
 8000a50:	40021000 	.word	0x40021000
 8000a54:	40020c00 	.word	0x40020c00

08000a58 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* sramHandle){
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b082      	sub	sp, #8
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 8000a60:	f7ff ffae 	bl	80009c0 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8000a64:	bf00      	nop
 8000a66:	3708      	adds	r7, #8
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	bd80      	pop	{r7, pc}

08000a6c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b08e      	sub	sp, #56	@ 0x38
 8000a70:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a72:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a76:	2200      	movs	r2, #0
 8000a78:	601a      	str	r2, [r3, #0]
 8000a7a:	605a      	str	r2, [r3, #4]
 8000a7c:	609a      	str	r2, [r3, #8]
 8000a7e:	60da      	str	r2, [r3, #12]
 8000a80:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000a82:	2300      	movs	r3, #0
 8000a84:	623b      	str	r3, [r7, #32]
 8000a86:	4b8f      	ldr	r3, [pc, #572]	@ (8000cc4 <MX_GPIO_Init+0x258>)
 8000a88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a8a:	4a8e      	ldr	r2, [pc, #568]	@ (8000cc4 <MX_GPIO_Init+0x258>)
 8000a8c:	f043 0310 	orr.w	r3, r3, #16
 8000a90:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a92:	4b8c      	ldr	r3, [pc, #560]	@ (8000cc4 <MX_GPIO_Init+0x258>)
 8000a94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a96:	f003 0310 	and.w	r3, r3, #16
 8000a9a:	623b      	str	r3, [r7, #32]
 8000a9c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	61fb      	str	r3, [r7, #28]
 8000aa2:	4b88      	ldr	r3, [pc, #544]	@ (8000cc4 <MX_GPIO_Init+0x258>)
 8000aa4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aa6:	4a87      	ldr	r2, [pc, #540]	@ (8000cc4 <MX_GPIO_Init+0x258>)
 8000aa8:	f043 0304 	orr.w	r3, r3, #4
 8000aac:	6313      	str	r3, [r2, #48]	@ 0x30
 8000aae:	4b85      	ldr	r3, [pc, #532]	@ (8000cc4 <MX_GPIO_Init+0x258>)
 8000ab0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ab2:	f003 0304 	and.w	r3, r3, #4
 8000ab6:	61fb      	str	r3, [r7, #28]
 8000ab8:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000aba:	2300      	movs	r3, #0
 8000abc:	61bb      	str	r3, [r7, #24]
 8000abe:	4b81      	ldr	r3, [pc, #516]	@ (8000cc4 <MX_GPIO_Init+0x258>)
 8000ac0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ac2:	4a80      	ldr	r2, [pc, #512]	@ (8000cc4 <MX_GPIO_Init+0x258>)
 8000ac4:	f043 0320 	orr.w	r3, r3, #32
 8000ac8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000aca:	4b7e      	ldr	r3, [pc, #504]	@ (8000cc4 <MX_GPIO_Init+0x258>)
 8000acc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ace:	f003 0320 	and.w	r3, r3, #32
 8000ad2:	61bb      	str	r3, [r7, #24]
 8000ad4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	617b      	str	r3, [r7, #20]
 8000ada:	4b7a      	ldr	r3, [pc, #488]	@ (8000cc4 <MX_GPIO_Init+0x258>)
 8000adc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ade:	4a79      	ldr	r2, [pc, #484]	@ (8000cc4 <MX_GPIO_Init+0x258>)
 8000ae0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000ae4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ae6:	4b77      	ldr	r3, [pc, #476]	@ (8000cc4 <MX_GPIO_Init+0x258>)
 8000ae8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000aee:	617b      	str	r3, [r7, #20]
 8000af0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000af2:	2300      	movs	r3, #0
 8000af4:	613b      	str	r3, [r7, #16]
 8000af6:	4b73      	ldr	r3, [pc, #460]	@ (8000cc4 <MX_GPIO_Init+0x258>)
 8000af8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000afa:	4a72      	ldr	r2, [pc, #456]	@ (8000cc4 <MX_GPIO_Init+0x258>)
 8000afc:	f043 0301 	orr.w	r3, r3, #1
 8000b00:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b02:	4b70      	ldr	r3, [pc, #448]	@ (8000cc4 <MX_GPIO_Init+0x258>)
 8000b04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b06:	f003 0301 	and.w	r3, r3, #1
 8000b0a:	613b      	str	r3, [r7, #16]
 8000b0c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b0e:	2300      	movs	r3, #0
 8000b10:	60fb      	str	r3, [r7, #12]
 8000b12:	4b6c      	ldr	r3, [pc, #432]	@ (8000cc4 <MX_GPIO_Init+0x258>)
 8000b14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b16:	4a6b      	ldr	r2, [pc, #428]	@ (8000cc4 <MX_GPIO_Init+0x258>)
 8000b18:	f043 0302 	orr.w	r3, r3, #2
 8000b1c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b1e:	4b69      	ldr	r3, [pc, #420]	@ (8000cc4 <MX_GPIO_Init+0x258>)
 8000b20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b22:	f003 0302 	and.w	r3, r3, #2
 8000b26:	60fb      	str	r3, [r7, #12]
 8000b28:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	60bb      	str	r3, [r7, #8]
 8000b2e:	4b65      	ldr	r3, [pc, #404]	@ (8000cc4 <MX_GPIO_Init+0x258>)
 8000b30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b32:	4a64      	ldr	r2, [pc, #400]	@ (8000cc4 <MX_GPIO_Init+0x258>)
 8000b34:	f043 0308 	orr.w	r3, r3, #8
 8000b38:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b3a:	4b62      	ldr	r3, [pc, #392]	@ (8000cc4 <MX_GPIO_Init+0x258>)
 8000b3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b3e:	f003 0308 	and.w	r3, r3, #8
 8000b42:	60bb      	str	r3, [r7, #8]
 8000b44:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000b46:	2300      	movs	r3, #0
 8000b48:	607b      	str	r3, [r7, #4]
 8000b4a:	4b5e      	ldr	r3, [pc, #376]	@ (8000cc4 <MX_GPIO_Init+0x258>)
 8000b4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b4e:	4a5d      	ldr	r2, [pc, #372]	@ (8000cc4 <MX_GPIO_Init+0x258>)
 8000b50:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000b54:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b56:	4b5b      	ldr	r3, [pc, #364]	@ (8000cc4 <MX_GPIO_Init+0x258>)
 8000b58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b5a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000b5e:	607b      	str	r3, [r7, #4]
 8000b60:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DEBUG_LED_Pin|OUTPUT_Y0_Pin|OUTPUT_Y1_Pin, GPIO_PIN_RESET);
 8000b62:	2200      	movs	r2, #0
 8000b64:	2170      	movs	r1, #112	@ 0x70
 8000b66:	4858      	ldr	r0, [pc, #352]	@ (8000cc8 <MX_GPIO_Init+0x25c>)
 8000b68:	f002 ffb6 	bl	8003ad8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, FSMC_RES_Pin|T_MOSI_Pin, GPIO_PIN_RESET);
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	f44f 5108 	mov.w	r1, #8704	@ 0x2200
 8000b72:	4856      	ldr	r0, [pc, #344]	@ (8000ccc <MX_GPIO_Init+0x260>)
 8000b74:	f002 ffb0 	bl	8003ad8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ESP12_PWR_GPIO_Port, ESP12_PWR_Pin, GPIO_PIN_RESET);
 8000b78:	2200      	movs	r2, #0
 8000b7a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000b7e:	4854      	ldr	r0, [pc, #336]	@ (8000cd0 <MX_GPIO_Init+0x264>)
 8000b80:	f002 ffaa 	bl	8003ad8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD_LATCH_Pin|T_CS_Pin|T_CLK_Pin, GPIO_PIN_RESET);
 8000b84:	2200      	movs	r2, #0
 8000b86:	f44f 71e0 	mov.w	r1, #448	@ 0x1c0
 8000b8a:	4852      	ldr	r0, [pc, #328]	@ (8000cd4 <MX_GPIO_Init+0x268>)
 8000b8c:	f002 ffa4 	bl	8003ad8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FSMC_BLK_GPIO_Port, FSMC_BLK_Pin, GPIO_PIN_RESET);
 8000b90:	2200      	movs	r2, #0
 8000b92:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000b96:	4850      	ldr	r0, [pc, #320]	@ (8000cd8 <MX_GPIO_Init+0x26c>)
 8000b98:	f002 ff9e 	bl	8003ad8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, GPIO_PIN_RESET);
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	2108      	movs	r1, #8
 8000ba0:	484e      	ldr	r0, [pc, #312]	@ (8000cdc <MX_GPIO_Init+0x270>)
 8000ba2:	f002 ff99 	bl	8003ad8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = DEBUG_LED_Pin|OUTPUT_Y0_Pin|OUTPUT_Y1_Pin;
 8000ba6:	2370      	movs	r3, #112	@ 0x70
 8000ba8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000baa:	2301      	movs	r3, #1
 8000bac:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000bb6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000bba:	4619      	mov	r1, r3
 8000bbc:	4842      	ldr	r0, [pc, #264]	@ (8000cc8 <MX_GPIO_Init+0x25c>)
 8000bbe:	f002 fdef 	bl	80037a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = FSMC_RES_Pin|T_MOSI_Pin;
 8000bc2:	f44f 5308 	mov.w	r3, #8704	@ 0x2200
 8000bc6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bc8:	2301      	movs	r3, #1
 8000bca:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bd4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000bd8:	4619      	mov	r1, r3
 8000bda:	483c      	ldr	r0, [pc, #240]	@ (8000ccc <MX_GPIO_Init+0x260>)
 8000bdc:	f002 fde0 	bl	80037a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ESP12_BUSY_Pin;
 8000be0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000be4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000be6:	2300      	movs	r3, #0
 8000be8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bea:	2300      	movs	r3, #0
 8000bec:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(ESP12_BUSY_GPIO_Port, &GPIO_InitStruct);
 8000bee:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000bf2:	4619      	mov	r1, r3
 8000bf4:	4836      	ldr	r0, [pc, #216]	@ (8000cd0 <MX_GPIO_Init+0x264>)
 8000bf6:	f002 fdd3 	bl	80037a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ESP12_PWR_Pin;
 8000bfa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000bfe:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c00:	2301      	movs	r3, #1
 8000c02:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c04:	2300      	movs	r3, #0
 8000c06:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(ESP12_PWR_GPIO_Port, &GPIO_InitStruct);
 8000c0c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c10:	4619      	mov	r1, r3
 8000c12:	482f      	ldr	r0, [pc, #188]	@ (8000cd0 <MX_GPIO_Init+0x264>)
 8000c14:	f002 fdc4 	bl	80037a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = INPUT_X0_Pin|INPUT_X1_Pin;
 8000c18:	23c0      	movs	r3, #192	@ 0xc0
 8000c1a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c20:	2300      	movs	r3, #0
 8000c22:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c24:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c28:	4619      	mov	r1, r3
 8000c2a:	482b      	ldr	r0, [pc, #172]	@ (8000cd8 <MX_GPIO_Init+0x26c>)
 8000c2c:	f002 fdb8 	bl	80037a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = INPUT_X2_Pin|INPUT_X3_Pin;
 8000c30:	2330      	movs	r3, #48	@ 0x30
 8000c32:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c34:	2300      	movs	r3, #0
 8000c36:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c3c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c40:	4619      	mov	r1, r3
 8000c42:	4822      	ldr	r0, [pc, #136]	@ (8000ccc <MX_GPIO_Init+0x260>)
 8000c44:	f002 fdac 	bl	80037a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = LD_LATCH_Pin|T_CS_Pin|T_CLK_Pin;
 8000c48:	f44f 73e0 	mov.w	r3, #448	@ 0x1c0
 8000c4c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c4e:	2301      	movs	r3, #1
 8000c50:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c52:	2300      	movs	r3, #0
 8000c54:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c56:	2300      	movs	r3, #0
 8000c58:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000c5a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c5e:	4619      	mov	r1, r3
 8000c60:	481c      	ldr	r0, [pc, #112]	@ (8000cd4 <MX_GPIO_Init+0x268>)
 8000c62:	f002 fd9d 	bl	80037a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = T_PEN_Pin|T_MISO_Pin;
 8000c66:	f44f 5388 	mov.w	r3, #4352	@ 0x1100
 8000c6a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c70:	2301      	movs	r3, #1
 8000c72:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c74:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c78:	4619      	mov	r1, r3
 8000c7a:	4814      	ldr	r0, [pc, #80]	@ (8000ccc <MX_GPIO_Init+0x260>)
 8000c7c:	f002 fd90 	bl	80037a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FSMC_BLK_Pin;
 8000c80:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000c84:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c86:	2301      	movs	r3, #1
 8000c88:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(FSMC_BLK_GPIO_Port, &GPIO_InitStruct);
 8000c92:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c96:	4619      	mov	r1, r3
 8000c98:	480f      	ldr	r0, [pc, #60]	@ (8000cd8 <MX_GPIO_Init+0x26c>)
 8000c9a:	f002 fd81 	bl	80037a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BTN_LOAD_Pin;
 8000c9e:	2308      	movs	r3, #8
 8000ca0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ca2:	2301      	movs	r3, #1
 8000ca4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000caa:	2300      	movs	r3, #0
 8000cac:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(BTN_LOAD_GPIO_Port, &GPIO_InitStruct);
 8000cae:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000cb2:	4619      	mov	r1, r3
 8000cb4:	4809      	ldr	r0, [pc, #36]	@ (8000cdc <MX_GPIO_Init+0x270>)
 8000cb6:	f002 fd73 	bl	80037a0 <HAL_GPIO_Init>

}
 8000cba:	bf00      	nop
 8000cbc:	3738      	adds	r7, #56	@ 0x38
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	bd80      	pop	{r7, pc}
 8000cc2:	bf00      	nop
 8000cc4:	40023800 	.word	0x40023800
 8000cc8:	40021000 	.word	0x40021000
 8000ccc:	40020800 	.word	0x40020800
 8000cd0:	40021400 	.word	0x40021400
 8000cd4:	40021800 	.word	0x40021800
 8000cd8:	40020000 	.word	0x40020000
 8000cdc:	40020c00 	.word	0x40020c00

08000ce0 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000ce4:	4b12      	ldr	r3, [pc, #72]	@ (8000d30 <MX_I2C1_Init+0x50>)
 8000ce6:	4a13      	ldr	r2, [pc, #76]	@ (8000d34 <MX_I2C1_Init+0x54>)
 8000ce8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000cea:	4b11      	ldr	r3, [pc, #68]	@ (8000d30 <MX_I2C1_Init+0x50>)
 8000cec:	4a12      	ldr	r2, [pc, #72]	@ (8000d38 <MX_I2C1_Init+0x58>)
 8000cee:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000cf0:	4b0f      	ldr	r3, [pc, #60]	@ (8000d30 <MX_I2C1_Init+0x50>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000cf6:	4b0e      	ldr	r3, [pc, #56]	@ (8000d30 <MX_I2C1_Init+0x50>)
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000cfc:	4b0c      	ldr	r3, [pc, #48]	@ (8000d30 <MX_I2C1_Init+0x50>)
 8000cfe:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000d02:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000d04:	4b0a      	ldr	r3, [pc, #40]	@ (8000d30 <MX_I2C1_Init+0x50>)
 8000d06:	2200      	movs	r2, #0
 8000d08:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000d0a:	4b09      	ldr	r3, [pc, #36]	@ (8000d30 <MX_I2C1_Init+0x50>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000d10:	4b07      	ldr	r3, [pc, #28]	@ (8000d30 <MX_I2C1_Init+0x50>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000d16:	4b06      	ldr	r3, [pc, #24]	@ (8000d30 <MX_I2C1_Init+0x50>)
 8000d18:	2200      	movs	r2, #0
 8000d1a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000d1c:	4804      	ldr	r0, [pc, #16]	@ (8000d30 <MX_I2C1_Init+0x50>)
 8000d1e:	f002 ff0f 	bl	8003b40 <HAL_I2C_Init>
 8000d22:	4603      	mov	r3, r0
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d001      	beq.n	8000d2c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000d28:	f000 fe5e 	bl	80019e8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000d2c:	bf00      	nop
 8000d2e:	bd80      	pop	{r7, pc}
 8000d30:	200001a0 	.word	0x200001a0
 8000d34:	40005400 	.word	0x40005400
 8000d38:	000186a0 	.word	0x000186a0

08000d3c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b08a      	sub	sp, #40	@ 0x28
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d44:	f107 0314 	add.w	r3, r7, #20
 8000d48:	2200      	movs	r2, #0
 8000d4a:	601a      	str	r2, [r3, #0]
 8000d4c:	605a      	str	r2, [r3, #4]
 8000d4e:	609a      	str	r2, [r3, #8]
 8000d50:	60da      	str	r2, [r3, #12]
 8000d52:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	4a19      	ldr	r2, [pc, #100]	@ (8000dc0 <HAL_I2C_MspInit+0x84>)
 8000d5a:	4293      	cmp	r3, r2
 8000d5c:	d12b      	bne.n	8000db6 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d5e:	2300      	movs	r3, #0
 8000d60:	613b      	str	r3, [r7, #16]
 8000d62:	4b18      	ldr	r3, [pc, #96]	@ (8000dc4 <HAL_I2C_MspInit+0x88>)
 8000d64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d66:	4a17      	ldr	r2, [pc, #92]	@ (8000dc4 <HAL_I2C_MspInit+0x88>)
 8000d68:	f043 0302 	orr.w	r3, r3, #2
 8000d6c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d6e:	4b15      	ldr	r3, [pc, #84]	@ (8000dc4 <HAL_I2C_MspInit+0x88>)
 8000d70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d72:	f003 0302 	and.w	r3, r3, #2
 8000d76:	613b      	str	r3, [r7, #16]
 8000d78:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000d7a:	23c0      	movs	r3, #192	@ 0xc0
 8000d7c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d7e:	2312      	movs	r3, #18
 8000d80:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d82:	2300      	movs	r3, #0
 8000d84:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d86:	2303      	movs	r3, #3
 8000d88:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000d8a:	2304      	movs	r3, #4
 8000d8c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d8e:	f107 0314 	add.w	r3, r7, #20
 8000d92:	4619      	mov	r1, r3
 8000d94:	480c      	ldr	r0, [pc, #48]	@ (8000dc8 <HAL_I2C_MspInit+0x8c>)
 8000d96:	f002 fd03 	bl	80037a0 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	60fb      	str	r3, [r7, #12]
 8000d9e:	4b09      	ldr	r3, [pc, #36]	@ (8000dc4 <HAL_I2C_MspInit+0x88>)
 8000da0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000da2:	4a08      	ldr	r2, [pc, #32]	@ (8000dc4 <HAL_I2C_MspInit+0x88>)
 8000da4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000da8:	6413      	str	r3, [r2, #64]	@ 0x40
 8000daa:	4b06      	ldr	r3, [pc, #24]	@ (8000dc4 <HAL_I2C_MspInit+0x88>)
 8000dac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dae:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000db2:	60fb      	str	r3, [r7, #12]
 8000db4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000db6:	bf00      	nop
 8000db8:	3728      	adds	r7, #40	@ 0x28
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bd80      	pop	{r7, pc}
 8000dbe:	bf00      	nop
 8000dc0:	40005400 	.word	0x40005400
 8000dc4:	40023800 	.word	0x40023800
 8000dc8:	40020400 	.word	0x40020400

08000dcc <LCD_WR_REG>:
unsigned char s[50];

_lcd_dev lcddev;

void LCD_WR_REG(uint16_t reg)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	b083      	sub	sp, #12
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_REG=reg;
 8000dd6:	4a04      	ldr	r2, [pc, #16]	@ (8000de8 <LCD_WR_REG+0x1c>)
 8000dd8:	88fb      	ldrh	r3, [r7, #6]
 8000dda:	8013      	strh	r3, [r2, #0]
}
 8000ddc:	bf00      	nop
 8000dde:	370c      	adds	r7, #12
 8000de0:	46bd      	mov	sp, r7
 8000de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de6:	4770      	bx	lr
 8000de8:	600ffffe 	.word	0x600ffffe

08000dec <LCD_WR_DATA>:

void LCD_WR_DATA(uint16_t data)
{
 8000dec:	b480      	push	{r7}
 8000dee:	b083      	sub	sp, #12
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	4603      	mov	r3, r0
 8000df4:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_RAM=data;
 8000df6:	4a04      	ldr	r2, [pc, #16]	@ (8000e08 <LCD_WR_DATA+0x1c>)
 8000df8:	88fb      	ldrh	r3, [r7, #6]
 8000dfa:	8053      	strh	r3, [r2, #2]
}
 8000dfc:	bf00      	nop
 8000dfe:	370c      	adds	r7, #12
 8000e00:	46bd      	mov	sp, r7
 8000e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e06:	4770      	bx	lr
 8000e08:	600ffffe 	.word	0x600ffffe

08000e0c <LCD_RD_DATA>:

uint16_t LCD_RD_DATA(void)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	b083      	sub	sp, #12
 8000e10:	af00      	add	r7, sp, #0
	__IO uint16_t ram;
	ram=LCD->LCD_RAM;
 8000e12:	4b06      	ldr	r3, [pc, #24]	@ (8000e2c <LCD_RD_DATA+0x20>)
 8000e14:	885b      	ldrh	r3, [r3, #2]
 8000e16:	b29b      	uxth	r3, r3
 8000e18:	80fb      	strh	r3, [r7, #6]
	return ram;
 8000e1a:	88fb      	ldrh	r3, [r7, #6]
 8000e1c:	b29b      	uxth	r3, r3
}
 8000e1e:	4618      	mov	r0, r3
 8000e20:	370c      	adds	r7, #12
 8000e22:	46bd      	mov	sp, r7
 8000e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e28:	4770      	bx	lr
 8000e2a:	bf00      	nop
 8000e2c:	600ffffe 	.word	0x600ffffe

08000e30 <lcd_AddressSet>:


void lcd_AddressSet(uint16_t x1,uint16_t y1,uint16_t x2,uint16_t y2)
{
 8000e30:	b590      	push	{r4, r7, lr}
 8000e32:	b083      	sub	sp, #12
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	4604      	mov	r4, r0
 8000e38:	4608      	mov	r0, r1
 8000e3a:	4611      	mov	r1, r2
 8000e3c:	461a      	mov	r2, r3
 8000e3e:	4623      	mov	r3, r4
 8000e40:	80fb      	strh	r3, [r7, #6]
 8000e42:	4603      	mov	r3, r0
 8000e44:	80bb      	strh	r3, [r7, #4]
 8000e46:	460b      	mov	r3, r1
 8000e48:	807b      	strh	r3, [r7, #2]
 8000e4a:	4613      	mov	r3, r2
 8000e4c:	803b      	strh	r3, [r7, #0]
		LCD_WR_REG(0x2a);
 8000e4e:	202a      	movs	r0, #42	@ 0x2a
 8000e50:	f7ff ffbc 	bl	8000dcc <LCD_WR_REG>
		LCD_WR_DATA(x1>>8);
 8000e54:	88fb      	ldrh	r3, [r7, #6]
 8000e56:	0a1b      	lsrs	r3, r3, #8
 8000e58:	b29b      	uxth	r3, r3
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	f7ff ffc6 	bl	8000dec <LCD_WR_DATA>
		LCD_WR_DATA(x1&0xff);
 8000e60:	88fb      	ldrh	r3, [r7, #6]
 8000e62:	b2db      	uxtb	r3, r3
 8000e64:	b29b      	uxth	r3, r3
 8000e66:	4618      	mov	r0, r3
 8000e68:	f7ff ffc0 	bl	8000dec <LCD_WR_DATA>
		LCD_WR_DATA(x2>>8);
 8000e6c:	887b      	ldrh	r3, [r7, #2]
 8000e6e:	0a1b      	lsrs	r3, r3, #8
 8000e70:	b29b      	uxth	r3, r3
 8000e72:	4618      	mov	r0, r3
 8000e74:	f7ff ffba 	bl	8000dec <LCD_WR_DATA>
		LCD_WR_DATA(x2&0xff);
 8000e78:	887b      	ldrh	r3, [r7, #2]
 8000e7a:	b2db      	uxtb	r3, r3
 8000e7c:	b29b      	uxth	r3, r3
 8000e7e:	4618      	mov	r0, r3
 8000e80:	f7ff ffb4 	bl	8000dec <LCD_WR_DATA>
		LCD_WR_REG(0x2b);
 8000e84:	202b      	movs	r0, #43	@ 0x2b
 8000e86:	f7ff ffa1 	bl	8000dcc <LCD_WR_REG>
		LCD_WR_DATA(y1>>8);
 8000e8a:	88bb      	ldrh	r3, [r7, #4]
 8000e8c:	0a1b      	lsrs	r3, r3, #8
 8000e8e:	b29b      	uxth	r3, r3
 8000e90:	4618      	mov	r0, r3
 8000e92:	f7ff ffab 	bl	8000dec <LCD_WR_DATA>
		LCD_WR_DATA(y1&0xff);
 8000e96:	88bb      	ldrh	r3, [r7, #4]
 8000e98:	b2db      	uxtb	r3, r3
 8000e9a:	b29b      	uxth	r3, r3
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	f7ff ffa5 	bl	8000dec <LCD_WR_DATA>
		LCD_WR_DATA(y2>>8);
 8000ea2:	883b      	ldrh	r3, [r7, #0]
 8000ea4:	0a1b      	lsrs	r3, r3, #8
 8000ea6:	b29b      	uxth	r3, r3
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	f7ff ff9f 	bl	8000dec <LCD_WR_DATA>
		LCD_WR_DATA(y2&0xff);
 8000eae:	883b      	ldrh	r3, [r7, #0]
 8000eb0:	b2db      	uxtb	r3, r3
 8000eb2:	b29b      	uxth	r3, r3
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	f7ff ff99 	bl	8000dec <LCD_WR_DATA>
		LCD_WR_REG(0x2c);
 8000eba:	202c      	movs	r0, #44	@ 0x2c
 8000ebc:	f7ff ff86 	bl	8000dcc <LCD_WR_REG>
}
 8000ec0:	bf00      	nop
 8000ec2:	370c      	adds	r7, #12
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	bd90      	pop	{r4, r7, pc}

08000ec8 <lcd_Clear>:
  * @brief  Fill all pixels with a color
  * @param  color Color to fill the screen
  * @retval None
  */
void lcd_Clear(uint16_t color) //
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b084      	sub	sp, #16
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	4603      	mov	r3, r0
 8000ed0:	80fb      	strh	r3, [r7, #6]
	uint16_t i,j;
	lcd_AddressSet(0,0,lcddev.width-1,lcddev.height-1);
 8000ed2:	4b15      	ldr	r3, [pc, #84]	@ (8000f28 <lcd_Clear+0x60>)
 8000ed4:	881b      	ldrh	r3, [r3, #0]
 8000ed6:	3b01      	subs	r3, #1
 8000ed8:	b29a      	uxth	r2, r3
 8000eda:	4b13      	ldr	r3, [pc, #76]	@ (8000f28 <lcd_Clear+0x60>)
 8000edc:	885b      	ldrh	r3, [r3, #2]
 8000ede:	3b01      	subs	r3, #1
 8000ee0:	b29b      	uxth	r3, r3
 8000ee2:	2100      	movs	r1, #0
 8000ee4:	2000      	movs	r0, #0
 8000ee6:	f7ff ffa3 	bl	8000e30 <lcd_AddressSet>
	for(i=0;i<lcddev.width;i++)
 8000eea:	2300      	movs	r3, #0
 8000eec:	81fb      	strh	r3, [r7, #14]
 8000eee:	e011      	b.n	8000f14 <lcd_Clear+0x4c>
	{
		for(j=0;j<lcddev.height;j++)
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	81bb      	strh	r3, [r7, #12]
 8000ef4:	e006      	b.n	8000f04 <lcd_Clear+0x3c>
		{
			LCD_WR_DATA(color);
 8000ef6:	88fb      	ldrh	r3, [r7, #6]
 8000ef8:	4618      	mov	r0, r3
 8000efa:	f7ff ff77 	bl	8000dec <LCD_WR_DATA>
		for(j=0;j<lcddev.height;j++)
 8000efe:	89bb      	ldrh	r3, [r7, #12]
 8000f00:	3301      	adds	r3, #1
 8000f02:	81bb      	strh	r3, [r7, #12]
 8000f04:	4b08      	ldr	r3, [pc, #32]	@ (8000f28 <lcd_Clear+0x60>)
 8000f06:	885b      	ldrh	r3, [r3, #2]
 8000f08:	89ba      	ldrh	r2, [r7, #12]
 8000f0a:	429a      	cmp	r2, r3
 8000f0c:	d3f3      	bcc.n	8000ef6 <lcd_Clear+0x2e>
	for(i=0;i<lcddev.width;i++)
 8000f0e:	89fb      	ldrh	r3, [r7, #14]
 8000f10:	3301      	adds	r3, #1
 8000f12:	81fb      	strh	r3, [r7, #14]
 8000f14:	4b04      	ldr	r3, [pc, #16]	@ (8000f28 <lcd_Clear+0x60>)
 8000f16:	881b      	ldrh	r3, [r3, #0]
 8000f18:	89fa      	ldrh	r2, [r7, #14]
 8000f1a:	429a      	cmp	r2, r3
 8000f1c:	d3e8      	bcc.n	8000ef0 <lcd_Clear+0x28>
		}
	}
}
 8000f1e:	bf00      	nop
 8000f20:	bf00      	nop
 8000f22:	3710      	adds	r7, #16
 8000f24:	46bd      	mov	sp, r7
 8000f26:	bd80      	pop	{r7, pc}
 8000f28:	200001f4 	.word	0x200001f4

08000f2c <lcd_DrawPoint>:
  * @param  y Y coordinate
  * @param  color Color to fill
  * @retval None
  */
void lcd_DrawPoint(uint16_t x,uint16_t y,uint16_t color) // 1 ddieemr anhr
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b082      	sub	sp, #8
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	4603      	mov	r3, r0
 8000f34:	80fb      	strh	r3, [r7, #6]
 8000f36:	460b      	mov	r3, r1
 8000f38:	80bb      	strh	r3, [r7, #4]
 8000f3a:	4613      	mov	r3, r2
 8000f3c:	807b      	strh	r3, [r7, #2]
	lcd_AddressSet(x,y,x,y);//ÉèÖÃ¹â±êÎ»ÖÃ
 8000f3e:	88bb      	ldrh	r3, [r7, #4]
 8000f40:	88fa      	ldrh	r2, [r7, #6]
 8000f42:	88b9      	ldrh	r1, [r7, #4]
 8000f44:	88f8      	ldrh	r0, [r7, #6]
 8000f46:	f7ff ff73 	bl	8000e30 <lcd_AddressSet>
	LCD_WR_DATA(color);
 8000f4a:	887b      	ldrh	r3, [r7, #2]
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	f7ff ff4d 	bl	8000dec <LCD_WR_DATA>
}
 8000f52:	bf00      	nop
 8000f54:	3708      	adds	r7, #8
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bd80      	pop	{r7, pc}
	...

08000f5c <lcd_ShowChar>:
	lcd_DrawLine(x1,y2,x2,y2,color);
	lcd_DrawLine(x2,y1,x2,y2,color);
}

void lcd_ShowChar(uint16_t x,uint16_t y,uint8_t character,uint16_t fc,uint16_t bc,uint8_t sizey,uint8_t mode) // 1ky tu size = 12 16 24 32, fc: mau chuw, bc, mauf neefn, mode: hien neen
{
 8000f5c:	b590      	push	{r4, r7, lr}
 8000f5e:	b087      	sub	sp, #28
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	4604      	mov	r4, r0
 8000f64:	4608      	mov	r0, r1
 8000f66:	4611      	mov	r1, r2
 8000f68:	461a      	mov	r2, r3
 8000f6a:	4623      	mov	r3, r4
 8000f6c:	80fb      	strh	r3, [r7, #6]
 8000f6e:	4603      	mov	r3, r0
 8000f70:	80bb      	strh	r3, [r7, #4]
 8000f72:	460b      	mov	r3, r1
 8000f74:	70fb      	strb	r3, [r7, #3]
 8000f76:	4613      	mov	r3, r2
 8000f78:	803b      	strh	r3, [r7, #0]
	uint8_t temp,sizex,t,m=0;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	757b      	strb	r3, [r7, #21]
	uint16_t i,TypefaceNum;
	uint16_t x0=x;
 8000f7e:	88fb      	ldrh	r3, [r7, #6]
 8000f80:	823b      	strh	r3, [r7, #16]
	sizex=sizey/2;
 8000f82:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8000f86:	085b      	lsrs	r3, r3, #1
 8000f88:	73fb      	strb	r3, [r7, #15]
	TypefaceNum=(sizex/8+((sizex%8)?1:0))*sizey;
 8000f8a:	7bfb      	ldrb	r3, [r7, #15]
 8000f8c:	08db      	lsrs	r3, r3, #3
 8000f8e:	b2db      	uxtb	r3, r3
 8000f90:	461a      	mov	r2, r3
 8000f92:	7bfb      	ldrb	r3, [r7, #15]
 8000f94:	f003 0307 	and.w	r3, r3, #7
 8000f98:	b2db      	uxtb	r3, r3
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	bf14      	ite	ne
 8000f9e:	2301      	movne	r3, #1
 8000fa0:	2300      	moveq	r3, #0
 8000fa2:	b2db      	uxtb	r3, r3
 8000fa4:	4413      	add	r3, r2
 8000fa6:	b29a      	uxth	r2, r3
 8000fa8:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8000fac:	b29b      	uxth	r3, r3
 8000fae:	fb12 f303 	smulbb	r3, r2, r3
 8000fb2:	81bb      	strh	r3, [r7, #12]
	character=character-' ';
 8000fb4:	78fb      	ldrb	r3, [r7, #3]
 8000fb6:	3b20      	subs	r3, #32
 8000fb8:	70fb      	strb	r3, [r7, #3]
	lcd_AddressSet(x,y,x+sizex-1,y+sizey-1);
 8000fba:	7bfb      	ldrb	r3, [r7, #15]
 8000fbc:	b29a      	uxth	r2, r3
 8000fbe:	88fb      	ldrh	r3, [r7, #6]
 8000fc0:	4413      	add	r3, r2
 8000fc2:	b29b      	uxth	r3, r3
 8000fc4:	3b01      	subs	r3, #1
 8000fc6:	b29c      	uxth	r4, r3
 8000fc8:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8000fcc:	b29a      	uxth	r2, r3
 8000fce:	88bb      	ldrh	r3, [r7, #4]
 8000fd0:	4413      	add	r3, r2
 8000fd2:	b29b      	uxth	r3, r3
 8000fd4:	3b01      	subs	r3, #1
 8000fd6:	b29b      	uxth	r3, r3
 8000fd8:	88b9      	ldrh	r1, [r7, #4]
 8000fda:	88f8      	ldrh	r0, [r7, #6]
 8000fdc:	4622      	mov	r2, r4
 8000fde:	f7ff ff27 	bl	8000e30 <lcd_AddressSet>
	for(i=0;i<TypefaceNum;i++)
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	827b      	strh	r3, [r7, #18]
 8000fe6:	e07a      	b.n	80010de <lcd_ShowChar+0x182>
	{
		if(sizey==12);
 8000fe8:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8000fec:	2b0c      	cmp	r3, #12
 8000fee:	d028      	beq.n	8001042 <lcd_ShowChar+0xe6>
		else if(sizey==16)temp=ascii_1608[character][i];
 8000ff0:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8000ff4:	2b10      	cmp	r3, #16
 8000ff6:	d108      	bne.n	800100a <lcd_ShowChar+0xae>
 8000ff8:	78fa      	ldrb	r2, [r7, #3]
 8000ffa:	8a7b      	ldrh	r3, [r7, #18]
 8000ffc:	493c      	ldr	r1, [pc, #240]	@ (80010f0 <lcd_ShowChar+0x194>)
 8000ffe:	0112      	lsls	r2, r2, #4
 8001000:	440a      	add	r2, r1
 8001002:	4413      	add	r3, r2
 8001004:	781b      	ldrb	r3, [r3, #0]
 8001006:	75fb      	strb	r3, [r7, #23]
 8001008:	e01b      	b.n	8001042 <lcd_ShowChar+0xe6>
		else if(sizey==24)temp=ascii_2412[character][i];
 800100a:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800100e:	2b18      	cmp	r3, #24
 8001010:	d10b      	bne.n	800102a <lcd_ShowChar+0xce>
 8001012:	78fa      	ldrb	r2, [r7, #3]
 8001014:	8a79      	ldrh	r1, [r7, #18]
 8001016:	4837      	ldr	r0, [pc, #220]	@ (80010f4 <lcd_ShowChar+0x198>)
 8001018:	4613      	mov	r3, r2
 800101a:	005b      	lsls	r3, r3, #1
 800101c:	4413      	add	r3, r2
 800101e:	011b      	lsls	r3, r3, #4
 8001020:	4403      	add	r3, r0
 8001022:	440b      	add	r3, r1
 8001024:	781b      	ldrb	r3, [r3, #0]
 8001026:	75fb      	strb	r3, [r7, #23]
 8001028:	e00b      	b.n	8001042 <lcd_ShowChar+0xe6>
		else if(sizey==32)temp=ascii_3216[character][i];
 800102a:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800102e:	2b20      	cmp	r3, #32
 8001030:	d15a      	bne.n	80010e8 <lcd_ShowChar+0x18c>
 8001032:	78fa      	ldrb	r2, [r7, #3]
 8001034:	8a7b      	ldrh	r3, [r7, #18]
 8001036:	4930      	ldr	r1, [pc, #192]	@ (80010f8 <lcd_ShowChar+0x19c>)
 8001038:	0192      	lsls	r2, r2, #6
 800103a:	440a      	add	r2, r1
 800103c:	4413      	add	r3, r2
 800103e:	781b      	ldrb	r3, [r3, #0]
 8001040:	75fb      	strb	r3, [r7, #23]
		else return;
		for(t=0;t<8;t++)
 8001042:	2300      	movs	r3, #0
 8001044:	75bb      	strb	r3, [r7, #22]
 8001046:	e044      	b.n	80010d2 <lcd_ShowChar+0x176>
		{
			if(!mode)
 8001048:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 800104c:	2b00      	cmp	r3, #0
 800104e:	d120      	bne.n	8001092 <lcd_ShowChar+0x136>
			{
				if(temp&(0x01<<t))LCD_WR_DATA(fc);
 8001050:	7dfa      	ldrb	r2, [r7, #23]
 8001052:	7dbb      	ldrb	r3, [r7, #22]
 8001054:	fa42 f303 	asr.w	r3, r2, r3
 8001058:	f003 0301 	and.w	r3, r3, #1
 800105c:	2b00      	cmp	r3, #0
 800105e:	d004      	beq.n	800106a <lcd_ShowChar+0x10e>
 8001060:	883b      	ldrh	r3, [r7, #0]
 8001062:	4618      	mov	r0, r3
 8001064:	f7ff fec2 	bl	8000dec <LCD_WR_DATA>
 8001068:	e003      	b.n	8001072 <lcd_ShowChar+0x116>
				else LCD_WR_DATA(bc);
 800106a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800106c:	4618      	mov	r0, r3
 800106e:	f7ff febd 	bl	8000dec <LCD_WR_DATA>
				m++;
 8001072:	7d7b      	ldrb	r3, [r7, #21]
 8001074:	3301      	adds	r3, #1
 8001076:	757b      	strb	r3, [r7, #21]
				if(m%sizex==0)
 8001078:	7d7b      	ldrb	r3, [r7, #21]
 800107a:	7bfa      	ldrb	r2, [r7, #15]
 800107c:	fbb3 f1f2 	udiv	r1, r3, r2
 8001080:	fb01 f202 	mul.w	r2, r1, r2
 8001084:	1a9b      	subs	r3, r3, r2
 8001086:	b2db      	uxtb	r3, r3
 8001088:	2b00      	cmp	r3, #0
 800108a:	d11f      	bne.n	80010cc <lcd_ShowChar+0x170>
				{
					m=0;
 800108c:	2300      	movs	r3, #0
 800108e:	757b      	strb	r3, [r7, #21]
					break;
 8001090:	e022      	b.n	80010d8 <lcd_ShowChar+0x17c>
				}
			}
			else
			{
				if(temp&(0x01<<t))lcd_DrawPoint(x,y,fc);
 8001092:	7dfa      	ldrb	r2, [r7, #23]
 8001094:	7dbb      	ldrb	r3, [r7, #22]
 8001096:	fa42 f303 	asr.w	r3, r2, r3
 800109a:	f003 0301 	and.w	r3, r3, #1
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d005      	beq.n	80010ae <lcd_ShowChar+0x152>
 80010a2:	883a      	ldrh	r2, [r7, #0]
 80010a4:	88b9      	ldrh	r1, [r7, #4]
 80010a6:	88fb      	ldrh	r3, [r7, #6]
 80010a8:	4618      	mov	r0, r3
 80010aa:	f7ff ff3f 	bl	8000f2c <lcd_DrawPoint>
				x++;
 80010ae:	88fb      	ldrh	r3, [r7, #6]
 80010b0:	3301      	adds	r3, #1
 80010b2:	80fb      	strh	r3, [r7, #6]
				if((x-x0)==sizex)
 80010b4:	88fa      	ldrh	r2, [r7, #6]
 80010b6:	8a3b      	ldrh	r3, [r7, #16]
 80010b8:	1ad2      	subs	r2, r2, r3
 80010ba:	7bfb      	ldrb	r3, [r7, #15]
 80010bc:	429a      	cmp	r2, r3
 80010be:	d105      	bne.n	80010cc <lcd_ShowChar+0x170>
				{
					x=x0;
 80010c0:	8a3b      	ldrh	r3, [r7, #16]
 80010c2:	80fb      	strh	r3, [r7, #6]
					y++;
 80010c4:	88bb      	ldrh	r3, [r7, #4]
 80010c6:	3301      	adds	r3, #1
 80010c8:	80bb      	strh	r3, [r7, #4]
					break;
 80010ca:	e005      	b.n	80010d8 <lcd_ShowChar+0x17c>
		for(t=0;t<8;t++)
 80010cc:	7dbb      	ldrb	r3, [r7, #22]
 80010ce:	3301      	adds	r3, #1
 80010d0:	75bb      	strb	r3, [r7, #22]
 80010d2:	7dbb      	ldrb	r3, [r7, #22]
 80010d4:	2b07      	cmp	r3, #7
 80010d6:	d9b7      	bls.n	8001048 <lcd_ShowChar+0xec>
	for(i=0;i<TypefaceNum;i++)
 80010d8:	8a7b      	ldrh	r3, [r7, #18]
 80010da:	3301      	adds	r3, #1
 80010dc:	827b      	strh	r3, [r7, #18]
 80010de:	8a7a      	ldrh	r2, [r7, #18]
 80010e0:	89bb      	ldrh	r3, [r7, #12]
 80010e2:	429a      	cmp	r2, r3
 80010e4:	d380      	bcc.n	8000fe8 <lcd_ShowChar+0x8c>
 80010e6:	e000      	b.n	80010ea <lcd_ShowChar+0x18e>
		else return;
 80010e8:	bf00      	nop
				}
			}
		}
	}
}
 80010ea:	371c      	adds	r7, #28
 80010ec:	46bd      	mov	sp, r7
 80010ee:	bd90      	pop	{r4, r7, pc}
 80010f0:	08007e58 	.word	0x08007e58
 80010f4:	08008448 	.word	0x08008448
 80010f8:	08009618 	.word	0x08009618

080010fc <mypow>:

uint32_t mypow(uint8_t m,uint8_t n)
{
 80010fc:	b480      	push	{r7}
 80010fe:	b085      	sub	sp, #20
 8001100:	af00      	add	r7, sp, #0
 8001102:	4603      	mov	r3, r0
 8001104:	460a      	mov	r2, r1
 8001106:	71fb      	strb	r3, [r7, #7]
 8001108:	4613      	mov	r3, r2
 800110a:	71bb      	strb	r3, [r7, #6]
	uint32_t result=1;
 800110c:	2301      	movs	r3, #1
 800110e:	60fb      	str	r3, [r7, #12]
	while(n--)result*=m;
 8001110:	e004      	b.n	800111c <mypow+0x20>
 8001112:	79fa      	ldrb	r2, [r7, #7]
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	fb02 f303 	mul.w	r3, r2, r3
 800111a:	60fb      	str	r3, [r7, #12]
 800111c:	79bb      	ldrb	r3, [r7, #6]
 800111e:	1e5a      	subs	r2, r3, #1
 8001120:	71ba      	strb	r2, [r7, #6]
 8001122:	2b00      	cmp	r3, #0
 8001124:	d1f5      	bne.n	8001112 <mypow+0x16>
	return result;
 8001126:	68fb      	ldr	r3, [r7, #12]
}
 8001128:	4618      	mov	r0, r3
 800112a:	3714      	adds	r7, #20
 800112c:	46bd      	mov	sp, r7
 800112e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001132:	4770      	bx	lr

08001134 <lcd_ShowFloatNum>:
	}
}


void lcd_ShowFloatNum(uint16_t x,uint16_t y,float num,uint8_t len,uint16_t fc,uint16_t bc,uint8_t sizey)
{
 8001134:	b590      	push	{r4, r7, lr}
 8001136:	b08b      	sub	sp, #44	@ 0x2c
 8001138:	af04      	add	r7, sp, #16
 800113a:	4604      	mov	r4, r0
 800113c:	4608      	mov	r0, r1
 800113e:	ed87 0a02 	vstr	s0, [r7, #8]
 8001142:	4611      	mov	r1, r2
 8001144:	461a      	mov	r2, r3
 8001146:	4623      	mov	r3, r4
 8001148:	81fb      	strh	r3, [r7, #14]
 800114a:	4603      	mov	r3, r0
 800114c:	81bb      	strh	r3, [r7, #12]
 800114e:	460b      	mov	r3, r1
 8001150:	71fb      	strb	r3, [r7, #7]
 8001152:	4613      	mov	r3, r2
 8001154:	80bb      	strh	r3, [r7, #4]
	uint8_t t,temp,sizex;
	uint16_t num1;
	sizex=sizey/2;
 8001156:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800115a:	085b      	lsrs	r3, r3, #1
 800115c:	75bb      	strb	r3, [r7, #22]
	num1=num*100;
 800115e:	edd7 7a02 	vldr	s15, [r7, #8]
 8001162:	ed9f 7a36 	vldr	s14, [pc, #216]	@ 800123c <lcd_ShowFloatNum+0x108>
 8001166:	ee67 7a87 	vmul.f32	s15, s15, s14
 800116a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800116e:	ee17 3a90 	vmov	r3, s15
 8001172:	82bb      	strh	r3, [r7, #20]
	for(t=0;t<len;t++)
 8001174:	2300      	movs	r3, #0
 8001176:	75fb      	strb	r3, [r7, #23]
 8001178:	e057      	b.n	800122a <lcd_ShowFloatNum+0xf6>
	{
		temp=(num1/mypow(10,len-t-1))%10;
 800117a:	8abc      	ldrh	r4, [r7, #20]
 800117c:	79fa      	ldrb	r2, [r7, #7]
 800117e:	7dfb      	ldrb	r3, [r7, #23]
 8001180:	1ad3      	subs	r3, r2, r3
 8001182:	b2db      	uxtb	r3, r3
 8001184:	3b01      	subs	r3, #1
 8001186:	b2db      	uxtb	r3, r3
 8001188:	4619      	mov	r1, r3
 800118a:	200a      	movs	r0, #10
 800118c:	f7ff ffb6 	bl	80010fc <mypow>
 8001190:	4603      	mov	r3, r0
 8001192:	fbb4 f1f3 	udiv	r1, r4, r3
 8001196:	4b2a      	ldr	r3, [pc, #168]	@ (8001240 <lcd_ShowFloatNum+0x10c>)
 8001198:	fba3 2301 	umull	r2, r3, r3, r1
 800119c:	08da      	lsrs	r2, r3, #3
 800119e:	4613      	mov	r3, r2
 80011a0:	009b      	lsls	r3, r3, #2
 80011a2:	4413      	add	r3, r2
 80011a4:	005b      	lsls	r3, r3, #1
 80011a6:	1aca      	subs	r2, r1, r3
 80011a8:	4613      	mov	r3, r2
 80011aa:	74fb      	strb	r3, [r7, #19]
		if(t==(len-2))
 80011ac:	7dfa      	ldrb	r2, [r7, #23]
 80011ae:	79fb      	ldrb	r3, [r7, #7]
 80011b0:	3b02      	subs	r3, #2
 80011b2:	429a      	cmp	r2, r3
 80011b4:	d11d      	bne.n	80011f2 <lcd_ShowFloatNum+0xbe>
		{
			lcd_ShowChar(x+(len-2)*sizex,y,'.',fc,bc,sizey,0);
 80011b6:	79fb      	ldrb	r3, [r7, #7]
 80011b8:	3b02      	subs	r3, #2
 80011ba:	b29a      	uxth	r2, r3
 80011bc:	7dbb      	ldrb	r3, [r7, #22]
 80011be:	b29b      	uxth	r3, r3
 80011c0:	fb12 f303 	smulbb	r3, r2, r3
 80011c4:	b29a      	uxth	r2, r3
 80011c6:	89fb      	ldrh	r3, [r7, #14]
 80011c8:	4413      	add	r3, r2
 80011ca:	b298      	uxth	r0, r3
 80011cc:	88ba      	ldrh	r2, [r7, #4]
 80011ce:	89b9      	ldrh	r1, [r7, #12]
 80011d0:	2300      	movs	r3, #0
 80011d2:	9302      	str	r3, [sp, #8]
 80011d4:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80011d8:	9301      	str	r3, [sp, #4]
 80011da:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80011dc:	9300      	str	r3, [sp, #0]
 80011de:	4613      	mov	r3, r2
 80011e0:	222e      	movs	r2, #46	@ 0x2e
 80011e2:	f7ff febb 	bl	8000f5c <lcd_ShowChar>
			t++;
 80011e6:	7dfb      	ldrb	r3, [r7, #23]
 80011e8:	3301      	adds	r3, #1
 80011ea:	75fb      	strb	r3, [r7, #23]
			len+=1;
 80011ec:	79fb      	ldrb	r3, [r7, #7]
 80011ee:	3301      	adds	r3, #1
 80011f0:	71fb      	strb	r3, [r7, #7]
		}
	 	lcd_ShowChar(x+t*sizex,y,temp+48,fc,bc,sizey,0);
 80011f2:	7dfb      	ldrb	r3, [r7, #23]
 80011f4:	b29a      	uxth	r2, r3
 80011f6:	7dbb      	ldrb	r3, [r7, #22]
 80011f8:	b29b      	uxth	r3, r3
 80011fa:	fb12 f303 	smulbb	r3, r2, r3
 80011fe:	b29a      	uxth	r2, r3
 8001200:	89fb      	ldrh	r3, [r7, #14]
 8001202:	4413      	add	r3, r2
 8001204:	b298      	uxth	r0, r3
 8001206:	7cfb      	ldrb	r3, [r7, #19]
 8001208:	3330      	adds	r3, #48	@ 0x30
 800120a:	b2da      	uxtb	r2, r3
 800120c:	88bc      	ldrh	r4, [r7, #4]
 800120e:	89b9      	ldrh	r1, [r7, #12]
 8001210:	2300      	movs	r3, #0
 8001212:	9302      	str	r3, [sp, #8]
 8001214:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001218:	9301      	str	r3, [sp, #4]
 800121a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800121c:	9300      	str	r3, [sp, #0]
 800121e:	4623      	mov	r3, r4
 8001220:	f7ff fe9c 	bl	8000f5c <lcd_ShowChar>
	for(t=0;t<len;t++)
 8001224:	7dfb      	ldrb	r3, [r7, #23]
 8001226:	3301      	adds	r3, #1
 8001228:	75fb      	strb	r3, [r7, #23]
 800122a:	7dfa      	ldrb	r2, [r7, #23]
 800122c:	79fb      	ldrb	r3, [r7, #7]
 800122e:	429a      	cmp	r2, r3
 8001230:	d3a3      	bcc.n	800117a <lcd_ShowFloatNum+0x46>
	}
}
 8001232:	bf00      	nop
 8001234:	bf00      	nop
 8001236:	371c      	adds	r7, #28
 8001238:	46bd      	mov	sp, r7
 800123a:	bd90      	pop	{r4, r7, pc}
 800123c:	42c80000 	.word	0x42c80000
 8001240:	cccccccd 	.word	0xcccccccd

08001244 <lcd_SetDir>:
	}
}


void lcd_SetDir(uint8_t dir) //chinh huong man hinh
{
 8001244:	b480      	push	{r7}
 8001246:	b083      	sub	sp, #12
 8001248:	af00      	add	r7, sp, #0
 800124a:	4603      	mov	r3, r0
 800124c:	71fb      	strb	r3, [r7, #7]
	if((dir>>4)%4)
 800124e:	79fb      	ldrb	r3, [r7, #7]
 8001250:	091b      	lsrs	r3, r3, #4
 8001252:	b2db      	uxtb	r3, r3
 8001254:	f003 0303 	and.w	r3, r3, #3
 8001258:	b2db      	uxtb	r3, r3
 800125a:	2b00      	cmp	r3, #0
 800125c:	d007      	beq.n	800126e <lcd_SetDir+0x2a>
	{
		lcddev.width=320;
 800125e:	4b0a      	ldr	r3, [pc, #40]	@ (8001288 <lcd_SetDir+0x44>)
 8001260:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8001264:	801a      	strh	r2, [r3, #0]
		lcddev.height=240;
 8001266:	4b08      	ldr	r3, [pc, #32]	@ (8001288 <lcd_SetDir+0x44>)
 8001268:	22f0      	movs	r2, #240	@ 0xf0
 800126a:	805a      	strh	r2, [r3, #2]
	}else
	{
		lcddev.width=240;
		lcddev.height=320;
	}
}
 800126c:	e006      	b.n	800127c <lcd_SetDir+0x38>
		lcddev.width=240;
 800126e:	4b06      	ldr	r3, [pc, #24]	@ (8001288 <lcd_SetDir+0x44>)
 8001270:	22f0      	movs	r2, #240	@ 0xf0
 8001272:	801a      	strh	r2, [r3, #0]
		lcddev.height=320;
 8001274:	4b04      	ldr	r3, [pc, #16]	@ (8001288 <lcd_SetDir+0x44>)
 8001276:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 800127a:	805a      	strh	r2, [r3, #2]
}
 800127c:	bf00      	nop
 800127e:	370c      	adds	r7, #12
 8001280:	46bd      	mov	sp, r7
 8001282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001286:	4770      	bx	lr
 8001288:	200001f4 	.word	0x200001f4

0800128c <lcd_init>:


void lcd_init(void)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_RESET);
 8001290:	2200      	movs	r2, #0
 8001292:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001296:	48aa      	ldr	r0, [pc, #680]	@ (8001540 <lcd_init+0x2b4>)
 8001298:	f002 fc1e 	bl	8003ad8 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 800129c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80012a0:	f001 f934 	bl	800250c <HAL_Delay>
	HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_SET);
 80012a4:	2201      	movs	r2, #1
 80012a6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80012aa:	48a5      	ldr	r0, [pc, #660]	@ (8001540 <lcd_init+0x2b4>)
 80012ac:	f002 fc14 	bl	8003ad8 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 80012b0:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80012b4:	f001 f92a 	bl	800250c <HAL_Delay>
	lcd_SetDir(DFT_SCAN_DIR);
 80012b8:	2000      	movs	r0, #0
 80012ba:	f7ff ffc3 	bl	8001244 <lcd_SetDir>
	LCD_WR_REG(0XD3);
 80012be:	20d3      	movs	r0, #211	@ 0xd3
 80012c0:	f7ff fd84 	bl	8000dcc <LCD_WR_REG>
	lcddev.id=LCD_RD_DATA();	//dummy read
 80012c4:	f7ff fda2 	bl	8000e0c <LCD_RD_DATA>
 80012c8:	4603      	mov	r3, r0
 80012ca:	461a      	mov	r2, r3
 80012cc:	4b9d      	ldr	r3, [pc, #628]	@ (8001544 <lcd_init+0x2b8>)
 80012ce:	809a      	strh	r2, [r3, #4]
	lcddev.id=LCD_RD_DATA();
 80012d0:	f7ff fd9c 	bl	8000e0c <LCD_RD_DATA>
 80012d4:	4603      	mov	r3, r0
 80012d6:	461a      	mov	r2, r3
 80012d8:	4b9a      	ldr	r3, [pc, #616]	@ (8001544 <lcd_init+0x2b8>)
 80012da:	809a      	strh	r2, [r3, #4]
	lcddev.id=LCD_RD_DATA();
 80012dc:	f7ff fd96 	bl	8000e0c <LCD_RD_DATA>
 80012e0:	4603      	mov	r3, r0
 80012e2:	461a      	mov	r2, r3
 80012e4:	4b97      	ldr	r3, [pc, #604]	@ (8001544 <lcd_init+0x2b8>)
 80012e6:	809a      	strh	r2, [r3, #4]
	lcddev.id<<=8;
 80012e8:	4b96      	ldr	r3, [pc, #600]	@ (8001544 <lcd_init+0x2b8>)
 80012ea:	889b      	ldrh	r3, [r3, #4]
 80012ec:	021b      	lsls	r3, r3, #8
 80012ee:	b29a      	uxth	r2, r3
 80012f0:	4b94      	ldr	r3, [pc, #592]	@ (8001544 <lcd_init+0x2b8>)
 80012f2:	809a      	strh	r2, [r3, #4]
	lcddev.id|=LCD_RD_DATA();
 80012f4:	f7ff fd8a 	bl	8000e0c <LCD_RD_DATA>
 80012f8:	4603      	mov	r3, r0
 80012fa:	461a      	mov	r2, r3
 80012fc:	4b91      	ldr	r3, [pc, #580]	@ (8001544 <lcd_init+0x2b8>)
 80012fe:	889b      	ldrh	r3, [r3, #4]
 8001300:	4313      	orrs	r3, r2
 8001302:	b29a      	uxth	r2, r3
 8001304:	4b8f      	ldr	r3, [pc, #572]	@ (8001544 <lcd_init+0x2b8>)
 8001306:	809a      	strh	r2, [r3, #4]

	LCD_WR_REG(0xCF);
 8001308:	20cf      	movs	r0, #207	@ 0xcf
 800130a:	f7ff fd5f 	bl	8000dcc <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 800130e:	2000      	movs	r0, #0
 8001310:	f7ff fd6c 	bl	8000dec <LCD_WR_DATA>
	LCD_WR_DATA(0xC1);
 8001314:	20c1      	movs	r0, #193	@ 0xc1
 8001316:	f7ff fd69 	bl	8000dec <LCD_WR_DATA>
	LCD_WR_DATA(0X30);
 800131a:	2030      	movs	r0, #48	@ 0x30
 800131c:	f7ff fd66 	bl	8000dec <LCD_WR_DATA>
	LCD_WR_REG(0xED);
 8001320:	20ed      	movs	r0, #237	@ 0xed
 8001322:	f7ff fd53 	bl	8000dcc <LCD_WR_REG>
	LCD_WR_DATA(0x64);
 8001326:	2064      	movs	r0, #100	@ 0x64
 8001328:	f7ff fd60 	bl	8000dec <LCD_WR_DATA>
	LCD_WR_DATA(0x03);
 800132c:	2003      	movs	r0, #3
 800132e:	f7ff fd5d 	bl	8000dec <LCD_WR_DATA>
	LCD_WR_DATA(0X12);
 8001332:	2012      	movs	r0, #18
 8001334:	f7ff fd5a 	bl	8000dec <LCD_WR_DATA>
	LCD_WR_DATA(0X81);
 8001338:	2081      	movs	r0, #129	@ 0x81
 800133a:	f7ff fd57 	bl	8000dec <LCD_WR_DATA>
	LCD_WR_REG(0xE8);
 800133e:	20e8      	movs	r0, #232	@ 0xe8
 8001340:	f7ff fd44 	bl	8000dcc <LCD_WR_REG>
	LCD_WR_DATA(0x85);
 8001344:	2085      	movs	r0, #133	@ 0x85
 8001346:	f7ff fd51 	bl	8000dec <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 800134a:	2010      	movs	r0, #16
 800134c:	f7ff fd4e 	bl	8000dec <LCD_WR_DATA>
	LCD_WR_DATA(0x7A);
 8001350:	207a      	movs	r0, #122	@ 0x7a
 8001352:	f7ff fd4b 	bl	8000dec <LCD_WR_DATA>
	LCD_WR_REG(0xCB);
 8001356:	20cb      	movs	r0, #203	@ 0xcb
 8001358:	f7ff fd38 	bl	8000dcc <LCD_WR_REG>
	LCD_WR_DATA(0x39);
 800135c:	2039      	movs	r0, #57	@ 0x39
 800135e:	f7ff fd45 	bl	8000dec <LCD_WR_DATA>
	LCD_WR_DATA(0x2C);
 8001362:	202c      	movs	r0, #44	@ 0x2c
 8001364:	f7ff fd42 	bl	8000dec <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001368:	2000      	movs	r0, #0
 800136a:	f7ff fd3f 	bl	8000dec <LCD_WR_DATA>
	LCD_WR_DATA(0x34);
 800136e:	2034      	movs	r0, #52	@ 0x34
 8001370:	f7ff fd3c 	bl	8000dec <LCD_WR_DATA>
	LCD_WR_DATA(0x02);
 8001374:	2002      	movs	r0, #2
 8001376:	f7ff fd39 	bl	8000dec <LCD_WR_DATA>
	LCD_WR_REG(0xF7);
 800137a:	20f7      	movs	r0, #247	@ 0xf7
 800137c:	f7ff fd26 	bl	8000dcc <LCD_WR_REG>
	LCD_WR_DATA(0x20);
 8001380:	2020      	movs	r0, #32
 8001382:	f7ff fd33 	bl	8000dec <LCD_WR_DATA>
	LCD_WR_REG(0xEA);
 8001386:	20ea      	movs	r0, #234	@ 0xea
 8001388:	f7ff fd20 	bl	8000dcc <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 800138c:	2000      	movs	r0, #0
 800138e:	f7ff fd2d 	bl	8000dec <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001392:	2000      	movs	r0, #0
 8001394:	f7ff fd2a 	bl	8000dec <LCD_WR_DATA>
	LCD_WR_REG(0xC0);    //Power control
 8001398:	20c0      	movs	r0, #192	@ 0xc0
 800139a:	f7ff fd17 	bl	8000dcc <LCD_WR_REG>
	LCD_WR_DATA(0x1B);   //VRH[5:0]
 800139e:	201b      	movs	r0, #27
 80013a0:	f7ff fd24 	bl	8000dec <LCD_WR_DATA>
	LCD_WR_REG(0xC1);    //Power control
 80013a4:	20c1      	movs	r0, #193	@ 0xc1
 80013a6:	f7ff fd11 	bl	8000dcc <LCD_WR_REG>
	LCD_WR_DATA(0x01);   //SAP[2:0];BT[3:0]
 80013aa:	2001      	movs	r0, #1
 80013ac:	f7ff fd1e 	bl	8000dec <LCD_WR_DATA>
	LCD_WR_REG(0xC5);    //VCM control
 80013b0:	20c5      	movs	r0, #197	@ 0xc5
 80013b2:	f7ff fd0b 	bl	8000dcc <LCD_WR_REG>
	LCD_WR_DATA(0x30); 	 //3F
 80013b6:	2030      	movs	r0, #48	@ 0x30
 80013b8:	f7ff fd18 	bl	8000dec <LCD_WR_DATA>
	LCD_WR_DATA(0x30); 	 //3C
 80013bc:	2030      	movs	r0, #48	@ 0x30
 80013be:	f7ff fd15 	bl	8000dec <LCD_WR_DATA>
	LCD_WR_REG(0xC7);    //VCM control2
 80013c2:	20c7      	movs	r0, #199	@ 0xc7
 80013c4:	f7ff fd02 	bl	8000dcc <LCD_WR_REG>
	LCD_WR_DATA(0XB7);
 80013c8:	20b7      	movs	r0, #183	@ 0xb7
 80013ca:	f7ff fd0f 	bl	8000dec <LCD_WR_DATA>
	LCD_WR_REG(0x36);    // Memory Access Control
 80013ce:	2036      	movs	r0, #54	@ 0x36
 80013d0:	f7ff fcfc 	bl	8000dcc <LCD_WR_REG>

	LCD_WR_DATA(0x08|DFT_SCAN_DIR);
 80013d4:	2008      	movs	r0, #8
 80013d6:	f7ff fd09 	bl	8000dec <LCD_WR_DATA>
	LCD_WR_REG(0x3A);
 80013da:	203a      	movs	r0, #58	@ 0x3a
 80013dc:	f7ff fcf6 	bl	8000dcc <LCD_WR_REG>
	LCD_WR_DATA(0x55);
 80013e0:	2055      	movs	r0, #85	@ 0x55
 80013e2:	f7ff fd03 	bl	8000dec <LCD_WR_DATA>
	LCD_WR_REG(0xB1);
 80013e6:	20b1      	movs	r0, #177	@ 0xb1
 80013e8:	f7ff fcf0 	bl	8000dcc <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 80013ec:	2000      	movs	r0, #0
 80013ee:	f7ff fcfd 	bl	8000dec <LCD_WR_DATA>
	LCD_WR_DATA(0x1A);
 80013f2:	201a      	movs	r0, #26
 80013f4:	f7ff fcfa 	bl	8000dec <LCD_WR_DATA>
	LCD_WR_REG(0xB6);    // Display Function Control
 80013f8:	20b6      	movs	r0, #182	@ 0xb6
 80013fa:	f7ff fce7 	bl	8000dcc <LCD_WR_REG>
	LCD_WR_DATA(0x0A);
 80013fe:	200a      	movs	r0, #10
 8001400:	f7ff fcf4 	bl	8000dec <LCD_WR_DATA>
	LCD_WR_DATA(0xA2);
 8001404:	20a2      	movs	r0, #162	@ 0xa2
 8001406:	f7ff fcf1 	bl	8000dec <LCD_WR_DATA>
	LCD_WR_REG(0xF2);    // 3Gamma Function Disable
 800140a:	20f2      	movs	r0, #242	@ 0xf2
 800140c:	f7ff fcde 	bl	8000dcc <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001410:	2000      	movs	r0, #0
 8001412:	f7ff fceb 	bl	8000dec <LCD_WR_DATA>
	LCD_WR_REG(0x26);    //Gamma curve selected
 8001416:	2026      	movs	r0, #38	@ 0x26
 8001418:	f7ff fcd8 	bl	8000dcc <LCD_WR_REG>
	LCD_WR_DATA(0x01);
 800141c:	2001      	movs	r0, #1
 800141e:	f7ff fce5 	bl	8000dec <LCD_WR_DATA>
	LCD_WR_REG(0xE0);    //Set Gamma
 8001422:	20e0      	movs	r0, #224	@ 0xe0
 8001424:	f7ff fcd2 	bl	8000dcc <LCD_WR_REG>
	LCD_WR_DATA(0x0F);
 8001428:	200f      	movs	r0, #15
 800142a:	f7ff fcdf 	bl	8000dec <LCD_WR_DATA>
	LCD_WR_DATA(0x2A);
 800142e:	202a      	movs	r0, #42	@ 0x2a
 8001430:	f7ff fcdc 	bl	8000dec <LCD_WR_DATA>
	LCD_WR_DATA(0x28);
 8001434:	2028      	movs	r0, #40	@ 0x28
 8001436:	f7ff fcd9 	bl	8000dec <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 800143a:	2008      	movs	r0, #8
 800143c:	f7ff fcd6 	bl	8000dec <LCD_WR_DATA>
	LCD_WR_DATA(0x0E);
 8001440:	200e      	movs	r0, #14
 8001442:	f7ff fcd3 	bl	8000dec <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 8001446:	2008      	movs	r0, #8
 8001448:	f7ff fcd0 	bl	8000dec <LCD_WR_DATA>
	LCD_WR_DATA(0x54);
 800144c:	2054      	movs	r0, #84	@ 0x54
 800144e:	f7ff fccd 	bl	8000dec <LCD_WR_DATA>
	LCD_WR_DATA(0XA9);
 8001452:	20a9      	movs	r0, #169	@ 0xa9
 8001454:	f7ff fcca 	bl	8000dec <LCD_WR_DATA>
	LCD_WR_DATA(0x43);
 8001458:	2043      	movs	r0, #67	@ 0x43
 800145a:	f7ff fcc7 	bl	8000dec <LCD_WR_DATA>
	LCD_WR_DATA(0x0A);
 800145e:	200a      	movs	r0, #10
 8001460:	f7ff fcc4 	bl	8000dec <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 8001464:	200f      	movs	r0, #15
 8001466:	f7ff fcc1 	bl	8000dec <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 800146a:	2000      	movs	r0, #0
 800146c:	f7ff fcbe 	bl	8000dec <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001470:	2000      	movs	r0, #0
 8001472:	f7ff fcbb 	bl	8000dec <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001476:	2000      	movs	r0, #0
 8001478:	f7ff fcb8 	bl	8000dec <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 800147c:	2000      	movs	r0, #0
 800147e:	f7ff fcb5 	bl	8000dec <LCD_WR_DATA>
	LCD_WR_REG(0XE1);    //Set Gamma
 8001482:	20e1      	movs	r0, #225	@ 0xe1
 8001484:	f7ff fca2 	bl	8000dcc <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001488:	2000      	movs	r0, #0
 800148a:	f7ff fcaf 	bl	8000dec <LCD_WR_DATA>
	LCD_WR_DATA(0x15);
 800148e:	2015      	movs	r0, #21
 8001490:	f7ff fcac 	bl	8000dec <LCD_WR_DATA>
	LCD_WR_DATA(0x17);
 8001494:	2017      	movs	r0, #23
 8001496:	f7ff fca9 	bl	8000dec <LCD_WR_DATA>
	LCD_WR_DATA(0x07);
 800149a:	2007      	movs	r0, #7
 800149c:	f7ff fca6 	bl	8000dec <LCD_WR_DATA>
	LCD_WR_DATA(0x11);
 80014a0:	2011      	movs	r0, #17
 80014a2:	f7ff fca3 	bl	8000dec <LCD_WR_DATA>
	LCD_WR_DATA(0x06);
 80014a6:	2006      	movs	r0, #6
 80014a8:	f7ff fca0 	bl	8000dec <LCD_WR_DATA>
	LCD_WR_DATA(0x2B);
 80014ac:	202b      	movs	r0, #43	@ 0x2b
 80014ae:	f7ff fc9d 	bl	8000dec <LCD_WR_DATA>
	LCD_WR_DATA(0x56);
 80014b2:	2056      	movs	r0, #86	@ 0x56
 80014b4:	f7ff fc9a 	bl	8000dec <LCD_WR_DATA>
	LCD_WR_DATA(0x3C);
 80014b8:	203c      	movs	r0, #60	@ 0x3c
 80014ba:	f7ff fc97 	bl	8000dec <LCD_WR_DATA>
	LCD_WR_DATA(0x05);
 80014be:	2005      	movs	r0, #5
 80014c0:	f7ff fc94 	bl	8000dec <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 80014c4:	2010      	movs	r0, #16
 80014c6:	f7ff fc91 	bl	8000dec <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 80014ca:	200f      	movs	r0, #15
 80014cc:	f7ff fc8e 	bl	8000dec <LCD_WR_DATA>
	LCD_WR_DATA(0x3F);
 80014d0:	203f      	movs	r0, #63	@ 0x3f
 80014d2:	f7ff fc8b 	bl	8000dec <LCD_WR_DATA>
	LCD_WR_DATA(0x3F);
 80014d6:	203f      	movs	r0, #63	@ 0x3f
 80014d8:	f7ff fc88 	bl	8000dec <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 80014dc:	200f      	movs	r0, #15
 80014de:	f7ff fc85 	bl	8000dec <LCD_WR_DATA>
	LCD_WR_REG(0x2B);
 80014e2:	202b      	movs	r0, #43	@ 0x2b
 80014e4:	f7ff fc72 	bl	8000dcc <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 80014e8:	2000      	movs	r0, #0
 80014ea:	f7ff fc7f 	bl	8000dec <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80014ee:	2000      	movs	r0, #0
 80014f0:	f7ff fc7c 	bl	8000dec <LCD_WR_DATA>
	LCD_WR_DATA(0x01);
 80014f4:	2001      	movs	r0, #1
 80014f6:	f7ff fc79 	bl	8000dec <LCD_WR_DATA>
	LCD_WR_DATA(0x3f);
 80014fa:	203f      	movs	r0, #63	@ 0x3f
 80014fc:	f7ff fc76 	bl	8000dec <LCD_WR_DATA>
	LCD_WR_REG(0x2A);
 8001500:	202a      	movs	r0, #42	@ 0x2a
 8001502:	f7ff fc63 	bl	8000dcc <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001506:	2000      	movs	r0, #0
 8001508:	f7ff fc70 	bl	8000dec <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 800150c:	2000      	movs	r0, #0
 800150e:	f7ff fc6d 	bl	8000dec <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001512:	2000      	movs	r0, #0
 8001514:	f7ff fc6a 	bl	8000dec <LCD_WR_DATA>
	LCD_WR_DATA(0xef);
 8001518:	20ef      	movs	r0, #239	@ 0xef
 800151a:	f7ff fc67 	bl	8000dec <LCD_WR_DATA>
	LCD_WR_REG(0x11); //Exit Sleep
 800151e:	2011      	movs	r0, #17
 8001520:	f7ff fc54 	bl	8000dcc <LCD_WR_REG>
	HAL_Delay(120);
 8001524:	2078      	movs	r0, #120	@ 0x78
 8001526:	f000 fff1 	bl	800250c <HAL_Delay>
	LCD_WR_REG(0x29); //display on
 800152a:	2029      	movs	r0, #41	@ 0x29
 800152c:	f7ff fc4e 	bl	8000dcc <LCD_WR_REG>
	HAL_GPIO_WritePin(FSMC_BLK_GPIO_Port, FSMC_BLK_Pin, 1);
 8001530:	2201      	movs	r2, #1
 8001532:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001536:	4804      	ldr	r0, [pc, #16]	@ (8001548 <lcd_init+0x2bc>)
 8001538:	f002 face 	bl	8003ad8 <HAL_GPIO_WritePin>
}
 800153c:	bf00      	nop
 800153e:	bd80      	pop	{r7, pc}
 8001540:	40020800 	.word	0x40020800
 8001544:	200001f4 	.word	0x200001f4
 8001548:	40020000 	.word	0x40020000

0800154c <lcd_ShowStr>:
		}
	}
}

void lcd_ShowStr(uint16_t x, uint16_t y,char *str,uint16_t fc, uint16_t bc,uint8_t sizey,uint8_t mode)
{
 800154c:	b590      	push	{r4, r7, lr}
 800154e:	b08b      	sub	sp, #44	@ 0x2c
 8001550:	af04      	add	r7, sp, #16
 8001552:	60ba      	str	r2, [r7, #8]
 8001554:	461a      	mov	r2, r3
 8001556:	4603      	mov	r3, r0
 8001558:	81fb      	strh	r3, [r7, #14]
 800155a:	460b      	mov	r3, r1
 800155c:	81bb      	strh	r3, [r7, #12]
 800155e:	4613      	mov	r3, r2
 8001560:	80fb      	strh	r3, [r7, #6]
	uint16_t x0=x;
 8001562:	89fb      	ldrh	r3, [r7, #14]
 8001564:	82bb      	strh	r3, [r7, #20]
    uint8_t bHz=0;
 8001566:	2300      	movs	r3, #0
 8001568:	75fb      	strb	r3, [r7, #23]
	while(*str!=0)
 800156a:	e048      	b.n	80015fe <lcd_ShowStr+0xb2>
	{
		if(!bHz)
 800156c:	7dfb      	ldrb	r3, [r7, #23]
 800156e:	2b00      	cmp	r3, #0
 8001570:	d145      	bne.n	80015fe <lcd_ShowStr+0xb2>
		{
			if(x>(lcddev.width-sizey/2)||y>(lcddev.height-sizey)) return;
 8001572:	89fa      	ldrh	r2, [r7, #14]
 8001574:	4b26      	ldr	r3, [pc, #152]	@ (8001610 <lcd_ShowStr+0xc4>)
 8001576:	881b      	ldrh	r3, [r3, #0]
 8001578:	4619      	mov	r1, r3
 800157a:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800157e:	085b      	lsrs	r3, r3, #1
 8001580:	b2db      	uxtb	r3, r3
 8001582:	1acb      	subs	r3, r1, r3
 8001584:	429a      	cmp	r2, r3
 8001586:	dc3f      	bgt.n	8001608 <lcd_ShowStr+0xbc>
 8001588:	89ba      	ldrh	r2, [r7, #12]
 800158a:	4b21      	ldr	r3, [pc, #132]	@ (8001610 <lcd_ShowStr+0xc4>)
 800158c:	885b      	ldrh	r3, [r3, #2]
 800158e:	4619      	mov	r1, r3
 8001590:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001594:	1acb      	subs	r3, r1, r3
 8001596:	429a      	cmp	r2, r3
 8001598:	dc36      	bgt.n	8001608 <lcd_ShowStr+0xbc>
			if(*str>0x80)bHz=1;
 800159a:	68bb      	ldr	r3, [r7, #8]
 800159c:	781b      	ldrb	r3, [r3, #0]
 800159e:	2b80      	cmp	r3, #128	@ 0x80
 80015a0:	d902      	bls.n	80015a8 <lcd_ShowStr+0x5c>
 80015a2:	2301      	movs	r3, #1
 80015a4:	75fb      	strb	r3, [r7, #23]
 80015a6:	e02a      	b.n	80015fe <lcd_ShowStr+0xb2>
			else
			{
				if(*str==0x0D)
 80015a8:	68bb      	ldr	r3, [r7, #8]
 80015aa:	781b      	ldrb	r3, [r3, #0]
 80015ac:	2b0d      	cmp	r3, #13
 80015ae:	d10b      	bne.n	80015c8 <lcd_ShowStr+0x7c>
				{
					y+=sizey;
 80015b0:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80015b4:	b29a      	uxth	r2, r3
 80015b6:	89bb      	ldrh	r3, [r7, #12]
 80015b8:	4413      	add	r3, r2
 80015ba:	81bb      	strh	r3, [r7, #12]
					x=x0;
 80015bc:	8abb      	ldrh	r3, [r7, #20]
 80015be:	81fb      	strh	r3, [r7, #14]
					str++;
 80015c0:	68bb      	ldr	r3, [r7, #8]
 80015c2:	3301      	adds	r3, #1
 80015c4:	60bb      	str	r3, [r7, #8]
 80015c6:	e017      	b.n	80015f8 <lcd_ShowStr+0xac>
				}else
				{
					lcd_ShowChar(x,y,*str,fc,bc,sizey,mode);
 80015c8:	68bb      	ldr	r3, [r7, #8]
 80015ca:	781a      	ldrb	r2, [r3, #0]
 80015cc:	88fc      	ldrh	r4, [r7, #6]
 80015ce:	89b9      	ldrh	r1, [r7, #12]
 80015d0:	89f8      	ldrh	r0, [r7, #14]
 80015d2:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 80015d6:	9302      	str	r3, [sp, #8]
 80015d8:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80015dc:	9301      	str	r3, [sp, #4]
 80015de:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80015e0:	9300      	str	r3, [sp, #0]
 80015e2:	4623      	mov	r3, r4
 80015e4:	f7ff fcba 	bl	8000f5c <lcd_ShowChar>
					x+=sizey/2;
 80015e8:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80015ec:	085b      	lsrs	r3, r3, #1
 80015ee:	b2db      	uxtb	r3, r3
 80015f0:	461a      	mov	r2, r3
 80015f2:	89fb      	ldrh	r3, [r7, #14]
 80015f4:	4413      	add	r3, r2
 80015f6:	81fb      	strh	r3, [r7, #14]
				}
			  str++;
 80015f8:	68bb      	ldr	r3, [r7, #8]
 80015fa:	3301      	adds	r3, #1
 80015fc:	60bb      	str	r3, [r7, #8]
	while(*str!=0)
 80015fe:	68bb      	ldr	r3, [r7, #8]
 8001600:	781b      	ldrb	r3, [r3, #0]
 8001602:	2b00      	cmp	r3, #0
 8001604:	d1b2      	bne.n	800156c <lcd_ShowStr+0x20>
 8001606:	e000      	b.n	800160a <lcd_ShowStr+0xbe>
			if(x>(lcddev.width-sizey/2)||y>(lcddev.height-sizey)) return;
 8001608:	bf00      	nop
			}
		}
	}
}
 800160a:	371c      	adds	r7, #28
 800160c:	46bd      	mov	sp, r7
 800160e:	bd90      	pop	{r4, r7, pc}
 8001610:	200001f4 	.word	0x200001f4

08001614 <led7_Scan>:

void led7_init(){
	  HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 1);
}

void led7_Scan(){
 8001614:	b580      	push	{r7, lr}
 8001616:	af00      	add	r7, sp, #0
	spi_buffer &= 0x00ff;
 8001618:	4b3f      	ldr	r3, [pc, #252]	@ (8001718 <led7_Scan+0x104>)
 800161a:	881b      	ldrh	r3, [r3, #0]
 800161c:	b2db      	uxtb	r3, r3
 800161e:	b29a      	uxth	r2, r3
 8001620:	4b3d      	ldr	r3, [pc, #244]	@ (8001718 <led7_Scan+0x104>)
 8001622:	801a      	strh	r2, [r3, #0]
	spi_buffer |= led7seg[led7_index] << 8;
 8001624:	4b3d      	ldr	r3, [pc, #244]	@ (800171c <led7_Scan+0x108>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	4a3d      	ldr	r2, [pc, #244]	@ (8001720 <led7_Scan+0x10c>)
 800162a:	5cd3      	ldrb	r3, [r2, r3]
 800162c:	021b      	lsls	r3, r3, #8
 800162e:	b21a      	sxth	r2, r3
 8001630:	4b39      	ldr	r3, [pc, #228]	@ (8001718 <led7_Scan+0x104>)
 8001632:	881b      	ldrh	r3, [r3, #0]
 8001634:	b21b      	sxth	r3, r3
 8001636:	4313      	orrs	r3, r2
 8001638:	b21b      	sxth	r3, r3
 800163a:	b29a      	uxth	r2, r3
 800163c:	4b36      	ldr	r3, [pc, #216]	@ (8001718 <led7_Scan+0x104>)
 800163e:	801a      	strh	r2, [r3, #0]
	switch(led7_index){
 8001640:	4b36      	ldr	r3, [pc, #216]	@ (800171c <led7_Scan+0x108>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	2b03      	cmp	r3, #3
 8001646:	d847      	bhi.n	80016d8 <led7_Scan+0xc4>
 8001648:	a201      	add	r2, pc, #4	@ (adr r2, 8001650 <led7_Scan+0x3c>)
 800164a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800164e:	bf00      	nop
 8001650:	08001661 	.word	0x08001661
 8001654:	0800167f 	.word	0x0800167f
 8001658:	0800169d 	.word	0x0800169d
 800165c:	080016bb 	.word	0x080016bb
	case 0:
		spi_buffer |= 0x00b0;
 8001660:	4b2d      	ldr	r3, [pc, #180]	@ (8001718 <led7_Scan+0x104>)
 8001662:	881b      	ldrh	r3, [r3, #0]
 8001664:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8001668:	b29a      	uxth	r2, r3
 800166a:	4b2b      	ldr	r3, [pc, #172]	@ (8001718 <led7_Scan+0x104>)
 800166c:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffbf;//1011
 800166e:	4b2a      	ldr	r3, [pc, #168]	@ (8001718 <led7_Scan+0x104>)
 8001670:	881b      	ldrh	r3, [r3, #0]
 8001672:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8001676:	b29a      	uxth	r2, r3
 8001678:	4b27      	ldr	r3, [pc, #156]	@ (8001718 <led7_Scan+0x104>)
 800167a:	801a      	strh	r2, [r3, #0]
		break;
 800167c:	e02d      	b.n	80016da <led7_Scan+0xc6>
	case 1:
		spi_buffer |= 0x00d0;
 800167e:	4b26      	ldr	r3, [pc, #152]	@ (8001718 <led7_Scan+0x104>)
 8001680:	881b      	ldrh	r3, [r3, #0]
 8001682:	f043 03d0 	orr.w	r3, r3, #208	@ 0xd0
 8001686:	b29a      	uxth	r2, r3
 8001688:	4b23      	ldr	r3, [pc, #140]	@ (8001718 <led7_Scan+0x104>)
 800168a:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffdf;//1101
 800168c:	4b22      	ldr	r3, [pc, #136]	@ (8001718 <led7_Scan+0x104>)
 800168e:	881b      	ldrh	r3, [r3, #0]
 8001690:	f023 0320 	bic.w	r3, r3, #32
 8001694:	b29a      	uxth	r2, r3
 8001696:	4b20      	ldr	r3, [pc, #128]	@ (8001718 <led7_Scan+0x104>)
 8001698:	801a      	strh	r2, [r3, #0]
		break;
 800169a:	e01e      	b.n	80016da <led7_Scan+0xc6>
	case 2:
		spi_buffer |= 0x00e0;
 800169c:	4b1e      	ldr	r3, [pc, #120]	@ (8001718 <led7_Scan+0x104>)
 800169e:	881b      	ldrh	r3, [r3, #0]
 80016a0:	f043 03e0 	orr.w	r3, r3, #224	@ 0xe0
 80016a4:	b29a      	uxth	r2, r3
 80016a6:	4b1c      	ldr	r3, [pc, #112]	@ (8001718 <led7_Scan+0x104>)
 80016a8:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffef;//1110
 80016aa:	4b1b      	ldr	r3, [pc, #108]	@ (8001718 <led7_Scan+0x104>)
 80016ac:	881b      	ldrh	r3, [r3, #0]
 80016ae:	f023 0310 	bic.w	r3, r3, #16
 80016b2:	b29a      	uxth	r2, r3
 80016b4:	4b18      	ldr	r3, [pc, #96]	@ (8001718 <led7_Scan+0x104>)
 80016b6:	801a      	strh	r2, [r3, #0]
		break;
 80016b8:	e00f      	b.n	80016da <led7_Scan+0xc6>
	case 3:
		spi_buffer |= 0x0070;
 80016ba:	4b17      	ldr	r3, [pc, #92]	@ (8001718 <led7_Scan+0x104>)
 80016bc:	881b      	ldrh	r3, [r3, #0]
 80016be:	f043 0370 	orr.w	r3, r3, #112	@ 0x70
 80016c2:	b29a      	uxth	r2, r3
 80016c4:	4b14      	ldr	r3, [pc, #80]	@ (8001718 <led7_Scan+0x104>)
 80016c6:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xff7f;//0111
 80016c8:	4b13      	ldr	r3, [pc, #76]	@ (8001718 <led7_Scan+0x104>)
 80016ca:	881b      	ldrh	r3, [r3, #0]
 80016cc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80016d0:	b29a      	uxth	r2, r3
 80016d2:	4b11      	ldr	r3, [pc, #68]	@ (8001718 <led7_Scan+0x104>)
 80016d4:	801a      	strh	r2, [r3, #0]
		break;
 80016d6:	e000      	b.n	80016da <led7_Scan+0xc6>
	default:
		break;
 80016d8:	bf00      	nop
	}
	led7_index = (led7_index + 1)%4;
 80016da:	4b10      	ldr	r3, [pc, #64]	@ (800171c <led7_Scan+0x108>)
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	3301      	adds	r3, #1
 80016e0:	425a      	negs	r2, r3
 80016e2:	f003 0303 	and.w	r3, r3, #3
 80016e6:	f002 0203 	and.w	r2, r2, #3
 80016ea:	bf58      	it	pl
 80016ec:	4253      	negpl	r3, r2
 80016ee:	4a0b      	ldr	r2, [pc, #44]	@ (800171c <led7_Scan+0x108>)
 80016f0:	6013      	str	r3, [r2, #0]
	HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 0);
 80016f2:	2200      	movs	r2, #0
 80016f4:	2140      	movs	r1, #64	@ 0x40
 80016f6:	480b      	ldr	r0, [pc, #44]	@ (8001724 <led7_Scan+0x110>)
 80016f8:	f002 f9ee 	bl	8003ad8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (void*)&spi_buffer, 2, 1);
 80016fc:	2301      	movs	r3, #1
 80016fe:	2202      	movs	r2, #2
 8001700:	4905      	ldr	r1, [pc, #20]	@ (8001718 <led7_Scan+0x104>)
 8001702:	4809      	ldr	r0, [pc, #36]	@ (8001728 <led7_Scan+0x114>)
 8001704:	f003 f881 	bl	800480a <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 1);
 8001708:	2201      	movs	r2, #1
 800170a:	2140      	movs	r1, #64	@ 0x40
 800170c:	4805      	ldr	r0, [pc, #20]	@ (8001724 <led7_Scan+0x110>)
 800170e:	f002 f9e3 	bl	8003ad8 <HAL_GPIO_WritePin>
}
 8001712:	bf00      	nop
 8001714:	bd80      	pop	{r7, pc}
 8001716:	bf00      	nop
 8001718:	20000004 	.word	0x20000004
 800171c:	200001fc 	.word	0x200001fc
 8001720:	20000000 	.word	0x20000000
 8001724:	40021800 	.word	0x40021800
 8001728:	20000214 	.word	0x20000214

0800172c <lightProcess>:
 */
#include "light_control.h"

uint8_t light_status = 0;

void lightProcess(){
 800172c:	b580      	push	{r7, lr}
 800172e:	b084      	sub	sp, #16
 8001730:	af02      	add	r7, sp, #8
	sensor_Read();
 8001732:	f000 f95f 	bl	80019f4 <sensor_Read>
	if(button_count[13] == 1){
 8001736:	4b25      	ldr	r3, [pc, #148]	@ (80017cc <lightProcess+0xa0>)
 8001738:	8b5b      	ldrh	r3, [r3, #26]
 800173a:	2b01      	cmp	r3, #1
 800173c:	d113      	bne.n	8001766 <lightProcess+0x3a>
		light_status = 1 - light_status;
 800173e:	4b24      	ldr	r3, [pc, #144]	@ (80017d0 <lightProcess+0xa4>)
 8001740:	781b      	ldrb	r3, [r3, #0]
 8001742:	f1c3 0301 	rsb	r3, r3, #1
 8001746:	b2da      	uxtb	r2, r3
 8001748:	4b21      	ldr	r3, [pc, #132]	@ (80017d0 <lightProcess+0xa4>)
 800174a:	701a      	strb	r2, [r3, #0]
		if(light_status == 1){
 800174c:	4b20      	ldr	r3, [pc, #128]	@ (80017d0 <lightProcess+0xa4>)
 800174e:	781b      	ldrb	r3, [r3, #0]
 8001750:	2b01      	cmp	r3, #1
 8001752:	d104      	bne.n	800175e <lightProcess+0x32>
			uart_EspSendBytes("A", 1);
 8001754:	2101      	movs	r1, #1
 8001756:	481f      	ldr	r0, [pc, #124]	@ (80017d4 <lightProcess+0xa8>)
 8001758:	f000 fc9e 	bl	8002098 <uart_EspSendBytes>
 800175c:	e003      	b.n	8001766 <lightProcess+0x3a>
		} else {
			uart_EspSendBytes("a", 1);
 800175e:	2101      	movs	r1, #1
 8001760:	481d      	ldr	r0, [pc, #116]	@ (80017d8 <lightProcess+0xac>)
 8001762:	f000 fc99 	bl	8002098 <uart_EspSendBytes>
		}
	}
	if(light_status == 1){
 8001766:	4b1a      	ldr	r3, [pc, #104]	@ (80017d0 <lightProcess+0xa4>)
 8001768:	781b      	ldrb	r3, [r3, #0]
 800176a:	2b01      	cmp	r3, #1
 800176c:	d105      	bne.n	800177a <lightProcess+0x4e>
		HAL_GPIO_WritePin(OUTPUT_Y0_GPIO_Port, OUTPUT_Y0_Pin, 1);
 800176e:	2201      	movs	r2, #1
 8001770:	2120      	movs	r1, #32
 8001772:	481a      	ldr	r0, [pc, #104]	@ (80017dc <lightProcess+0xb0>)
 8001774:	f002 f9b0 	bl	8003ad8 <HAL_GPIO_WritePin>
 8001778:	e004      	b.n	8001784 <lightProcess+0x58>
	} else {
		HAL_GPIO_WritePin(OUTPUT_Y0_GPIO_Port, OUTPUT_Y0_Pin, 0);
 800177a:	2200      	movs	r2, #0
 800177c:	2120      	movs	r1, #32
 800177e:	4817      	ldr	r0, [pc, #92]	@ (80017dc <lightProcess+0xb0>)
 8001780:	f002 f9aa 	bl	8003ad8 <HAL_GPIO_WritePin>
	}
	float temp = sensor_GetTemperature();
 8001784:	f000 f944 	bl	8001a10 <sensor_GetTemperature>
 8001788:	ed87 0a01 	vstr	s0, [r7, #4]
	lcd_ShowFloatNum(10, 100, temp,4, GREEN, BLACK, 16);
 800178c:	2310      	movs	r3, #16
 800178e:	9301      	str	r3, [sp, #4]
 8001790:	2300      	movs	r3, #0
 8001792:	9300      	str	r3, [sp, #0]
 8001794:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8001798:	2204      	movs	r2, #4
 800179a:	ed97 0a01 	vldr	s0, [r7, #4]
 800179e:	2164      	movs	r1, #100	@ 0x64
 80017a0:	200a      	movs	r0, #10
 80017a2:	f7ff fcc7 	bl	8001134 <lcd_ShowFloatNum>
	uint32_t temp_val = temp*100;
 80017a6:	edd7 7a01 	vldr	s15, [r7, #4]
 80017aa:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 80017e0 <lightProcess+0xb4>
 80017ae:	ee67 7a87 	vmul.f32	s15, s15, s14
 80017b2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80017b6:	ee17 3a90 	vmov	r3, s15
 80017ba:	603b      	str	r3, [r7, #0]
	uart_EspSendNumersPercent(temp_val);
 80017bc:	6838      	ldr	r0, [r7, #0]
 80017be:	f000 fc97 	bl	80020f0 <uart_EspSendNumersPercent>
}
 80017c2:	bf00      	nop
 80017c4:	3708      	adds	r7, #8
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bd80      	pop	{r7, pc}
 80017ca:	bf00      	nop
 80017cc:	20000128 	.word	0x20000128
 80017d0:	20000200 	.word	0x20000200
 80017d4:	08007e1c 	.word	0x08007e1c
 80017d8:	08007e20 	.word	0x08007e20
 80017dc:	40021000 	.word	0x40021000
 80017e0:	42c80000 	.word	0x42c80000

080017e4 <test_Esp>:

void test_Esp(){
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b084      	sub	sp, #16
 80017e8:	af04      	add	r7, sp, #16
	if(uart_EspCheck() == 0) uart_EspSendBytes("o", 1);
 80017ea:	f000 fd03 	bl	80021f4 <uart_EspCheck>
 80017ee:	4603      	mov	r3, r0
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d104      	bne.n	80017fe <test_Esp+0x1a>
 80017f4:	2101      	movs	r1, #1
 80017f6:	480a      	ldr	r0, [pc, #40]	@ (8001820 <test_Esp+0x3c>)
 80017f8:	f000 fc4e 	bl	8002098 <uart_EspSendBytes>
	else lcd_ShowStr(10, 50, "ESP Connect", GREEN, BLACK, 24, 0);
}
 80017fc:	e00c      	b.n	8001818 <test_Esp+0x34>
	else lcd_ShowStr(10, 50, "ESP Connect", GREEN, BLACK, 24, 0);
 80017fe:	2300      	movs	r3, #0
 8001800:	9302      	str	r3, [sp, #8]
 8001802:	2318      	movs	r3, #24
 8001804:	9301      	str	r3, [sp, #4]
 8001806:	2300      	movs	r3, #0
 8001808:	9300      	str	r3, [sp, #0]
 800180a:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 800180e:	4a05      	ldr	r2, [pc, #20]	@ (8001824 <test_Esp+0x40>)
 8001810:	2132      	movs	r1, #50	@ 0x32
 8001812:	200a      	movs	r0, #10
 8001814:	f7ff fe9a 	bl	800154c <lcd_ShowStr>
}
 8001818:	bf00      	nop
 800181a:	46bd      	mov	sp, r7
 800181c:	bd80      	pop	{r7, pc}
 800181e:	bf00      	nop
 8001820:	08007e24 	.word	0x08007e24
 8001824:	08007e28 	.word	0x08007e28

08001828 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b084      	sub	sp, #16
 800182c:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800182e:	f000 fdfb 	bl	8002428 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001832:	f000 f83b 	bl	80018ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001836:	f7ff f919 	bl	8000a6c <MX_GPIO_Init>
  MX_TIM2_Init();
 800183a:	f000 faf1 	bl	8001e20 <MX_TIM2_Init>
  MX_SPI1_Init();
 800183e:	f000 f959 	bl	8001af4 <MX_SPI1_Init>
  MX_FSMC_Init();
 8001842:	f7ff f843 	bl	80008cc <MX_FSMC_Init>
  MX_I2C1_Init();
 8001846:	f7ff fa4b 	bl	8000ce0 <MX_I2C1_Init>
  MX_TIM13_Init();
 800184a:	f000 fb35 	bl	8001eb8 <MX_TIM13_Init>
  MX_DMA_Init();
 800184e:	f7ff f81d 	bl	800088c <MX_DMA_Init>
  MX_ADC1_Init();
 8001852:	f7fe fe85 	bl	8000560 <MX_ADC1_Init>
  MX_TIM1_Init();
 8001856:	f000 fa93 	bl	8001d80 <MX_TIM1_Init>
  MX_USART2_UART_Init();
 800185a:	f000 fd05 	bl	8002268 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 800185e:	f000 fcd9 	bl	8002214 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  system_init();
 8001862:	f000 f88d 	bl	8001980 <system_init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
 lcd_Clear(BLACK);
 8001866:	2000      	movs	r0, #0
 8001868:	f7ff fb2e 	bl	8000ec8 <lcd_Clear>
 lcd_ShowStr(10, 50, "ESP DEMO", BLUE, BLACK, 24, 0);
 800186c:	2300      	movs	r3, #0
 800186e:	9302      	str	r3, [sp, #8]
 8001870:	2318      	movs	r3, #24
 8001872:	9301      	str	r3, [sp, #4]
 8001874:	2300      	movs	r3, #0
 8001876:	9300      	str	r3, [sp, #0]
 8001878:	231f      	movs	r3, #31
 800187a:	4a0a      	ldr	r2, [pc, #40]	@ (80018a4 <main+0x7c>)
 800187c:	2132      	movs	r1, #50	@ 0x32
 800187e:	200a      	movs	r0, #10
 8001880:	f7ff fe64 	bl	800154c <lcd_ShowStr>
 while (1)
  {
	  // 50ms task
	  if(flag_timer2 == 1){
 8001884:	4b08      	ldr	r3, [pc, #32]	@ (80018a8 <main+0x80>)
 8001886:	881b      	ldrh	r3, [r3, #0]
 8001888:	2b01      	cmp	r3, #1
 800188a:	d1fb      	bne.n	8001884 <main+0x5c>
		  flag_timer2 = 0;
 800188c:	4b06      	ldr	r3, [pc, #24]	@ (80018a8 <main+0x80>)
 800188e:	2200      	movs	r2, #0
 8001890:	801a      	strh	r2, [r3, #0]
		  button_Scan();
 8001892:	f7fe ff8f 	bl	80007b4 <button_Scan>
		  test_Esp();
 8001896:	f7ff ffa5 	bl	80017e4 <test_Esp>
		  lightProcess();
 800189a:	f7ff ff47 	bl	800172c <lightProcess>
		  test_LedDebug();
 800189e:	f000 f87f 	bl	80019a0 <test_LedDebug>
	  if(flag_timer2 == 1){
 80018a2:	e7ef      	b.n	8001884 <main+0x5c>
 80018a4:	08007e34 	.word	0x08007e34
 80018a8:	2000020e 	.word	0x2000020e

080018ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b094      	sub	sp, #80	@ 0x50
 80018b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80018b2:	f107 0320 	add.w	r3, r7, #32
 80018b6:	2230      	movs	r2, #48	@ 0x30
 80018b8:	2100      	movs	r1, #0
 80018ba:	4618      	mov	r0, r3
 80018bc:	f005 fe22 	bl	8007504 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80018c0:	f107 030c 	add.w	r3, r7, #12
 80018c4:	2200      	movs	r2, #0
 80018c6:	601a      	str	r2, [r3, #0]
 80018c8:	605a      	str	r2, [r3, #4]
 80018ca:	609a      	str	r2, [r3, #8]
 80018cc:	60da      	str	r2, [r3, #12]
 80018ce:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80018d0:	2300      	movs	r3, #0
 80018d2:	60bb      	str	r3, [r7, #8]
 80018d4:	4b28      	ldr	r3, [pc, #160]	@ (8001978 <SystemClock_Config+0xcc>)
 80018d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018d8:	4a27      	ldr	r2, [pc, #156]	@ (8001978 <SystemClock_Config+0xcc>)
 80018da:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80018de:	6413      	str	r3, [r2, #64]	@ 0x40
 80018e0:	4b25      	ldr	r3, [pc, #148]	@ (8001978 <SystemClock_Config+0xcc>)
 80018e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018e4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80018e8:	60bb      	str	r3, [r7, #8]
 80018ea:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80018ec:	2300      	movs	r3, #0
 80018ee:	607b      	str	r3, [r7, #4]
 80018f0:	4b22      	ldr	r3, [pc, #136]	@ (800197c <SystemClock_Config+0xd0>)
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	4a21      	ldr	r2, [pc, #132]	@ (800197c <SystemClock_Config+0xd0>)
 80018f6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80018fa:	6013      	str	r3, [r2, #0]
 80018fc:	4b1f      	ldr	r3, [pc, #124]	@ (800197c <SystemClock_Config+0xd0>)
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001904:	607b      	str	r3, [r7, #4]
 8001906:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001908:	2302      	movs	r3, #2
 800190a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800190c:	2301      	movs	r3, #1
 800190e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001910:	2310      	movs	r3, #16
 8001912:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001914:	2302      	movs	r3, #2
 8001916:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001918:	2300      	movs	r3, #0
 800191a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800191c:	2308      	movs	r3, #8
 800191e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001920:	23a8      	movs	r3, #168	@ 0xa8
 8001922:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001924:	2302      	movs	r3, #2
 8001926:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001928:	2304      	movs	r3, #4
 800192a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800192c:	f107 0320 	add.w	r3, r7, #32
 8001930:	4618      	mov	r0, r3
 8001932:	f002 fa49 	bl	8003dc8 <HAL_RCC_OscConfig>
 8001936:	4603      	mov	r3, r0
 8001938:	2b00      	cmp	r3, #0
 800193a:	d001      	beq.n	8001940 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800193c:	f000 f854 	bl	80019e8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001940:	230f      	movs	r3, #15
 8001942:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001944:	2302      	movs	r3, #2
 8001946:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001948:	2300      	movs	r3, #0
 800194a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800194c:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001950:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8001952:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001956:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001958:	f107 030c 	add.w	r3, r7, #12
 800195c:	2105      	movs	r1, #5
 800195e:	4618      	mov	r0, r3
 8001960:	f002 fcaa 	bl	80042b8 <HAL_RCC_ClockConfig>
 8001964:	4603      	mov	r3, r0
 8001966:	2b00      	cmp	r3, #0
 8001968:	d001      	beq.n	800196e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800196a:	f000 f83d 	bl	80019e8 <Error_Handler>
  }
}
 800196e:	bf00      	nop
 8001970:	3750      	adds	r7, #80	@ 0x50
 8001972:	46bd      	mov	sp, r7
 8001974:	bd80      	pop	{r7, pc}
 8001976:	bf00      	nop
 8001978:	40023800 	.word	0x40023800
 800197c:	40007000 	.word	0x40007000

08001980 <system_init>:

/* USER CODE BEGIN 4 */
void system_init(){
 8001980:	b580      	push	{r7, lr}
 8001982:	af00      	add	r7, sp, #0
	  timer_init();
 8001984:	f000 f862 	bl	8001a4c <timer_init>
	  button_init();
 8001988:	f7fe ff08 	bl	800079c <button_init>
	  lcd_init();
 800198c:	f7ff fc7e 	bl	800128c <lcd_init>
	  uart_init_esp();
 8001990:	f000 fb6c 	bl	800206c <uart_init_esp>
	  setTimer2(10000);
 8001994:	f242 7010 	movw	r0, #10000	@ 0x2710
 8001998:	f000 f866 	bl	8001a68 <setTimer2>
}
 800199c:	bf00      	nop
 800199e:	bd80      	pop	{r7, pc}

080019a0 <test_LedDebug>:

uint8_t count_led_debug = 0;

void test_LedDebug(){
 80019a0:	b580      	push	{r7, lr}
 80019a2:	af00      	add	r7, sp, #0
	count_led_debug = (count_led_debug + 1)%20;
 80019a4:	4b0d      	ldr	r3, [pc, #52]	@ (80019dc <test_LedDebug+0x3c>)
 80019a6:	781b      	ldrb	r3, [r3, #0]
 80019a8:	1c5a      	adds	r2, r3, #1
 80019aa:	4b0d      	ldr	r3, [pc, #52]	@ (80019e0 <test_LedDebug+0x40>)
 80019ac:	fb83 1302 	smull	r1, r3, r3, r2
 80019b0:	10d9      	asrs	r1, r3, #3
 80019b2:	17d3      	asrs	r3, r2, #31
 80019b4:	1ac9      	subs	r1, r1, r3
 80019b6:	460b      	mov	r3, r1
 80019b8:	009b      	lsls	r3, r3, #2
 80019ba:	440b      	add	r3, r1
 80019bc:	009b      	lsls	r3, r3, #2
 80019be:	1ad1      	subs	r1, r2, r3
 80019c0:	b2ca      	uxtb	r2, r1
 80019c2:	4b06      	ldr	r3, [pc, #24]	@ (80019dc <test_LedDebug+0x3c>)
 80019c4:	701a      	strb	r2, [r3, #0]
	if(count_led_debug == 0){
 80019c6:	4b05      	ldr	r3, [pc, #20]	@ (80019dc <test_LedDebug+0x3c>)
 80019c8:	781b      	ldrb	r3, [r3, #0]
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d103      	bne.n	80019d6 <test_LedDebug+0x36>
		HAL_GPIO_TogglePin(DEBUG_LED_GPIO_Port, DEBUG_LED_Pin);
 80019ce:	2110      	movs	r1, #16
 80019d0:	4804      	ldr	r0, [pc, #16]	@ (80019e4 <test_LedDebug+0x44>)
 80019d2:	f002 f89a 	bl	8003b0a <HAL_GPIO_TogglePin>
	}
}
 80019d6:	bf00      	nop
 80019d8:	bd80      	pop	{r7, pc}
 80019da:	bf00      	nop
 80019dc:	20000201 	.word	0x20000201
 80019e0:	66666667 	.word	0x66666667
 80019e4:	40021000 	.word	0x40021000

080019e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80019e8:	b480      	push	{r7}
 80019ea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80019ec:	b672      	cpsid	i
}
 80019ee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80019f0:	bf00      	nop
 80019f2:	e7fd      	b.n	80019f0 <Error_Handler+0x8>

080019f4 <sensor_Read>:

void sensor_init(){
	HAL_ADC_Start_DMA(&hadc1, (uint16_t*)adc_receive, 5);
}

void sensor_Read(){
 80019f4:	b580      	push	{r7, lr}
 80019f6:	af00      	add	r7, sp, #0
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_receive, 5);
 80019f8:	2205      	movs	r2, #5
 80019fa:	4903      	ldr	r1, [pc, #12]	@ (8001a08 <sensor_Read+0x14>)
 80019fc:	4803      	ldr	r0, [pc, #12]	@ (8001a0c <sensor_Read+0x18>)
 80019fe:	f000 fded 	bl	80025dc <HAL_ADC_Start_DMA>
}
 8001a02:	bf00      	nop
 8001a04:	bd80      	pop	{r7, pc}
 8001a06:	bf00      	nop
 8001a08:	20000204 	.word	0x20000204
 8001a0c:	20000080 	.word	0x20000080

08001a10 <sensor_GetTemperature>:

float sensor_GetCurrent(){
	return (((float)adc_receive[1]*3.3*1000)/(4095*0.647)-2.5)*5/2.5;
}

float sensor_GetTemperature(){
 8001a10:	b480      	push	{r7}
 8001a12:	af00      	add	r7, sp, #0
	return ((float)adc_receive[4]*330)/(4095);
 8001a14:	4b0a      	ldr	r3, [pc, #40]	@ (8001a40 <sensor_GetTemperature+0x30>)
 8001a16:	891b      	ldrh	r3, [r3, #8]
 8001a18:	ee07 3a90 	vmov	s15, r3
 8001a1c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001a20:	ed9f 7a08 	vldr	s14, [pc, #32]	@ 8001a44 <sensor_GetTemperature+0x34>
 8001a24:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001a28:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 8001a48 <sensor_GetTemperature+0x38>
 8001a2c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001a30:	eef0 7a66 	vmov.f32	s15, s13
}
 8001a34:	eeb0 0a67 	vmov.f32	s0, s15
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3e:	4770      	bx	lr
 8001a40:	20000204 	.word	0x20000204
 8001a44:	43a50000 	.word	0x43a50000
 8001a48:	457ff000 	.word	0x457ff000

08001a4c <timer_init>:

uint16_t flag_timer2 = 0;
uint16_t timer2_counter = 0;
uint16_t timer2_MUL = 0;

void timer_init(){
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim2);
 8001a50:	4803      	ldr	r0, [pc, #12]	@ (8001a60 <timer_init+0x14>)
 8001a52:	f003 fcf5 	bl	8005440 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start(&htim1);
 8001a56:	4803      	ldr	r0, [pc, #12]	@ (8001a64 <timer_init+0x18>)
 8001a58:	f003 fc8a 	bl	8005370 <HAL_TIM_Base_Start>
}
 8001a5c:	bf00      	nop
 8001a5e:	bd80      	pop	{r7, pc}
 8001a60:	200002b8 	.word	0x200002b8
 8001a64:	20000270 	.word	0x20000270

08001a68 <setTimer2>:

void timer_EnableDelayUs(){
	HAL_TIM_Base_Start(&htim1);
}

void setTimer2(uint16_t duration){
 8001a68:	b480      	push	{r7}
 8001a6a:	b083      	sub	sp, #12
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	4603      	mov	r3, r0
 8001a70:	80fb      	strh	r3, [r7, #6]
	timer2_MUL = duration/TIMER_CYCLE_2;
 8001a72:	4a08      	ldr	r2, [pc, #32]	@ (8001a94 <setTimer2+0x2c>)
 8001a74:	88fb      	ldrh	r3, [r7, #6]
 8001a76:	8013      	strh	r3, [r2, #0]
	timer2_counter = timer2_MUL;
 8001a78:	4b06      	ldr	r3, [pc, #24]	@ (8001a94 <setTimer2+0x2c>)
 8001a7a:	881a      	ldrh	r2, [r3, #0]
 8001a7c:	4b06      	ldr	r3, [pc, #24]	@ (8001a98 <setTimer2+0x30>)
 8001a7e:	801a      	strh	r2, [r3, #0]
	flag_timer2 = 0;
 8001a80:	4b06      	ldr	r3, [pc, #24]	@ (8001a9c <setTimer2+0x34>)
 8001a82:	2200      	movs	r2, #0
 8001a84:	801a      	strh	r2, [r3, #0]
}
 8001a86:	bf00      	nop
 8001a88:	370c      	adds	r7, #12
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a90:	4770      	bx	lr
 8001a92:	bf00      	nop
 8001a94:	20000212 	.word	0x20000212
 8001a98:	20000210 	.word	0x20000210
 8001a9c:	2000020e 	.word	0x2000020e

08001aa0 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b082      	sub	sp, #8
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2){
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001ab0:	d116      	bne.n	8001ae0 <HAL_TIM_PeriodElapsedCallback+0x40>
		if(timer2_counter > 0){
 8001ab2:	4b0d      	ldr	r3, [pc, #52]	@ (8001ae8 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8001ab4:	881b      	ldrh	r3, [r3, #0]
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d010      	beq.n	8001adc <HAL_TIM_PeriodElapsedCallback+0x3c>
			timer2_counter--;
 8001aba:	4b0b      	ldr	r3, [pc, #44]	@ (8001ae8 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8001abc:	881b      	ldrh	r3, [r3, #0]
 8001abe:	3b01      	subs	r3, #1
 8001ac0:	b29a      	uxth	r2, r3
 8001ac2:	4b09      	ldr	r3, [pc, #36]	@ (8001ae8 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8001ac4:	801a      	strh	r2, [r3, #0]
			if(timer2_counter == 0) {
 8001ac6:	4b08      	ldr	r3, [pc, #32]	@ (8001ae8 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8001ac8:	881b      	ldrh	r3, [r3, #0]
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d106      	bne.n	8001adc <HAL_TIM_PeriodElapsedCallback+0x3c>
				flag_timer2 = 1;
 8001ace:	4b07      	ldr	r3, [pc, #28]	@ (8001aec <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8001ad0:	2201      	movs	r2, #1
 8001ad2:	801a      	strh	r2, [r3, #0]
				timer2_counter = timer2_MUL;
 8001ad4:	4b06      	ldr	r3, [pc, #24]	@ (8001af0 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8001ad6:	881a      	ldrh	r2, [r3, #0]
 8001ad8:	4b03      	ldr	r3, [pc, #12]	@ (8001ae8 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8001ada:	801a      	strh	r2, [r3, #0]
			}
		}
		led7_Scan();
 8001adc:	f7ff fd9a 	bl	8001614 <led7_Scan>
	}
}
 8001ae0:	bf00      	nop
 8001ae2:	3708      	adds	r7, #8
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	bd80      	pop	{r7, pc}
 8001ae8:	20000210 	.word	0x20000210
 8001aec:	2000020e 	.word	0x2000020e
 8001af0:	20000212 	.word	0x20000212

08001af4 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001af8:	4b17      	ldr	r3, [pc, #92]	@ (8001b58 <MX_SPI1_Init+0x64>)
 8001afa:	4a18      	ldr	r2, [pc, #96]	@ (8001b5c <MX_SPI1_Init+0x68>)
 8001afc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001afe:	4b16      	ldr	r3, [pc, #88]	@ (8001b58 <MX_SPI1_Init+0x64>)
 8001b00:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001b04:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001b06:	4b14      	ldr	r3, [pc, #80]	@ (8001b58 <MX_SPI1_Init+0x64>)
 8001b08:	2200      	movs	r2, #0
 8001b0a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001b0c:	4b12      	ldr	r3, [pc, #72]	@ (8001b58 <MX_SPI1_Init+0x64>)
 8001b0e:	2200      	movs	r2, #0
 8001b10:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001b12:	4b11      	ldr	r3, [pc, #68]	@ (8001b58 <MX_SPI1_Init+0x64>)
 8001b14:	2200      	movs	r2, #0
 8001b16:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001b18:	4b0f      	ldr	r3, [pc, #60]	@ (8001b58 <MX_SPI1_Init+0x64>)
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001b1e:	4b0e      	ldr	r3, [pc, #56]	@ (8001b58 <MX_SPI1_Init+0x64>)
 8001b20:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001b24:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001b26:	4b0c      	ldr	r3, [pc, #48]	@ (8001b58 <MX_SPI1_Init+0x64>)
 8001b28:	2200      	movs	r2, #0
 8001b2a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001b2c:	4b0a      	ldr	r3, [pc, #40]	@ (8001b58 <MX_SPI1_Init+0x64>)
 8001b2e:	2200      	movs	r2, #0
 8001b30:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001b32:	4b09      	ldr	r3, [pc, #36]	@ (8001b58 <MX_SPI1_Init+0x64>)
 8001b34:	2200      	movs	r2, #0
 8001b36:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001b38:	4b07      	ldr	r3, [pc, #28]	@ (8001b58 <MX_SPI1_Init+0x64>)
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001b3e:	4b06      	ldr	r3, [pc, #24]	@ (8001b58 <MX_SPI1_Init+0x64>)
 8001b40:	220a      	movs	r2, #10
 8001b42:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001b44:	4804      	ldr	r0, [pc, #16]	@ (8001b58 <MX_SPI1_Init+0x64>)
 8001b46:	f002 fdd7 	bl	80046f8 <HAL_SPI_Init>
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d001      	beq.n	8001b54 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001b50:	f7ff ff4a 	bl	80019e8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001b54:	bf00      	nop
 8001b56:	bd80      	pop	{r7, pc}
 8001b58:	20000214 	.word	0x20000214
 8001b5c:	40013000 	.word	0x40013000

08001b60 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b08a      	sub	sp, #40	@ 0x28
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b68:	f107 0314 	add.w	r3, r7, #20
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	601a      	str	r2, [r3, #0]
 8001b70:	605a      	str	r2, [r3, #4]
 8001b72:	609a      	str	r2, [r3, #8]
 8001b74:	60da      	str	r2, [r3, #12]
 8001b76:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	4a19      	ldr	r2, [pc, #100]	@ (8001be4 <HAL_SPI_MspInit+0x84>)
 8001b7e:	4293      	cmp	r3, r2
 8001b80:	d12b      	bne.n	8001bda <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001b82:	2300      	movs	r3, #0
 8001b84:	613b      	str	r3, [r7, #16]
 8001b86:	4b18      	ldr	r3, [pc, #96]	@ (8001be8 <HAL_SPI_MspInit+0x88>)
 8001b88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b8a:	4a17      	ldr	r2, [pc, #92]	@ (8001be8 <HAL_SPI_MspInit+0x88>)
 8001b8c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001b90:	6453      	str	r3, [r2, #68]	@ 0x44
 8001b92:	4b15      	ldr	r3, [pc, #84]	@ (8001be8 <HAL_SPI_MspInit+0x88>)
 8001b94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b96:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001b9a:	613b      	str	r3, [r7, #16]
 8001b9c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	60fb      	str	r3, [r7, #12]
 8001ba2:	4b11      	ldr	r3, [pc, #68]	@ (8001be8 <HAL_SPI_MspInit+0x88>)
 8001ba4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ba6:	4a10      	ldr	r2, [pc, #64]	@ (8001be8 <HAL_SPI_MspInit+0x88>)
 8001ba8:	f043 0302 	orr.w	r3, r3, #2
 8001bac:	6313      	str	r3, [r2, #48]	@ 0x30
 8001bae:	4b0e      	ldr	r3, [pc, #56]	@ (8001be8 <HAL_SPI_MspInit+0x88>)
 8001bb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bb2:	f003 0302 	and.w	r3, r3, #2
 8001bb6:	60fb      	str	r3, [r7, #12]
 8001bb8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8001bba:	2338      	movs	r3, #56	@ 0x38
 8001bbc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bbe:	2302      	movs	r3, #2
 8001bc0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bc6:	2303      	movs	r3, #3
 8001bc8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001bca:	2305      	movs	r3, #5
 8001bcc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bce:	f107 0314 	add.w	r3, r7, #20
 8001bd2:	4619      	mov	r1, r3
 8001bd4:	4805      	ldr	r0, [pc, #20]	@ (8001bec <HAL_SPI_MspInit+0x8c>)
 8001bd6:	f001 fde3 	bl	80037a0 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001bda:	bf00      	nop
 8001bdc:	3728      	adds	r7, #40	@ 0x28
 8001bde:	46bd      	mov	sp, r7
 8001be0:	bd80      	pop	{r7, pc}
 8001be2:	bf00      	nop
 8001be4:	40013000 	.word	0x40013000
 8001be8:	40023800 	.word	0x40023800
 8001bec:	40020400 	.word	0x40020400

08001bf0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	b083      	sub	sp, #12
 8001bf4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	607b      	str	r3, [r7, #4]
 8001bfa:	4b10      	ldr	r3, [pc, #64]	@ (8001c3c <HAL_MspInit+0x4c>)
 8001bfc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bfe:	4a0f      	ldr	r2, [pc, #60]	@ (8001c3c <HAL_MspInit+0x4c>)
 8001c00:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001c04:	6453      	str	r3, [r2, #68]	@ 0x44
 8001c06:	4b0d      	ldr	r3, [pc, #52]	@ (8001c3c <HAL_MspInit+0x4c>)
 8001c08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c0a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001c0e:	607b      	str	r3, [r7, #4]
 8001c10:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c12:	2300      	movs	r3, #0
 8001c14:	603b      	str	r3, [r7, #0]
 8001c16:	4b09      	ldr	r3, [pc, #36]	@ (8001c3c <HAL_MspInit+0x4c>)
 8001c18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c1a:	4a08      	ldr	r2, [pc, #32]	@ (8001c3c <HAL_MspInit+0x4c>)
 8001c1c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001c20:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c22:	4b06      	ldr	r3, [pc, #24]	@ (8001c3c <HAL_MspInit+0x4c>)
 8001c24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c26:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c2a:	603b      	str	r3, [r7, #0]
 8001c2c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c2e:	bf00      	nop
 8001c30:	370c      	adds	r7, #12
 8001c32:	46bd      	mov	sp, r7
 8001c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c38:	4770      	bx	lr
 8001c3a:	bf00      	nop
 8001c3c:	40023800 	.word	0x40023800

08001c40 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c40:	b480      	push	{r7}
 8001c42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001c44:	bf00      	nop
 8001c46:	e7fd      	b.n	8001c44 <NMI_Handler+0x4>

08001c48 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c4c:	bf00      	nop
 8001c4e:	e7fd      	b.n	8001c4c <HardFault_Handler+0x4>

08001c50 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c50:	b480      	push	{r7}
 8001c52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c54:	bf00      	nop
 8001c56:	e7fd      	b.n	8001c54 <MemManage_Handler+0x4>

08001c58 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c58:	b480      	push	{r7}
 8001c5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c5c:	bf00      	nop
 8001c5e:	e7fd      	b.n	8001c5c <BusFault_Handler+0x4>

08001c60 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c60:	b480      	push	{r7}
 8001c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c64:	bf00      	nop
 8001c66:	e7fd      	b.n	8001c64 <UsageFault_Handler+0x4>

08001c68 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c6c:	bf00      	nop
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c74:	4770      	bx	lr

08001c76 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c76:	b480      	push	{r7}
 8001c78:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c7a:	bf00      	nop
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c82:	4770      	bx	lr

08001c84 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c84:	b480      	push	{r7}
 8001c86:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c88:	bf00      	nop
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c90:	4770      	bx	lr

08001c92 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c92:	b580      	push	{r7, lr}
 8001c94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c96:	f000 fc19 	bl	80024cc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c9a:	bf00      	nop
 8001c9c:	bd80      	pop	{r7, pc}
	...

08001ca0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001ca4:	4802      	ldr	r0, [pc, #8]	@ (8001cb0 <TIM2_IRQHandler+0x10>)
 8001ca6:	f003 fc94 	bl	80055d2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001caa:	bf00      	nop
 8001cac:	bd80      	pop	{r7, pc}
 8001cae:	bf00      	nop
 8001cb0:	200002b8 	.word	0x200002b8

08001cb4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001cb8:	4802      	ldr	r0, [pc, #8]	@ (8001cc4 <USART1_IRQHandler+0x10>)
 8001cba:	f004 fbcf 	bl	800645c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001cbe:	bf00      	nop
 8001cc0:	bd80      	pop	{r7, pc}
 8001cc2:	bf00      	nop
 8001cc4:	200003b0 	.word	0x200003b0

08001cc8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001ccc:	4802      	ldr	r0, [pc, #8]	@ (8001cd8 <USART2_IRQHandler+0x10>)
 8001cce:	f004 fbc5 	bl	800645c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001cd2:	bf00      	nop
 8001cd4:	bd80      	pop	{r7, pc}
 8001cd6:	bf00      	nop
 8001cd8:	200003f4 	.word	0x200003f4

08001cdc <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001ce0:	4802      	ldr	r0, [pc, #8]	@ (8001cec <DMA2_Stream0_IRQHandler+0x10>)
 8001ce2:	f001 faf3 	bl	80032cc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001ce6:	bf00      	nop
 8001ce8:	bd80      	pop	{r7, pc}
 8001cea:	bf00      	nop
 8001cec:	200000c8 	.word	0x200000c8

08001cf0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b086      	sub	sp, #24
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001cf8:	4a14      	ldr	r2, [pc, #80]	@ (8001d4c <_sbrk+0x5c>)
 8001cfa:	4b15      	ldr	r3, [pc, #84]	@ (8001d50 <_sbrk+0x60>)
 8001cfc:	1ad3      	subs	r3, r2, r3
 8001cfe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d00:	697b      	ldr	r3, [r7, #20]
 8001d02:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d04:	4b13      	ldr	r3, [pc, #76]	@ (8001d54 <_sbrk+0x64>)
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d102      	bne.n	8001d12 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001d0c:	4b11      	ldr	r3, [pc, #68]	@ (8001d54 <_sbrk+0x64>)
 8001d0e:	4a12      	ldr	r2, [pc, #72]	@ (8001d58 <_sbrk+0x68>)
 8001d10:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d12:	4b10      	ldr	r3, [pc, #64]	@ (8001d54 <_sbrk+0x64>)
 8001d14:	681a      	ldr	r2, [r3, #0]
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	4413      	add	r3, r2
 8001d1a:	693a      	ldr	r2, [r7, #16]
 8001d1c:	429a      	cmp	r2, r3
 8001d1e:	d207      	bcs.n	8001d30 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d20:	f005 fbf8 	bl	8007514 <__errno>
 8001d24:	4603      	mov	r3, r0
 8001d26:	220c      	movs	r2, #12
 8001d28:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001d2a:	f04f 33ff 	mov.w	r3, #4294967295
 8001d2e:	e009      	b.n	8001d44 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d30:	4b08      	ldr	r3, [pc, #32]	@ (8001d54 <_sbrk+0x64>)
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d36:	4b07      	ldr	r3, [pc, #28]	@ (8001d54 <_sbrk+0x64>)
 8001d38:	681a      	ldr	r2, [r3, #0]
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	4413      	add	r3, r2
 8001d3e:	4a05      	ldr	r2, [pc, #20]	@ (8001d54 <_sbrk+0x64>)
 8001d40:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001d42:	68fb      	ldr	r3, [r7, #12]
}
 8001d44:	4618      	mov	r0, r3
 8001d46:	3718      	adds	r7, #24
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	bd80      	pop	{r7, pc}
 8001d4c:	20020000 	.word	0x20020000
 8001d50:	00000400 	.word	0x00000400
 8001d54:	2000026c 	.word	0x2000026c
 8001d58:	20000588 	.word	0x20000588

08001d5c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001d5c:	b480      	push	{r7}
 8001d5e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001d60:	4b06      	ldr	r3, [pc, #24]	@ (8001d7c <SystemInit+0x20>)
 8001d62:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001d66:	4a05      	ldr	r2, [pc, #20]	@ (8001d7c <SystemInit+0x20>)
 8001d68:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001d6c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001d70:	bf00      	nop
 8001d72:	46bd      	mov	sp, r7
 8001d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d78:	4770      	bx	lr
 8001d7a:	bf00      	nop
 8001d7c:	e000ed00 	.word	0xe000ed00

08001d80 <MX_TIM1_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim13;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b086      	sub	sp, #24
 8001d84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d86:	f107 0308 	add.w	r3, r7, #8
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	601a      	str	r2, [r3, #0]
 8001d8e:	605a      	str	r2, [r3, #4]
 8001d90:	609a      	str	r2, [r3, #8]
 8001d92:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d94:	463b      	mov	r3, r7
 8001d96:	2200      	movs	r2, #0
 8001d98:	601a      	str	r2, [r3, #0]
 8001d9a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001d9c:	4b1e      	ldr	r3, [pc, #120]	@ (8001e18 <MX_TIM1_Init+0x98>)
 8001d9e:	4a1f      	ldr	r2, [pc, #124]	@ (8001e1c <MX_TIM1_Init+0x9c>)
 8001da0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 84-1;
 8001da2:	4b1d      	ldr	r3, [pc, #116]	@ (8001e18 <MX_TIM1_Init+0x98>)
 8001da4:	2253      	movs	r2, #83	@ 0x53
 8001da6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001da8:	4b1b      	ldr	r3, [pc, #108]	@ (8001e18 <MX_TIM1_Init+0x98>)
 8001daa:	2200      	movs	r2, #0
 8001dac:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001dae:	4b1a      	ldr	r3, [pc, #104]	@ (8001e18 <MX_TIM1_Init+0x98>)
 8001db0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001db4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001db6:	4b18      	ldr	r3, [pc, #96]	@ (8001e18 <MX_TIM1_Init+0x98>)
 8001db8:	2200      	movs	r2, #0
 8001dba:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001dbc:	4b16      	ldr	r3, [pc, #88]	@ (8001e18 <MX_TIM1_Init+0x98>)
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001dc2:	4b15      	ldr	r3, [pc, #84]	@ (8001e18 <MX_TIM1_Init+0x98>)
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001dc8:	4813      	ldr	r0, [pc, #76]	@ (8001e18 <MX_TIM1_Init+0x98>)
 8001dca:	f003 fa81 	bl	80052d0 <HAL_TIM_Base_Init>
 8001dce:	4603      	mov	r3, r0
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d001      	beq.n	8001dd8 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8001dd4:	f7ff fe08 	bl	80019e8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001dd8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001ddc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001dde:	f107 0308 	add.w	r3, r7, #8
 8001de2:	4619      	mov	r1, r3
 8001de4:	480c      	ldr	r0, [pc, #48]	@ (8001e18 <MX_TIM1_Init+0x98>)
 8001de6:	f003 fdbf 	bl	8005968 <HAL_TIM_ConfigClockSource>
 8001dea:	4603      	mov	r3, r0
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d001      	beq.n	8001df4 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8001df0:	f7ff fdfa 	bl	80019e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001df4:	2300      	movs	r3, #0
 8001df6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001df8:	2300      	movs	r3, #0
 8001dfa:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001dfc:	463b      	mov	r3, r7
 8001dfe:	4619      	mov	r1, r3
 8001e00:	4805      	ldr	r0, [pc, #20]	@ (8001e18 <MX_TIM1_Init+0x98>)
 8001e02:	f004 f98b 	bl	800611c <HAL_TIMEx_MasterConfigSynchronization>
 8001e06:	4603      	mov	r3, r0
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d001      	beq.n	8001e10 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001e0c:	f7ff fdec 	bl	80019e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001e10:	bf00      	nop
 8001e12:	3718      	adds	r7, #24
 8001e14:	46bd      	mov	sp, r7
 8001e16:	bd80      	pop	{r7, pc}
 8001e18:	20000270 	.word	0x20000270
 8001e1c:	40010000 	.word	0x40010000

08001e20 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b086      	sub	sp, #24
 8001e24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001e26:	f107 0308 	add.w	r3, r7, #8
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	601a      	str	r2, [r3, #0]
 8001e2e:	605a      	str	r2, [r3, #4]
 8001e30:	609a      	str	r2, [r3, #8]
 8001e32:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e34:	463b      	mov	r3, r7
 8001e36:	2200      	movs	r2, #0
 8001e38:	601a      	str	r2, [r3, #0]
 8001e3a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001e3c:	4b1d      	ldr	r3, [pc, #116]	@ (8001eb4 <MX_TIM2_Init+0x94>)
 8001e3e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001e42:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 840-1;
 8001e44:	4b1b      	ldr	r3, [pc, #108]	@ (8001eb4 <MX_TIM2_Init+0x94>)
 8001e46:	f240 3247 	movw	r2, #839	@ 0x347
 8001e4a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e4c:	4b19      	ldr	r3, [pc, #100]	@ (8001eb4 <MX_TIM2_Init+0x94>)
 8001e4e:	2200      	movs	r2, #0
 8001e50:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 8001e52:	4b18      	ldr	r3, [pc, #96]	@ (8001eb4 <MX_TIM2_Init+0x94>)
 8001e54:	2263      	movs	r2, #99	@ 0x63
 8001e56:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e58:	4b16      	ldr	r3, [pc, #88]	@ (8001eb4 <MX_TIM2_Init+0x94>)
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e5e:	4b15      	ldr	r3, [pc, #84]	@ (8001eb4 <MX_TIM2_Init+0x94>)
 8001e60:	2200      	movs	r2, #0
 8001e62:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001e64:	4813      	ldr	r0, [pc, #76]	@ (8001eb4 <MX_TIM2_Init+0x94>)
 8001e66:	f003 fa33 	bl	80052d0 <HAL_TIM_Base_Init>
 8001e6a:	4603      	mov	r3, r0
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d001      	beq.n	8001e74 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001e70:	f7ff fdba 	bl	80019e8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001e74:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001e78:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001e7a:	f107 0308 	add.w	r3, r7, #8
 8001e7e:	4619      	mov	r1, r3
 8001e80:	480c      	ldr	r0, [pc, #48]	@ (8001eb4 <MX_TIM2_Init+0x94>)
 8001e82:	f003 fd71 	bl	8005968 <HAL_TIM_ConfigClockSource>
 8001e86:	4603      	mov	r3, r0
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d001      	beq.n	8001e90 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001e8c:	f7ff fdac 	bl	80019e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e90:	2300      	movs	r3, #0
 8001e92:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e94:	2300      	movs	r3, #0
 8001e96:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001e98:	463b      	mov	r3, r7
 8001e9a:	4619      	mov	r1, r3
 8001e9c:	4805      	ldr	r0, [pc, #20]	@ (8001eb4 <MX_TIM2_Init+0x94>)
 8001e9e:	f004 f93d 	bl	800611c <HAL_TIMEx_MasterConfigSynchronization>
 8001ea2:	4603      	mov	r3, r0
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d001      	beq.n	8001eac <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001ea8:	f7ff fd9e 	bl	80019e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001eac:	bf00      	nop
 8001eae:	3718      	adds	r7, #24
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	bd80      	pop	{r7, pc}
 8001eb4:	200002b8 	.word	0x200002b8

08001eb8 <MX_TIM13_Init>:
/* TIM13 init function */
void MX_TIM13_Init(void)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b088      	sub	sp, #32
 8001ebc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM13_Init 0 */

  /* USER CODE END TIM13_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001ebe:	1d3b      	adds	r3, r7, #4
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	601a      	str	r2, [r3, #0]
 8001ec4:	605a      	str	r2, [r3, #4]
 8001ec6:	609a      	str	r2, [r3, #8]
 8001ec8:	60da      	str	r2, [r3, #12]
 8001eca:	611a      	str	r2, [r3, #16]
 8001ecc:	615a      	str	r2, [r3, #20]
 8001ece:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8001ed0:	4b1e      	ldr	r3, [pc, #120]	@ (8001f4c <MX_TIM13_Init+0x94>)
 8001ed2:	4a1f      	ldr	r2, [pc, #124]	@ (8001f50 <MX_TIM13_Init+0x98>)
 8001ed4:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 840-1;
 8001ed6:	4b1d      	ldr	r3, [pc, #116]	@ (8001f4c <MX_TIM13_Init+0x94>)
 8001ed8:	f240 3247 	movw	r2, #839	@ 0x347
 8001edc:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ede:	4b1b      	ldr	r3, [pc, #108]	@ (8001f4c <MX_TIM13_Init+0x94>)
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 100-1;
 8001ee4:	4b19      	ldr	r3, [pc, #100]	@ (8001f4c <MX_TIM13_Init+0x94>)
 8001ee6:	2263      	movs	r2, #99	@ 0x63
 8001ee8:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001eea:	4b18      	ldr	r3, [pc, #96]	@ (8001f4c <MX_TIM13_Init+0x94>)
 8001eec:	2200      	movs	r2, #0
 8001eee:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ef0:	4b16      	ldr	r3, [pc, #88]	@ (8001f4c <MX_TIM13_Init+0x94>)
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8001ef6:	4815      	ldr	r0, [pc, #84]	@ (8001f4c <MX_TIM13_Init+0x94>)
 8001ef8:	f003 f9ea 	bl	80052d0 <HAL_TIM_Base_Init>
 8001efc:	4603      	mov	r3, r0
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d001      	beq.n	8001f06 <MX_TIM13_Init+0x4e>
  {
    Error_Handler();
 8001f02:	f7ff fd71 	bl	80019e8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim13) != HAL_OK)
 8001f06:	4811      	ldr	r0, [pc, #68]	@ (8001f4c <MX_TIM13_Init+0x94>)
 8001f08:	f003 fb0a 	bl	8005520 <HAL_TIM_PWM_Init>
 8001f0c:	4603      	mov	r3, r0
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d001      	beq.n	8001f16 <MX_TIM13_Init+0x5e>
  {
    Error_Handler();
 8001f12:	f7ff fd69 	bl	80019e8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001f16:	2360      	movs	r3, #96	@ 0x60
 8001f18:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001f1e:	2300      	movs	r3, #0
 8001f20:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001f22:	2300      	movs	r3, #0
 8001f24:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim13, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001f26:	1d3b      	adds	r3, r7, #4
 8001f28:	2200      	movs	r2, #0
 8001f2a:	4619      	mov	r1, r3
 8001f2c:	4807      	ldr	r0, [pc, #28]	@ (8001f4c <MX_TIM13_Init+0x94>)
 8001f2e:	f003 fc59 	bl	80057e4 <HAL_TIM_PWM_ConfigChannel>
 8001f32:	4603      	mov	r3, r0
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d001      	beq.n	8001f3c <MX_TIM13_Init+0x84>
  {
    Error_Handler();
 8001f38:	f7ff fd56 	bl	80019e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */
  HAL_TIM_MspPostInit(&htim13);
 8001f3c:	4803      	ldr	r0, [pc, #12]	@ (8001f4c <MX_TIM13_Init+0x94>)
 8001f3e:	f000 f85b 	bl	8001ff8 <HAL_TIM_MspPostInit>

}
 8001f42:	bf00      	nop
 8001f44:	3720      	adds	r7, #32
 8001f46:	46bd      	mov	sp, r7
 8001f48:	bd80      	pop	{r7, pc}
 8001f4a:	bf00      	nop
 8001f4c:	20000300 	.word	0x20000300
 8001f50:	40001c00 	.word	0x40001c00

08001f54 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b086      	sub	sp, #24
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	4a22      	ldr	r2, [pc, #136]	@ (8001fec <HAL_TIM_Base_MspInit+0x98>)
 8001f62:	4293      	cmp	r3, r2
 8001f64:	d10e      	bne.n	8001f84 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001f66:	2300      	movs	r3, #0
 8001f68:	617b      	str	r3, [r7, #20]
 8001f6a:	4b21      	ldr	r3, [pc, #132]	@ (8001ff0 <HAL_TIM_Base_MspInit+0x9c>)
 8001f6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f6e:	4a20      	ldr	r2, [pc, #128]	@ (8001ff0 <HAL_TIM_Base_MspInit+0x9c>)
 8001f70:	f043 0301 	orr.w	r3, r3, #1
 8001f74:	6453      	str	r3, [r2, #68]	@ 0x44
 8001f76:	4b1e      	ldr	r3, [pc, #120]	@ (8001ff0 <HAL_TIM_Base_MspInit+0x9c>)
 8001f78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f7a:	f003 0301 	and.w	r3, r3, #1
 8001f7e:	617b      	str	r3, [r7, #20]
 8001f80:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM13_CLK_ENABLE();
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }
}
 8001f82:	e02e      	b.n	8001fe2 <HAL_TIM_Base_MspInit+0x8e>
  else if(tim_baseHandle->Instance==TIM2)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001f8c:	d116      	bne.n	8001fbc <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001f8e:	2300      	movs	r3, #0
 8001f90:	613b      	str	r3, [r7, #16]
 8001f92:	4b17      	ldr	r3, [pc, #92]	@ (8001ff0 <HAL_TIM_Base_MspInit+0x9c>)
 8001f94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f96:	4a16      	ldr	r2, [pc, #88]	@ (8001ff0 <HAL_TIM_Base_MspInit+0x9c>)
 8001f98:	f043 0301 	orr.w	r3, r3, #1
 8001f9c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f9e:	4b14      	ldr	r3, [pc, #80]	@ (8001ff0 <HAL_TIM_Base_MspInit+0x9c>)
 8001fa0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fa2:	f003 0301 	and.w	r3, r3, #1
 8001fa6:	613b      	str	r3, [r7, #16]
 8001fa8:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001faa:	2200      	movs	r2, #0
 8001fac:	2100      	movs	r1, #0
 8001fae:	201c      	movs	r0, #28
 8001fb0:	f000 ffbd 	bl	8002f2e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001fb4:	201c      	movs	r0, #28
 8001fb6:	f000 ffd6 	bl	8002f66 <HAL_NVIC_EnableIRQ>
}
 8001fba:	e012      	b.n	8001fe2 <HAL_TIM_Base_MspInit+0x8e>
  else if(tim_baseHandle->Instance==TIM13)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	4a0c      	ldr	r2, [pc, #48]	@ (8001ff4 <HAL_TIM_Base_MspInit+0xa0>)
 8001fc2:	4293      	cmp	r3, r2
 8001fc4:	d10d      	bne.n	8001fe2 <HAL_TIM_Base_MspInit+0x8e>
    __HAL_RCC_TIM13_CLK_ENABLE();
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	60fb      	str	r3, [r7, #12]
 8001fca:	4b09      	ldr	r3, [pc, #36]	@ (8001ff0 <HAL_TIM_Base_MspInit+0x9c>)
 8001fcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fce:	4a08      	ldr	r2, [pc, #32]	@ (8001ff0 <HAL_TIM_Base_MspInit+0x9c>)
 8001fd0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001fd4:	6413      	str	r3, [r2, #64]	@ 0x40
 8001fd6:	4b06      	ldr	r3, [pc, #24]	@ (8001ff0 <HAL_TIM_Base_MspInit+0x9c>)
 8001fd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fda:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001fde:	60fb      	str	r3, [r7, #12]
 8001fe0:	68fb      	ldr	r3, [r7, #12]
}
 8001fe2:	bf00      	nop
 8001fe4:	3718      	adds	r7, #24
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	bd80      	pop	{r7, pc}
 8001fea:	bf00      	nop
 8001fec:	40010000 	.word	0x40010000
 8001ff0:	40023800 	.word	0x40023800
 8001ff4:	40001c00 	.word	0x40001c00

08001ff8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b088      	sub	sp, #32
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002000:	f107 030c 	add.w	r3, r7, #12
 8002004:	2200      	movs	r2, #0
 8002006:	601a      	str	r2, [r3, #0]
 8002008:	605a      	str	r2, [r3, #4]
 800200a:	609a      	str	r2, [r3, #8]
 800200c:	60da      	str	r2, [r3, #12]
 800200e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM13)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	4a12      	ldr	r2, [pc, #72]	@ (8002060 <HAL_TIM_MspPostInit+0x68>)
 8002016:	4293      	cmp	r3, r2
 8002018:	d11e      	bne.n	8002058 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM13_MspPostInit 0 */

  /* USER CODE END TIM13_MspPostInit 0 */

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800201a:	2300      	movs	r3, #0
 800201c:	60bb      	str	r3, [r7, #8]
 800201e:	4b11      	ldr	r3, [pc, #68]	@ (8002064 <HAL_TIM_MspPostInit+0x6c>)
 8002020:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002022:	4a10      	ldr	r2, [pc, #64]	@ (8002064 <HAL_TIM_MspPostInit+0x6c>)
 8002024:	f043 0320 	orr.w	r3, r3, #32
 8002028:	6313      	str	r3, [r2, #48]	@ 0x30
 800202a:	4b0e      	ldr	r3, [pc, #56]	@ (8002064 <HAL_TIM_MspPostInit+0x6c>)
 800202c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800202e:	f003 0320 	and.w	r3, r3, #32
 8002032:	60bb      	str	r3, [r7, #8]
 8002034:	68bb      	ldr	r3, [r7, #8]
    /**TIM13 GPIO Configuration
    PF8     ------> TIM13_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002036:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800203a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800203c:	2302      	movs	r3, #2
 800203e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002040:	2300      	movs	r3, #0
 8002042:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002044:	2300      	movs	r3, #0
 8002046:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
 8002048:	2309      	movs	r3, #9
 800204a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800204c:	f107 030c 	add.w	r3, r7, #12
 8002050:	4619      	mov	r1, r3
 8002052:	4805      	ldr	r0, [pc, #20]	@ (8002068 <HAL_TIM_MspPostInit+0x70>)
 8002054:	f001 fba4 	bl	80037a0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM13_MspPostInit 1 */

  /* USER CODE END TIM13_MspPostInit 1 */
  }

}
 8002058:	bf00      	nop
 800205a:	3720      	adds	r7, #32
 800205c:	46bd      	mov	sp, r7
 800205e:	bd80      	pop	{r7, pc}
 8002060:	40001c00 	.word	0x40001c00
 8002064:	40023800 	.word	0x40023800
 8002068:	40021400 	.word	0x40021400

0800206c <uart_init_esp>:
    sprintf((void*)msg,"%ld",num%100);
    sprintf((void*)msg,"%s#",msg);
    uart_Rs232SendString(msg);
}

void uart_init_esp(){
 800206c:	b580      	push	{r7, lr}
 800206e:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(&huart2, &receive_buffer2, 1);
 8002070:	2201      	movs	r2, #1
 8002072:	4906      	ldr	r1, [pc, #24]	@ (800208c <uart_init_esp+0x20>)
 8002074:	4806      	ldr	r0, [pc, #24]	@ (8002090 <uart_init_esp+0x24>)
 8002076:	f004 f9c0 	bl	80063fa <HAL_UART_Receive_IT>
	HAL_GPIO_WritePin(ESP12_PWR_GPIO_Port, ESP12_PWR_Pin, 1);
 800207a:	2201      	movs	r2, #1
 800207c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002080:	4804      	ldr	r0, [pc, #16]	@ (8002094 <uart_init_esp+0x28>)
 8002082:	f001 fd29 	bl	8003ad8 <HAL_GPIO_WritePin>
}
 8002086:	bf00      	nop
 8002088:	bd80      	pop	{r7, pc}
 800208a:	bf00      	nop
 800208c:	200003ad 	.word	0x200003ad
 8002090:	200003f4 	.word	0x200003f4
 8002094:	40021400 	.word	0x40021400

08002098 <uart_EspSendBytes>:

void uart_EspSendBytes(uint8_t* bytes, uint16_t size){
 8002098:	b580      	push	{r7, lr}
 800209a:	b082      	sub	sp, #8
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
 80020a0:	460b      	mov	r3, r1
 80020a2:	807b      	strh	r3, [r7, #2]
	HAL_UART_Transmit(&huart2, bytes, size, 10);
 80020a4:	887a      	ldrh	r2, [r7, #2]
 80020a6:	230a      	movs	r3, #10
 80020a8:	6879      	ldr	r1, [r7, #4]
 80020aa:	4803      	ldr	r0, [pc, #12]	@ (80020b8 <uart_EspSendBytes+0x20>)
 80020ac:	f004 f913 	bl	80062d6 <HAL_UART_Transmit>
}
 80020b0:	bf00      	nop
 80020b2:	3708      	adds	r7, #8
 80020b4:	46bd      	mov	sp, r7
 80020b6:	bd80      	pop	{r7, pc}
 80020b8:	200003f4 	.word	0x200003f4

080020bc <uart_EspSendString>:
void uart_EspSendString(uint8_t* str){
 80020bc:	b580      	push	{r7, lr}
 80020be:	b082      	sub	sp, #8
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (void*)msg, sprintf((void*)msg,"%s",str), 10);
 80020c4:	687a      	ldr	r2, [r7, #4]
 80020c6:	4907      	ldr	r1, [pc, #28]	@ (80020e4 <uart_EspSendString+0x28>)
 80020c8:	4807      	ldr	r0, [pc, #28]	@ (80020e8 <uart_EspSendString+0x2c>)
 80020ca:	f005 f9fb 	bl	80074c4 <siprintf>
 80020ce:	4603      	mov	r3, r0
 80020d0:	b29a      	uxth	r2, r3
 80020d2:	230a      	movs	r3, #10
 80020d4:	4904      	ldr	r1, [pc, #16]	@ (80020e8 <uart_EspSendString+0x2c>)
 80020d6:	4805      	ldr	r0, [pc, #20]	@ (80020ec <uart_EspSendString+0x30>)
 80020d8:	f004 f8fd 	bl	80062d6 <HAL_UART_Transmit>
}
 80020dc:	bf00      	nop
 80020de:	3708      	adds	r7, #8
 80020e0:	46bd      	mov	sp, r7
 80020e2:	bd80      	pop	{r7, pc}
 80020e4:	08007e40 	.word	0x08007e40
 80020e8:	20000348 	.word	0x20000348
 80020ec:	200003f4 	.word	0x200003f4

080020f0 <uart_EspSendNumersPercent>:
void uart_EspSendNumersPercent(uint32_t num)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b082      	sub	sp, #8
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
	sprintf((void*)msg,"%ld",num/100);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	4a14      	ldr	r2, [pc, #80]	@ (800214c <uart_EspSendNumersPercent+0x5c>)
 80020fc:	fba2 2303 	umull	r2, r3, r2, r3
 8002100:	095b      	lsrs	r3, r3, #5
 8002102:	461a      	mov	r2, r3
 8002104:	4912      	ldr	r1, [pc, #72]	@ (8002150 <uart_EspSendNumersPercent+0x60>)
 8002106:	4813      	ldr	r0, [pc, #76]	@ (8002154 <uart_EspSendNumersPercent+0x64>)
 8002108:	f005 f9dc 	bl	80074c4 <siprintf>
	uart_EspSendString(msg);
 800210c:	4811      	ldr	r0, [pc, #68]	@ (8002154 <uart_EspSendNumersPercent+0x64>)
 800210e:	f7ff ffd5 	bl	80020bc <uart_EspSendString>
	uart_EspSendString(".");
 8002112:	4811      	ldr	r0, [pc, #68]	@ (8002158 <uart_EspSendNumersPercent+0x68>)
 8002114:	f7ff ffd2 	bl	80020bc <uart_EspSendString>
    sprintf((void*)msg,"%ld",num%100);
 8002118:	687a      	ldr	r2, [r7, #4]
 800211a:	4b0c      	ldr	r3, [pc, #48]	@ (800214c <uart_EspSendNumersPercent+0x5c>)
 800211c:	fba3 1302 	umull	r1, r3, r3, r2
 8002120:	095b      	lsrs	r3, r3, #5
 8002122:	2164      	movs	r1, #100	@ 0x64
 8002124:	fb01 f303 	mul.w	r3, r1, r3
 8002128:	1ad3      	subs	r3, r2, r3
 800212a:	461a      	mov	r2, r3
 800212c:	4908      	ldr	r1, [pc, #32]	@ (8002150 <uart_EspSendNumersPercent+0x60>)
 800212e:	4809      	ldr	r0, [pc, #36]	@ (8002154 <uart_EspSendNumersPercent+0x64>)
 8002130:	f005 f9c8 	bl	80074c4 <siprintf>
    sprintf((void*)msg,"%s#",msg);
 8002134:	4a07      	ldr	r2, [pc, #28]	@ (8002154 <uart_EspSendNumersPercent+0x64>)
 8002136:	4909      	ldr	r1, [pc, #36]	@ (800215c <uart_EspSendNumersPercent+0x6c>)
 8002138:	4806      	ldr	r0, [pc, #24]	@ (8002154 <uart_EspSendNumersPercent+0x64>)
 800213a:	f005 f9c3 	bl	80074c4 <siprintf>
    uart_EspSendString(msg);
 800213e:	4805      	ldr	r0, [pc, #20]	@ (8002154 <uart_EspSendNumersPercent+0x64>)
 8002140:	f7ff ffbc 	bl	80020bc <uart_EspSendString>
}
 8002144:	bf00      	nop
 8002146:	3708      	adds	r7, #8
 8002148:	46bd      	mov	sp, r7
 800214a:	bd80      	pop	{r7, pc}
 800214c:	51eb851f 	.word	0x51eb851f
 8002150:	08007e4c 	.word	0x08007e4c
 8002154:	20000348 	.word	0x20000348
 8002158:	08007e50 	.word	0x08007e50
 800215c:	08007e54 	.word	0x08007e54

08002160 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8002160:	b580      	push	{r7, lr}
 8002162:	b082      	sub	sp, #8
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART1){
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	4a19      	ldr	r2, [pc, #100]	@ (80021d4 <HAL_UART_RxCpltCallback+0x74>)
 800216e:	4293      	cmp	r3, r2
 8002170:	d10a      	bne.n	8002188 <HAL_UART_RxCpltCallback+0x28>
		// rs232 isr
		// can be modified
		HAL_UART_Transmit(&huart1, &receive_buffer1, 1, 10);
 8002172:	230a      	movs	r3, #10
 8002174:	2201      	movs	r2, #1
 8002176:	4918      	ldr	r1, [pc, #96]	@ (80021d8 <HAL_UART_RxCpltCallback+0x78>)
 8002178:	4818      	ldr	r0, [pc, #96]	@ (80021dc <HAL_UART_RxCpltCallback+0x7c>)
 800217a:	f004 f8ac 	bl	80062d6 <HAL_UART_Transmit>

		// turn on the receive interrupt
		HAL_UART_Receive_IT(&huart1, &receive_buffer1, 1);
 800217e:	2201      	movs	r2, #1
 8002180:	4915      	ldr	r1, [pc, #84]	@ (80021d8 <HAL_UART_RxCpltCallback+0x78>)
 8002182:	4816      	ldr	r0, [pc, #88]	@ (80021dc <HAL_UART_RxCpltCallback+0x7c>)
 8002184:	f004 f939 	bl	80063fa <HAL_UART_Receive_IT>
	}

	if(huart->Instance == USART2){
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	4a14      	ldr	r2, [pc, #80]	@ (80021e0 <HAL_UART_RxCpltCallback+0x80>)
 800218e:	4293      	cmp	r3, r2
 8002190:	d11b      	bne.n	80021ca <HAL_UART_RxCpltCallback+0x6a>
		if(receive_buffer2 == 'O') check_esp = 1;
 8002192:	4b14      	ldr	r3, [pc, #80]	@ (80021e4 <HAL_UART_RxCpltCallback+0x84>)
 8002194:	781b      	ldrb	r3, [r3, #0]
 8002196:	2b4f      	cmp	r3, #79	@ 0x4f
 8002198:	d103      	bne.n	80021a2 <HAL_UART_RxCpltCallback+0x42>
 800219a:	4b13      	ldr	r3, [pc, #76]	@ (80021e8 <HAL_UART_RxCpltCallback+0x88>)
 800219c:	2201      	movs	r2, #1
 800219e:	701a      	strb	r2, [r3, #0]
 80021a0:	e00e      	b.n	80021c0 <HAL_UART_RxCpltCallback+0x60>
		else if(receive_buffer2 == 'a') light_status = 0;
 80021a2:	4b10      	ldr	r3, [pc, #64]	@ (80021e4 <HAL_UART_RxCpltCallback+0x84>)
 80021a4:	781b      	ldrb	r3, [r3, #0]
 80021a6:	2b61      	cmp	r3, #97	@ 0x61
 80021a8:	d103      	bne.n	80021b2 <HAL_UART_RxCpltCallback+0x52>
 80021aa:	4b10      	ldr	r3, [pc, #64]	@ (80021ec <HAL_UART_RxCpltCallback+0x8c>)
 80021ac:	2200      	movs	r2, #0
 80021ae:	701a      	strb	r2, [r3, #0]
 80021b0:	e006      	b.n	80021c0 <HAL_UART_RxCpltCallback+0x60>
		else if(receive_buffer2 == 'A') light_status = 1;
 80021b2:	4b0c      	ldr	r3, [pc, #48]	@ (80021e4 <HAL_UART_RxCpltCallback+0x84>)
 80021b4:	781b      	ldrb	r3, [r3, #0]
 80021b6:	2b41      	cmp	r3, #65	@ 0x41
 80021b8:	d102      	bne.n	80021c0 <HAL_UART_RxCpltCallback+0x60>
 80021ba:	4b0c      	ldr	r3, [pc, #48]	@ (80021ec <HAL_UART_RxCpltCallback+0x8c>)
 80021bc:	2201      	movs	r2, #1
 80021be:	701a      	strb	r2, [r3, #0]
		HAL_UART_Receive_IT(&huart2, &receive_buffer2, 1);
 80021c0:	2201      	movs	r2, #1
 80021c2:	4908      	ldr	r1, [pc, #32]	@ (80021e4 <HAL_UART_RxCpltCallback+0x84>)
 80021c4:	480a      	ldr	r0, [pc, #40]	@ (80021f0 <HAL_UART_RxCpltCallback+0x90>)
 80021c6:	f004 f918 	bl	80063fa <HAL_UART_Receive_IT>
	}
}
 80021ca:	bf00      	nop
 80021cc:	3708      	adds	r7, #8
 80021ce:	46bd      	mov	sp, r7
 80021d0:	bd80      	pop	{r7, pc}
 80021d2:	bf00      	nop
 80021d4:	40011000 	.word	0x40011000
 80021d8:	200003ac 	.word	0x200003ac
 80021dc:	200003b0 	.word	0x200003b0
 80021e0:	40004400 	.word	0x40004400
 80021e4:	200003ad 	.word	0x200003ad
 80021e8:	200003ae 	.word	0x200003ae
 80021ec:	20000200 	.word	0x20000200
 80021f0:	200003f4 	.word	0x200003f4

080021f4 <uart_EspCheck>:

uint8_t uart_EspCheck(){
 80021f4:	b480      	push	{r7}
 80021f6:	af00      	add	r7, sp, #0
	if(check_esp == 1)
 80021f8:	4b05      	ldr	r3, [pc, #20]	@ (8002210 <uart_EspCheck+0x1c>)
 80021fa:	781b      	ldrb	r3, [r3, #0]
 80021fc:	2b01      	cmp	r3, #1
 80021fe:	d101      	bne.n	8002204 <uart_EspCheck+0x10>
	{
		return 1;
 8002200:	2301      	movs	r3, #1
 8002202:	e000      	b.n	8002206 <uart_EspCheck+0x12>
	}
	return 0;
 8002204:	2300      	movs	r3, #0
}
 8002206:	4618      	mov	r0, r3
 8002208:	46bd      	mov	sp, r7
 800220a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220e:	4770      	bx	lr
 8002210:	200003ae 	.word	0x200003ae

08002214 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002218:	4b11      	ldr	r3, [pc, #68]	@ (8002260 <MX_USART1_UART_Init+0x4c>)
 800221a:	4a12      	ldr	r2, [pc, #72]	@ (8002264 <MX_USART1_UART_Init+0x50>)
 800221c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800221e:	4b10      	ldr	r3, [pc, #64]	@ (8002260 <MX_USART1_UART_Init+0x4c>)
 8002220:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002224:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002226:	4b0e      	ldr	r3, [pc, #56]	@ (8002260 <MX_USART1_UART_Init+0x4c>)
 8002228:	2200      	movs	r2, #0
 800222a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800222c:	4b0c      	ldr	r3, [pc, #48]	@ (8002260 <MX_USART1_UART_Init+0x4c>)
 800222e:	2200      	movs	r2, #0
 8002230:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002232:	4b0b      	ldr	r3, [pc, #44]	@ (8002260 <MX_USART1_UART_Init+0x4c>)
 8002234:	2200      	movs	r2, #0
 8002236:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002238:	4b09      	ldr	r3, [pc, #36]	@ (8002260 <MX_USART1_UART_Init+0x4c>)
 800223a:	220c      	movs	r2, #12
 800223c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800223e:	4b08      	ldr	r3, [pc, #32]	@ (8002260 <MX_USART1_UART_Init+0x4c>)
 8002240:	2200      	movs	r2, #0
 8002242:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002244:	4b06      	ldr	r3, [pc, #24]	@ (8002260 <MX_USART1_UART_Init+0x4c>)
 8002246:	2200      	movs	r2, #0
 8002248:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800224a:	4805      	ldr	r0, [pc, #20]	@ (8002260 <MX_USART1_UART_Init+0x4c>)
 800224c:	f003 fff6 	bl	800623c <HAL_UART_Init>
 8002250:	4603      	mov	r3, r0
 8002252:	2b00      	cmp	r3, #0
 8002254:	d001      	beq.n	800225a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002256:	f7ff fbc7 	bl	80019e8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800225a:	bf00      	nop
 800225c:	bd80      	pop	{r7, pc}
 800225e:	bf00      	nop
 8002260:	200003b0 	.word	0x200003b0
 8002264:	40011000 	.word	0x40011000

08002268 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800226c:	4b11      	ldr	r3, [pc, #68]	@ (80022b4 <MX_USART2_UART_Init+0x4c>)
 800226e:	4a12      	ldr	r2, [pc, #72]	@ (80022b8 <MX_USART2_UART_Init+0x50>)
 8002270:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002272:	4b10      	ldr	r3, [pc, #64]	@ (80022b4 <MX_USART2_UART_Init+0x4c>)
 8002274:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002278:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800227a:	4b0e      	ldr	r3, [pc, #56]	@ (80022b4 <MX_USART2_UART_Init+0x4c>)
 800227c:	2200      	movs	r2, #0
 800227e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002280:	4b0c      	ldr	r3, [pc, #48]	@ (80022b4 <MX_USART2_UART_Init+0x4c>)
 8002282:	2200      	movs	r2, #0
 8002284:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002286:	4b0b      	ldr	r3, [pc, #44]	@ (80022b4 <MX_USART2_UART_Init+0x4c>)
 8002288:	2200      	movs	r2, #0
 800228a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800228c:	4b09      	ldr	r3, [pc, #36]	@ (80022b4 <MX_USART2_UART_Init+0x4c>)
 800228e:	220c      	movs	r2, #12
 8002290:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002292:	4b08      	ldr	r3, [pc, #32]	@ (80022b4 <MX_USART2_UART_Init+0x4c>)
 8002294:	2200      	movs	r2, #0
 8002296:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002298:	4b06      	ldr	r3, [pc, #24]	@ (80022b4 <MX_USART2_UART_Init+0x4c>)
 800229a:	2200      	movs	r2, #0
 800229c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800229e:	4805      	ldr	r0, [pc, #20]	@ (80022b4 <MX_USART2_UART_Init+0x4c>)
 80022a0:	f003 ffcc 	bl	800623c <HAL_UART_Init>
 80022a4:	4603      	mov	r3, r0
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d001      	beq.n	80022ae <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80022aa:	f7ff fb9d 	bl	80019e8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80022ae:	bf00      	nop
 80022b0:	bd80      	pop	{r7, pc}
 80022b2:	bf00      	nop
 80022b4:	200003f4 	.word	0x200003f4
 80022b8:	40004400 	.word	0x40004400

080022bc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	b08c      	sub	sp, #48	@ 0x30
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022c4:	f107 031c 	add.w	r3, r7, #28
 80022c8:	2200      	movs	r2, #0
 80022ca:	601a      	str	r2, [r3, #0]
 80022cc:	605a      	str	r2, [r3, #4]
 80022ce:	609a      	str	r2, [r3, #8]
 80022d0:	60da      	str	r2, [r3, #12]
 80022d2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	4a3a      	ldr	r2, [pc, #232]	@ (80023c4 <HAL_UART_MspInit+0x108>)
 80022da:	4293      	cmp	r3, r2
 80022dc:	d135      	bne.n	800234a <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80022de:	2300      	movs	r3, #0
 80022e0:	61bb      	str	r3, [r7, #24]
 80022e2:	4b39      	ldr	r3, [pc, #228]	@ (80023c8 <HAL_UART_MspInit+0x10c>)
 80022e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022e6:	4a38      	ldr	r2, [pc, #224]	@ (80023c8 <HAL_UART_MspInit+0x10c>)
 80022e8:	f043 0310 	orr.w	r3, r3, #16
 80022ec:	6453      	str	r3, [r2, #68]	@ 0x44
 80022ee:	4b36      	ldr	r3, [pc, #216]	@ (80023c8 <HAL_UART_MspInit+0x10c>)
 80022f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022f2:	f003 0310 	and.w	r3, r3, #16
 80022f6:	61bb      	str	r3, [r7, #24]
 80022f8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022fa:	2300      	movs	r3, #0
 80022fc:	617b      	str	r3, [r7, #20]
 80022fe:	4b32      	ldr	r3, [pc, #200]	@ (80023c8 <HAL_UART_MspInit+0x10c>)
 8002300:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002302:	4a31      	ldr	r2, [pc, #196]	@ (80023c8 <HAL_UART_MspInit+0x10c>)
 8002304:	f043 0301 	orr.w	r3, r3, #1
 8002308:	6313      	str	r3, [r2, #48]	@ 0x30
 800230a:	4b2f      	ldr	r3, [pc, #188]	@ (80023c8 <HAL_UART_MspInit+0x10c>)
 800230c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800230e:	f003 0301 	and.w	r3, r3, #1
 8002312:	617b      	str	r3, [r7, #20]
 8002314:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002316:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800231a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800231c:	2302      	movs	r3, #2
 800231e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002320:	2300      	movs	r3, #0
 8002322:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002324:	2303      	movs	r3, #3
 8002326:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002328:	2307      	movs	r3, #7
 800232a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800232c:	f107 031c 	add.w	r3, r7, #28
 8002330:	4619      	mov	r1, r3
 8002332:	4826      	ldr	r0, [pc, #152]	@ (80023cc <HAL_UART_MspInit+0x110>)
 8002334:	f001 fa34 	bl	80037a0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002338:	2200      	movs	r2, #0
 800233a:	2100      	movs	r1, #0
 800233c:	2025      	movs	r0, #37	@ 0x25
 800233e:	f000 fdf6 	bl	8002f2e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002342:	2025      	movs	r0, #37	@ 0x25
 8002344:	f000 fe0f 	bl	8002f66 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002348:	e038      	b.n	80023bc <HAL_UART_MspInit+0x100>
  else if(uartHandle->Instance==USART2)
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	4a20      	ldr	r2, [pc, #128]	@ (80023d0 <HAL_UART_MspInit+0x114>)
 8002350:	4293      	cmp	r3, r2
 8002352:	d133      	bne.n	80023bc <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002354:	2300      	movs	r3, #0
 8002356:	613b      	str	r3, [r7, #16]
 8002358:	4b1b      	ldr	r3, [pc, #108]	@ (80023c8 <HAL_UART_MspInit+0x10c>)
 800235a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800235c:	4a1a      	ldr	r2, [pc, #104]	@ (80023c8 <HAL_UART_MspInit+0x10c>)
 800235e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002362:	6413      	str	r3, [r2, #64]	@ 0x40
 8002364:	4b18      	ldr	r3, [pc, #96]	@ (80023c8 <HAL_UART_MspInit+0x10c>)
 8002366:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002368:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800236c:	613b      	str	r3, [r7, #16]
 800236e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002370:	2300      	movs	r3, #0
 8002372:	60fb      	str	r3, [r7, #12]
 8002374:	4b14      	ldr	r3, [pc, #80]	@ (80023c8 <HAL_UART_MspInit+0x10c>)
 8002376:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002378:	4a13      	ldr	r2, [pc, #76]	@ (80023c8 <HAL_UART_MspInit+0x10c>)
 800237a:	f043 0301 	orr.w	r3, r3, #1
 800237e:	6313      	str	r3, [r2, #48]	@ 0x30
 8002380:	4b11      	ldr	r3, [pc, #68]	@ (80023c8 <HAL_UART_MspInit+0x10c>)
 8002382:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002384:	f003 0301 	and.w	r3, r3, #1
 8002388:	60fb      	str	r3, [r7, #12]
 800238a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800238c:	230c      	movs	r3, #12
 800238e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002390:	2302      	movs	r3, #2
 8002392:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002394:	2300      	movs	r3, #0
 8002396:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002398:	2303      	movs	r3, #3
 800239a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800239c:	2307      	movs	r3, #7
 800239e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023a0:	f107 031c 	add.w	r3, r7, #28
 80023a4:	4619      	mov	r1, r3
 80023a6:	4809      	ldr	r0, [pc, #36]	@ (80023cc <HAL_UART_MspInit+0x110>)
 80023a8:	f001 f9fa 	bl	80037a0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80023ac:	2200      	movs	r2, #0
 80023ae:	2100      	movs	r1, #0
 80023b0:	2026      	movs	r0, #38	@ 0x26
 80023b2:	f000 fdbc 	bl	8002f2e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80023b6:	2026      	movs	r0, #38	@ 0x26
 80023b8:	f000 fdd5 	bl	8002f66 <HAL_NVIC_EnableIRQ>
}
 80023bc:	bf00      	nop
 80023be:	3730      	adds	r7, #48	@ 0x30
 80023c0:	46bd      	mov	sp, r7
 80023c2:	bd80      	pop	{r7, pc}
 80023c4:	40011000 	.word	0x40011000
 80023c8:	40023800 	.word	0x40023800
 80023cc:	40020000 	.word	0x40020000
 80023d0:	40004400 	.word	0x40004400

080023d4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80023d4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800240c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80023d8:	480d      	ldr	r0, [pc, #52]	@ (8002410 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80023da:	490e      	ldr	r1, [pc, #56]	@ (8002414 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80023dc:	4a0e      	ldr	r2, [pc, #56]	@ (8002418 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80023de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80023e0:	e002      	b.n	80023e8 <LoopCopyDataInit>

080023e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80023e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80023e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80023e6:	3304      	adds	r3, #4

080023e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80023e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80023ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80023ec:	d3f9      	bcc.n	80023e2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80023ee:	4a0b      	ldr	r2, [pc, #44]	@ (800241c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80023f0:	4c0b      	ldr	r4, [pc, #44]	@ (8002420 <LoopFillZerobss+0x26>)
  movs r3, #0
 80023f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80023f4:	e001      	b.n	80023fa <LoopFillZerobss>

080023f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80023f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80023f8:	3204      	adds	r2, #4

080023fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80023fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80023fc:	d3fb      	bcc.n	80023f6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80023fe:	f7ff fcad 	bl	8001d5c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002402:	f005 f88d 	bl	8007520 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002406:	f7ff fa0f 	bl	8001828 <main>
  bx  lr    
 800240a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800240c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002410:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002414:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 8002418:	0800ae3c 	.word	0x0800ae3c
  ldr r2, =_sbss
 800241c:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 8002420:	20000584 	.word	0x20000584

08002424 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002424:	e7fe      	b.n	8002424 <ADC_IRQHandler>
	...

08002428 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800242c:	4b0e      	ldr	r3, [pc, #56]	@ (8002468 <HAL_Init+0x40>)
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	4a0d      	ldr	r2, [pc, #52]	@ (8002468 <HAL_Init+0x40>)
 8002432:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002436:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002438:	4b0b      	ldr	r3, [pc, #44]	@ (8002468 <HAL_Init+0x40>)
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	4a0a      	ldr	r2, [pc, #40]	@ (8002468 <HAL_Init+0x40>)
 800243e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002442:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002444:	4b08      	ldr	r3, [pc, #32]	@ (8002468 <HAL_Init+0x40>)
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	4a07      	ldr	r2, [pc, #28]	@ (8002468 <HAL_Init+0x40>)
 800244a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800244e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002450:	2003      	movs	r0, #3
 8002452:	f000 fd61 	bl	8002f18 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002456:	200f      	movs	r0, #15
 8002458:	f000 f808 	bl	800246c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800245c:	f7ff fbc8 	bl	8001bf0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002460:	2300      	movs	r3, #0
}
 8002462:	4618      	mov	r0, r3
 8002464:	bd80      	pop	{r7, pc}
 8002466:	bf00      	nop
 8002468:	40023c00 	.word	0x40023c00

0800246c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	b082      	sub	sp, #8
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002474:	4b12      	ldr	r3, [pc, #72]	@ (80024c0 <HAL_InitTick+0x54>)
 8002476:	681a      	ldr	r2, [r3, #0]
 8002478:	4b12      	ldr	r3, [pc, #72]	@ (80024c4 <HAL_InitTick+0x58>)
 800247a:	781b      	ldrb	r3, [r3, #0]
 800247c:	4619      	mov	r1, r3
 800247e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002482:	fbb3 f3f1 	udiv	r3, r3, r1
 8002486:	fbb2 f3f3 	udiv	r3, r2, r3
 800248a:	4618      	mov	r0, r3
 800248c:	f000 fd79 	bl	8002f82 <HAL_SYSTICK_Config>
 8002490:	4603      	mov	r3, r0
 8002492:	2b00      	cmp	r3, #0
 8002494:	d001      	beq.n	800249a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002496:	2301      	movs	r3, #1
 8002498:	e00e      	b.n	80024b8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	2b0f      	cmp	r3, #15
 800249e:	d80a      	bhi.n	80024b6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80024a0:	2200      	movs	r2, #0
 80024a2:	6879      	ldr	r1, [r7, #4]
 80024a4:	f04f 30ff 	mov.w	r0, #4294967295
 80024a8:	f000 fd41 	bl	8002f2e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80024ac:	4a06      	ldr	r2, [pc, #24]	@ (80024c8 <HAL_InitTick+0x5c>)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80024b2:	2300      	movs	r3, #0
 80024b4:	e000      	b.n	80024b8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80024b6:	2301      	movs	r3, #1
}
 80024b8:	4618      	mov	r0, r3
 80024ba:	3708      	adds	r7, #8
 80024bc:	46bd      	mov	sp, r7
 80024be:	bd80      	pop	{r7, pc}
 80024c0:	20000008 	.word	0x20000008
 80024c4:	20000010 	.word	0x20000010
 80024c8:	2000000c 	.word	0x2000000c

080024cc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80024cc:	b480      	push	{r7}
 80024ce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80024d0:	4b06      	ldr	r3, [pc, #24]	@ (80024ec <HAL_IncTick+0x20>)
 80024d2:	781b      	ldrb	r3, [r3, #0]
 80024d4:	461a      	mov	r2, r3
 80024d6:	4b06      	ldr	r3, [pc, #24]	@ (80024f0 <HAL_IncTick+0x24>)
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	4413      	add	r3, r2
 80024dc:	4a04      	ldr	r2, [pc, #16]	@ (80024f0 <HAL_IncTick+0x24>)
 80024de:	6013      	str	r3, [r2, #0]
}
 80024e0:	bf00      	nop
 80024e2:	46bd      	mov	sp, r7
 80024e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e8:	4770      	bx	lr
 80024ea:	bf00      	nop
 80024ec:	20000010 	.word	0x20000010
 80024f0:	20000438 	.word	0x20000438

080024f4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80024f4:	b480      	push	{r7}
 80024f6:	af00      	add	r7, sp, #0
  return uwTick;
 80024f8:	4b03      	ldr	r3, [pc, #12]	@ (8002508 <HAL_GetTick+0x14>)
 80024fa:	681b      	ldr	r3, [r3, #0]
}
 80024fc:	4618      	mov	r0, r3
 80024fe:	46bd      	mov	sp, r7
 8002500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002504:	4770      	bx	lr
 8002506:	bf00      	nop
 8002508:	20000438 	.word	0x20000438

0800250c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800250c:	b580      	push	{r7, lr}
 800250e:	b084      	sub	sp, #16
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002514:	f7ff ffee 	bl	80024f4 <HAL_GetTick>
 8002518:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002524:	d005      	beq.n	8002532 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002526:	4b0a      	ldr	r3, [pc, #40]	@ (8002550 <HAL_Delay+0x44>)
 8002528:	781b      	ldrb	r3, [r3, #0]
 800252a:	461a      	mov	r2, r3
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	4413      	add	r3, r2
 8002530:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002532:	bf00      	nop
 8002534:	f7ff ffde 	bl	80024f4 <HAL_GetTick>
 8002538:	4602      	mov	r2, r0
 800253a:	68bb      	ldr	r3, [r7, #8]
 800253c:	1ad3      	subs	r3, r2, r3
 800253e:	68fa      	ldr	r2, [r7, #12]
 8002540:	429a      	cmp	r2, r3
 8002542:	d8f7      	bhi.n	8002534 <HAL_Delay+0x28>
  {
  }
}
 8002544:	bf00      	nop
 8002546:	bf00      	nop
 8002548:	3710      	adds	r7, #16
 800254a:	46bd      	mov	sp, r7
 800254c:	bd80      	pop	{r7, pc}
 800254e:	bf00      	nop
 8002550:	20000010 	.word	0x20000010

08002554 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	b084      	sub	sp, #16
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800255c:	2300      	movs	r3, #0
 800255e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	2b00      	cmp	r3, #0
 8002564:	d101      	bne.n	800256a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002566:	2301      	movs	r3, #1
 8002568:	e033      	b.n	80025d2 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800256e:	2b00      	cmp	r3, #0
 8002570:	d109      	bne.n	8002586 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002572:	6878      	ldr	r0, [r7, #4]
 8002574:	f7fe f87e 	bl	8000674 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	2200      	movs	r2, #0
 800257c:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	2200      	movs	r2, #0
 8002582:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800258a:	f003 0310 	and.w	r3, r3, #16
 800258e:	2b00      	cmp	r3, #0
 8002590:	d118      	bne.n	80025c4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002596:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800259a:	f023 0302 	bic.w	r3, r3, #2
 800259e:	f043 0202 	orr.w	r2, r3, #2
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80025a6:	6878      	ldr	r0, [r7, #4]
 80025a8:	f000 fa68 	bl	8002a7c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	2200      	movs	r2, #0
 80025b0:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025b6:	f023 0303 	bic.w	r3, r3, #3
 80025ba:	f043 0201 	orr.w	r2, r3, #1
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	641a      	str	r2, [r3, #64]	@ 0x40
 80025c2:	e001      	b.n	80025c8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80025c4:	2301      	movs	r3, #1
 80025c6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	2200      	movs	r2, #0
 80025cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80025d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80025d2:	4618      	mov	r0, r3
 80025d4:	3710      	adds	r7, #16
 80025d6:	46bd      	mov	sp, r7
 80025d8:	bd80      	pop	{r7, pc}
	...

080025dc <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	b086      	sub	sp, #24
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	60f8      	str	r0, [r7, #12]
 80025e4:	60b9      	str	r1, [r7, #8]
 80025e6:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80025e8:	2300      	movs	r3, #0
 80025ea:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80025f2:	2b01      	cmp	r3, #1
 80025f4:	d101      	bne.n	80025fa <HAL_ADC_Start_DMA+0x1e>
 80025f6:	2302      	movs	r3, #2
 80025f8:	e0e9      	b.n	80027ce <HAL_ADC_Start_DMA+0x1f2>
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	2201      	movs	r2, #1
 80025fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	689b      	ldr	r3, [r3, #8]
 8002608:	f003 0301 	and.w	r3, r3, #1
 800260c:	2b01      	cmp	r3, #1
 800260e:	d018      	beq.n	8002642 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	689a      	ldr	r2, [r3, #8]
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f042 0201 	orr.w	r2, r2, #1
 800261e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002620:	4b6d      	ldr	r3, [pc, #436]	@ (80027d8 <HAL_ADC_Start_DMA+0x1fc>)
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	4a6d      	ldr	r2, [pc, #436]	@ (80027dc <HAL_ADC_Start_DMA+0x200>)
 8002626:	fba2 2303 	umull	r2, r3, r2, r3
 800262a:	0c9a      	lsrs	r2, r3, #18
 800262c:	4613      	mov	r3, r2
 800262e:	005b      	lsls	r3, r3, #1
 8002630:	4413      	add	r3, r2
 8002632:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8002634:	e002      	b.n	800263c <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8002636:	693b      	ldr	r3, [r7, #16]
 8002638:	3b01      	subs	r3, #1
 800263a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 800263c:	693b      	ldr	r3, [r7, #16]
 800263e:	2b00      	cmp	r3, #0
 8002640:	d1f9      	bne.n	8002636 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	689b      	ldr	r3, [r3, #8]
 8002648:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800264c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002650:	d107      	bne.n	8002662 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	689a      	ldr	r2, [r3, #8]
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002660:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	689b      	ldr	r3, [r3, #8]
 8002668:	f003 0301 	and.w	r3, r3, #1
 800266c:	2b01      	cmp	r3, #1
 800266e:	f040 80a1 	bne.w	80027b4 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002676:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 800267a:	f023 0301 	bic.w	r3, r3, #1
 800267e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	685b      	ldr	r3, [r3, #4]
 800268c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002690:	2b00      	cmp	r3, #0
 8002692:	d007      	beq.n	80026a4 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002698:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800269c:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026a8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80026ac:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80026b0:	d106      	bne.n	80026c0 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026b6:	f023 0206 	bic.w	r2, r3, #6
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	645a      	str	r2, [r3, #68]	@ 0x44
 80026be:	e002      	b.n	80026c6 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	2200      	movs	r2, #0
 80026c4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	2200      	movs	r2, #0
 80026ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80026ce:	4b44      	ldr	r3, [pc, #272]	@ (80027e0 <HAL_ADC_Start_DMA+0x204>)
 80026d0:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80026d6:	4a43      	ldr	r2, [pc, #268]	@ (80027e4 <HAL_ADC_Start_DMA+0x208>)
 80026d8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80026de:	4a42      	ldr	r2, [pc, #264]	@ (80027e8 <HAL_ADC_Start_DMA+0x20c>)
 80026e0:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80026e6:	4a41      	ldr	r2, [pc, #260]	@ (80027ec <HAL_ADC_Start_DMA+0x210>)
 80026e8:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 80026f2:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	685a      	ldr	r2, [r3, #4]
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8002702:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	689a      	ldr	r2, [r3, #8]
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002712:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	334c      	adds	r3, #76	@ 0x4c
 800271e:	4619      	mov	r1, r3
 8002720:	68ba      	ldr	r2, [r7, #8]
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	f000 fce8 	bl	80030f8 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002728:	697b      	ldr	r3, [r7, #20]
 800272a:	685b      	ldr	r3, [r3, #4]
 800272c:	f003 031f 	and.w	r3, r3, #31
 8002730:	2b00      	cmp	r3, #0
 8002732:	d12a      	bne.n	800278a <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	4a2d      	ldr	r2, [pc, #180]	@ (80027f0 <HAL_ADC_Start_DMA+0x214>)
 800273a:	4293      	cmp	r3, r2
 800273c:	d015      	beq.n	800276a <HAL_ADC_Start_DMA+0x18e>
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	4a2c      	ldr	r2, [pc, #176]	@ (80027f4 <HAL_ADC_Start_DMA+0x218>)
 8002744:	4293      	cmp	r3, r2
 8002746:	d105      	bne.n	8002754 <HAL_ADC_Start_DMA+0x178>
 8002748:	4b25      	ldr	r3, [pc, #148]	@ (80027e0 <HAL_ADC_Start_DMA+0x204>)
 800274a:	685b      	ldr	r3, [r3, #4]
 800274c:	f003 031f 	and.w	r3, r3, #31
 8002750:	2b00      	cmp	r3, #0
 8002752:	d00a      	beq.n	800276a <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	4a27      	ldr	r2, [pc, #156]	@ (80027f8 <HAL_ADC_Start_DMA+0x21c>)
 800275a:	4293      	cmp	r3, r2
 800275c:	d136      	bne.n	80027cc <HAL_ADC_Start_DMA+0x1f0>
 800275e:	4b20      	ldr	r3, [pc, #128]	@ (80027e0 <HAL_ADC_Start_DMA+0x204>)
 8002760:	685b      	ldr	r3, [r3, #4]
 8002762:	f003 0310 	and.w	r3, r3, #16
 8002766:	2b00      	cmp	r3, #0
 8002768:	d130      	bne.n	80027cc <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	689b      	ldr	r3, [r3, #8]
 8002770:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002774:	2b00      	cmp	r3, #0
 8002776:	d129      	bne.n	80027cc <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	689a      	ldr	r2, [r3, #8]
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002786:	609a      	str	r2, [r3, #8]
 8002788:	e020      	b.n	80027cc <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	4a18      	ldr	r2, [pc, #96]	@ (80027f0 <HAL_ADC_Start_DMA+0x214>)
 8002790:	4293      	cmp	r3, r2
 8002792:	d11b      	bne.n	80027cc <HAL_ADC_Start_DMA+0x1f0>
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	689b      	ldr	r3, [r3, #8]
 800279a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d114      	bne.n	80027cc <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	689a      	ldr	r2, [r3, #8]
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80027b0:	609a      	str	r2, [r3, #8]
 80027b2:	e00b      	b.n	80027cc <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027b8:	f043 0210 	orr.w	r2, r3, #16
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027c4:	f043 0201 	orr.w	r2, r3, #1
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	645a      	str	r2, [r3, #68]	@ 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80027cc:	2300      	movs	r3, #0
}
 80027ce:	4618      	mov	r0, r3
 80027d0:	3718      	adds	r7, #24
 80027d2:	46bd      	mov	sp, r7
 80027d4:	bd80      	pop	{r7, pc}
 80027d6:	bf00      	nop
 80027d8:	20000008 	.word	0x20000008
 80027dc:	431bde83 	.word	0x431bde83
 80027e0:	40012300 	.word	0x40012300
 80027e4:	08002c75 	.word	0x08002c75
 80027e8:	08002d2f 	.word	0x08002d2f
 80027ec:	08002d4b 	.word	0x08002d4b
 80027f0:	40012000 	.word	0x40012000
 80027f4:	40012100 	.word	0x40012100
 80027f8:	40012200 	.word	0x40012200

080027fc <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80027fc:	b480      	push	{r7}
 80027fe:	b083      	sub	sp, #12
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8002804:	bf00      	nop
 8002806:	370c      	adds	r7, #12
 8002808:	46bd      	mov	sp, r7
 800280a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280e:	4770      	bx	lr

08002810 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002810:	b480      	push	{r7}
 8002812:	b083      	sub	sp, #12
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8002818:	bf00      	nop
 800281a:	370c      	adds	r7, #12
 800281c:	46bd      	mov	sp, r7
 800281e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002822:	4770      	bx	lr

08002824 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002824:	b480      	push	{r7}
 8002826:	b083      	sub	sp, #12
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 800282c:	bf00      	nop
 800282e:	370c      	adds	r7, #12
 8002830:	46bd      	mov	sp, r7
 8002832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002836:	4770      	bx	lr

08002838 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002838:	b480      	push	{r7}
 800283a:	b085      	sub	sp, #20
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
 8002840:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002842:	2300      	movs	r3, #0
 8002844:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800284c:	2b01      	cmp	r3, #1
 800284e:	d101      	bne.n	8002854 <HAL_ADC_ConfigChannel+0x1c>
 8002850:	2302      	movs	r3, #2
 8002852:	e105      	b.n	8002a60 <HAL_ADC_ConfigChannel+0x228>
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	2201      	movs	r2, #1
 8002858:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800285c:	683b      	ldr	r3, [r7, #0]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	2b09      	cmp	r3, #9
 8002862:	d925      	bls.n	80028b0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	68d9      	ldr	r1, [r3, #12]
 800286a:	683b      	ldr	r3, [r7, #0]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	b29b      	uxth	r3, r3
 8002870:	461a      	mov	r2, r3
 8002872:	4613      	mov	r3, r2
 8002874:	005b      	lsls	r3, r3, #1
 8002876:	4413      	add	r3, r2
 8002878:	3b1e      	subs	r3, #30
 800287a:	2207      	movs	r2, #7
 800287c:	fa02 f303 	lsl.w	r3, r2, r3
 8002880:	43da      	mvns	r2, r3
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	400a      	ands	r2, r1
 8002888:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	68d9      	ldr	r1, [r3, #12]
 8002890:	683b      	ldr	r3, [r7, #0]
 8002892:	689a      	ldr	r2, [r3, #8]
 8002894:	683b      	ldr	r3, [r7, #0]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	b29b      	uxth	r3, r3
 800289a:	4618      	mov	r0, r3
 800289c:	4603      	mov	r3, r0
 800289e:	005b      	lsls	r3, r3, #1
 80028a0:	4403      	add	r3, r0
 80028a2:	3b1e      	subs	r3, #30
 80028a4:	409a      	lsls	r2, r3
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	430a      	orrs	r2, r1
 80028ac:	60da      	str	r2, [r3, #12]
 80028ae:	e022      	b.n	80028f6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	6919      	ldr	r1, [r3, #16]
 80028b6:	683b      	ldr	r3, [r7, #0]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	b29b      	uxth	r3, r3
 80028bc:	461a      	mov	r2, r3
 80028be:	4613      	mov	r3, r2
 80028c0:	005b      	lsls	r3, r3, #1
 80028c2:	4413      	add	r3, r2
 80028c4:	2207      	movs	r2, #7
 80028c6:	fa02 f303 	lsl.w	r3, r2, r3
 80028ca:	43da      	mvns	r2, r3
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	400a      	ands	r2, r1
 80028d2:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	6919      	ldr	r1, [r3, #16]
 80028da:	683b      	ldr	r3, [r7, #0]
 80028dc:	689a      	ldr	r2, [r3, #8]
 80028de:	683b      	ldr	r3, [r7, #0]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	b29b      	uxth	r3, r3
 80028e4:	4618      	mov	r0, r3
 80028e6:	4603      	mov	r3, r0
 80028e8:	005b      	lsls	r3, r3, #1
 80028ea:	4403      	add	r3, r0
 80028ec:	409a      	lsls	r2, r3
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	430a      	orrs	r2, r1
 80028f4:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80028f6:	683b      	ldr	r3, [r7, #0]
 80028f8:	685b      	ldr	r3, [r3, #4]
 80028fa:	2b06      	cmp	r3, #6
 80028fc:	d824      	bhi.n	8002948 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002904:	683b      	ldr	r3, [r7, #0]
 8002906:	685a      	ldr	r2, [r3, #4]
 8002908:	4613      	mov	r3, r2
 800290a:	009b      	lsls	r3, r3, #2
 800290c:	4413      	add	r3, r2
 800290e:	3b05      	subs	r3, #5
 8002910:	221f      	movs	r2, #31
 8002912:	fa02 f303 	lsl.w	r3, r2, r3
 8002916:	43da      	mvns	r2, r3
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	400a      	ands	r2, r1
 800291e:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002926:	683b      	ldr	r3, [r7, #0]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	b29b      	uxth	r3, r3
 800292c:	4618      	mov	r0, r3
 800292e:	683b      	ldr	r3, [r7, #0]
 8002930:	685a      	ldr	r2, [r3, #4]
 8002932:	4613      	mov	r3, r2
 8002934:	009b      	lsls	r3, r3, #2
 8002936:	4413      	add	r3, r2
 8002938:	3b05      	subs	r3, #5
 800293a:	fa00 f203 	lsl.w	r2, r0, r3
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	430a      	orrs	r2, r1
 8002944:	635a      	str	r2, [r3, #52]	@ 0x34
 8002946:	e04c      	b.n	80029e2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002948:	683b      	ldr	r3, [r7, #0]
 800294a:	685b      	ldr	r3, [r3, #4]
 800294c:	2b0c      	cmp	r3, #12
 800294e:	d824      	bhi.n	800299a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002956:	683b      	ldr	r3, [r7, #0]
 8002958:	685a      	ldr	r2, [r3, #4]
 800295a:	4613      	mov	r3, r2
 800295c:	009b      	lsls	r3, r3, #2
 800295e:	4413      	add	r3, r2
 8002960:	3b23      	subs	r3, #35	@ 0x23
 8002962:	221f      	movs	r2, #31
 8002964:	fa02 f303 	lsl.w	r3, r2, r3
 8002968:	43da      	mvns	r2, r3
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	400a      	ands	r2, r1
 8002970:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	b29b      	uxth	r3, r3
 800297e:	4618      	mov	r0, r3
 8002980:	683b      	ldr	r3, [r7, #0]
 8002982:	685a      	ldr	r2, [r3, #4]
 8002984:	4613      	mov	r3, r2
 8002986:	009b      	lsls	r3, r3, #2
 8002988:	4413      	add	r3, r2
 800298a:	3b23      	subs	r3, #35	@ 0x23
 800298c:	fa00 f203 	lsl.w	r2, r0, r3
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	430a      	orrs	r2, r1
 8002996:	631a      	str	r2, [r3, #48]	@ 0x30
 8002998:	e023      	b.n	80029e2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80029a0:	683b      	ldr	r3, [r7, #0]
 80029a2:	685a      	ldr	r2, [r3, #4]
 80029a4:	4613      	mov	r3, r2
 80029a6:	009b      	lsls	r3, r3, #2
 80029a8:	4413      	add	r3, r2
 80029aa:	3b41      	subs	r3, #65	@ 0x41
 80029ac:	221f      	movs	r2, #31
 80029ae:	fa02 f303 	lsl.w	r3, r2, r3
 80029b2:	43da      	mvns	r2, r3
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	400a      	ands	r2, r1
 80029ba:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80029c2:	683b      	ldr	r3, [r7, #0]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	b29b      	uxth	r3, r3
 80029c8:	4618      	mov	r0, r3
 80029ca:	683b      	ldr	r3, [r7, #0]
 80029cc:	685a      	ldr	r2, [r3, #4]
 80029ce:	4613      	mov	r3, r2
 80029d0:	009b      	lsls	r3, r3, #2
 80029d2:	4413      	add	r3, r2
 80029d4:	3b41      	subs	r3, #65	@ 0x41
 80029d6:	fa00 f203 	lsl.w	r2, r0, r3
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	430a      	orrs	r2, r1
 80029e0:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80029e2:	4b22      	ldr	r3, [pc, #136]	@ (8002a6c <HAL_ADC_ConfigChannel+0x234>)
 80029e4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	4a21      	ldr	r2, [pc, #132]	@ (8002a70 <HAL_ADC_ConfigChannel+0x238>)
 80029ec:	4293      	cmp	r3, r2
 80029ee:	d109      	bne.n	8002a04 <HAL_ADC_ConfigChannel+0x1cc>
 80029f0:	683b      	ldr	r3, [r7, #0]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	2b12      	cmp	r3, #18
 80029f6:	d105      	bne.n	8002a04 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	685b      	ldr	r3, [r3, #4]
 80029fc:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	4a19      	ldr	r2, [pc, #100]	@ (8002a70 <HAL_ADC_ConfigChannel+0x238>)
 8002a0a:	4293      	cmp	r3, r2
 8002a0c:	d123      	bne.n	8002a56 <HAL_ADC_ConfigChannel+0x21e>
 8002a0e:	683b      	ldr	r3, [r7, #0]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	2b10      	cmp	r3, #16
 8002a14:	d003      	beq.n	8002a1e <HAL_ADC_ConfigChannel+0x1e6>
 8002a16:	683b      	ldr	r3, [r7, #0]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	2b11      	cmp	r3, #17
 8002a1c:	d11b      	bne.n	8002a56 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	685b      	ldr	r3, [r3, #4]
 8002a22:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002a2a:	683b      	ldr	r3, [r7, #0]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	2b10      	cmp	r3, #16
 8002a30:	d111      	bne.n	8002a56 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002a32:	4b10      	ldr	r3, [pc, #64]	@ (8002a74 <HAL_ADC_ConfigChannel+0x23c>)
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	4a10      	ldr	r2, [pc, #64]	@ (8002a78 <HAL_ADC_ConfigChannel+0x240>)
 8002a38:	fba2 2303 	umull	r2, r3, r2, r3
 8002a3c:	0c9a      	lsrs	r2, r3, #18
 8002a3e:	4613      	mov	r3, r2
 8002a40:	009b      	lsls	r3, r3, #2
 8002a42:	4413      	add	r3, r2
 8002a44:	005b      	lsls	r3, r3, #1
 8002a46:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002a48:	e002      	b.n	8002a50 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8002a4a:	68bb      	ldr	r3, [r7, #8]
 8002a4c:	3b01      	subs	r3, #1
 8002a4e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002a50:	68bb      	ldr	r3, [r7, #8]
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d1f9      	bne.n	8002a4a <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	2200      	movs	r2, #0
 8002a5a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002a5e:	2300      	movs	r3, #0
}
 8002a60:	4618      	mov	r0, r3
 8002a62:	3714      	adds	r7, #20
 8002a64:	46bd      	mov	sp, r7
 8002a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6a:	4770      	bx	lr
 8002a6c:	40012300 	.word	0x40012300
 8002a70:	40012000 	.word	0x40012000
 8002a74:	20000008 	.word	0x20000008
 8002a78:	431bde83 	.word	0x431bde83

08002a7c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002a7c:	b480      	push	{r7}
 8002a7e:	b085      	sub	sp, #20
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002a84:	4b79      	ldr	r3, [pc, #484]	@ (8002c6c <ADC_Init+0x1f0>)
 8002a86:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	685b      	ldr	r3, [r3, #4]
 8002a8c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	685a      	ldr	r2, [r3, #4]
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	685b      	ldr	r3, [r3, #4]
 8002a9c:	431a      	orrs	r2, r3
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	685a      	ldr	r2, [r3, #4]
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002ab0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	6859      	ldr	r1, [r3, #4]
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	691b      	ldr	r3, [r3, #16]
 8002abc:	021a      	lsls	r2, r3, #8
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	430a      	orrs	r2, r1
 8002ac4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	685a      	ldr	r2, [r3, #4]
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8002ad4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	6859      	ldr	r1, [r3, #4]
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	689a      	ldr	r2, [r3, #8]
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	430a      	orrs	r2, r1
 8002ae6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	689a      	ldr	r2, [r3, #8]
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002af6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	6899      	ldr	r1, [r3, #8]
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	68da      	ldr	r2, [r3, #12]
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	430a      	orrs	r2, r1
 8002b08:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b0e:	4a58      	ldr	r2, [pc, #352]	@ (8002c70 <ADC_Init+0x1f4>)
 8002b10:	4293      	cmp	r3, r2
 8002b12:	d022      	beq.n	8002b5a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	689a      	ldr	r2, [r3, #8]
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002b22:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	6899      	ldr	r1, [r3, #8]
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	430a      	orrs	r2, r1
 8002b34:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	689a      	ldr	r2, [r3, #8]
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002b44:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	6899      	ldr	r1, [r3, #8]
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	430a      	orrs	r2, r1
 8002b56:	609a      	str	r2, [r3, #8]
 8002b58:	e00f      	b.n	8002b7a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	689a      	ldr	r2, [r3, #8]
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002b68:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	689a      	ldr	r2, [r3, #8]
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002b78:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	689a      	ldr	r2, [r3, #8]
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f022 0202 	bic.w	r2, r2, #2
 8002b88:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	6899      	ldr	r1, [r3, #8]
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	7e1b      	ldrb	r3, [r3, #24]
 8002b94:	005a      	lsls	r2, r3, #1
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	430a      	orrs	r2, r1
 8002b9c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d01b      	beq.n	8002be0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	685a      	ldr	r2, [r3, #4]
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002bb6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	685a      	ldr	r2, [r3, #4]
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8002bc6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	6859      	ldr	r1, [r3, #4]
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bd2:	3b01      	subs	r3, #1
 8002bd4:	035a      	lsls	r2, r3, #13
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	430a      	orrs	r2, r1
 8002bdc:	605a      	str	r2, [r3, #4]
 8002bde:	e007      	b.n	8002bf0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	685a      	ldr	r2, [r3, #4]
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002bee:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8002bfe:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	69db      	ldr	r3, [r3, #28]
 8002c0a:	3b01      	subs	r3, #1
 8002c0c:	051a      	lsls	r2, r3, #20
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	430a      	orrs	r2, r1
 8002c14:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	689a      	ldr	r2, [r3, #8]
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002c24:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	6899      	ldr	r1, [r3, #8]
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002c32:	025a      	lsls	r2, r3, #9
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	430a      	orrs	r2, r1
 8002c3a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	689a      	ldr	r2, [r3, #8]
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002c4a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	6899      	ldr	r1, [r3, #8]
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	695b      	ldr	r3, [r3, #20]
 8002c56:	029a      	lsls	r2, r3, #10
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	430a      	orrs	r2, r1
 8002c5e:	609a      	str	r2, [r3, #8]
}
 8002c60:	bf00      	nop
 8002c62:	3714      	adds	r7, #20
 8002c64:	46bd      	mov	sp, r7
 8002c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6a:	4770      	bx	lr
 8002c6c:	40012300 	.word	0x40012300
 8002c70:	0f000001 	.word	0x0f000001

08002c74 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	b084      	sub	sp, #16
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c80:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c86:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d13c      	bne.n	8002d08 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c92:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	689b      	ldr	r3, [r3, #8]
 8002ca0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d12b      	bne.n	8002d00 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d127      	bne.n	8002d00 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cb6:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d006      	beq.n	8002ccc <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	689b      	ldr	r3, [r3, #8]
 8002cc4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d119      	bne.n	8002d00 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	685a      	ldr	r2, [r3, #4]
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f022 0220 	bic.w	r2, r2, #32
 8002cda:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ce0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	641a      	str	r2, [r3, #64]	@ 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cec:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d105      	bne.n	8002d00 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cf8:	f043 0201 	orr.w	r2, r3, #1
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002d00:	68f8      	ldr	r0, [r7, #12]
 8002d02:	f7ff fd7b 	bl	80027fc <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002d06:	e00e      	b.n	8002d26 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d0c:	f003 0310 	and.w	r3, r3, #16
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d003      	beq.n	8002d1c <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8002d14:	68f8      	ldr	r0, [r7, #12]
 8002d16:	f7ff fd85 	bl	8002824 <HAL_ADC_ErrorCallback>
}
 8002d1a:	e004      	b.n	8002d26 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d20:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d22:	6878      	ldr	r0, [r7, #4]
 8002d24:	4798      	blx	r3
}
 8002d26:	bf00      	nop
 8002d28:	3710      	adds	r7, #16
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	bd80      	pop	{r7, pc}

08002d2e <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002d2e:	b580      	push	{r7, lr}
 8002d30:	b084      	sub	sp, #16
 8002d32:	af00      	add	r7, sp, #0
 8002d34:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d3a:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002d3c:	68f8      	ldr	r0, [r7, #12]
 8002d3e:	f7ff fd67 	bl	8002810 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002d42:	bf00      	nop
 8002d44:	3710      	adds	r7, #16
 8002d46:	46bd      	mov	sp, r7
 8002d48:	bd80      	pop	{r7, pc}

08002d4a <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002d4a:	b580      	push	{r7, lr}
 8002d4c:	b084      	sub	sp, #16
 8002d4e:	af00      	add	r7, sp, #0
 8002d50:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d56:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	2240      	movs	r2, #64	@ 0x40
 8002d5c:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d62:	f043 0204 	orr.w	r2, r3, #4
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	645a      	str	r2, [r3, #68]	@ 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002d6a:	68f8      	ldr	r0, [r7, #12]
 8002d6c:	f7ff fd5a 	bl	8002824 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002d70:	bf00      	nop
 8002d72:	3710      	adds	r7, #16
 8002d74:	46bd      	mov	sp, r7
 8002d76:	bd80      	pop	{r7, pc}

08002d78 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d78:	b480      	push	{r7}
 8002d7a:	b085      	sub	sp, #20
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	f003 0307 	and.w	r3, r3, #7
 8002d86:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002d88:	4b0c      	ldr	r3, [pc, #48]	@ (8002dbc <__NVIC_SetPriorityGrouping+0x44>)
 8002d8a:	68db      	ldr	r3, [r3, #12]
 8002d8c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002d8e:	68ba      	ldr	r2, [r7, #8]
 8002d90:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002d94:	4013      	ands	r3, r2
 8002d96:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002d9c:	68bb      	ldr	r3, [r7, #8]
 8002d9e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002da0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002da4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002da8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002daa:	4a04      	ldr	r2, [pc, #16]	@ (8002dbc <__NVIC_SetPriorityGrouping+0x44>)
 8002dac:	68bb      	ldr	r3, [r7, #8]
 8002dae:	60d3      	str	r3, [r2, #12]
}
 8002db0:	bf00      	nop
 8002db2:	3714      	adds	r7, #20
 8002db4:	46bd      	mov	sp, r7
 8002db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dba:	4770      	bx	lr
 8002dbc:	e000ed00 	.word	0xe000ed00

08002dc0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002dc0:	b480      	push	{r7}
 8002dc2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002dc4:	4b04      	ldr	r3, [pc, #16]	@ (8002dd8 <__NVIC_GetPriorityGrouping+0x18>)
 8002dc6:	68db      	ldr	r3, [r3, #12]
 8002dc8:	0a1b      	lsrs	r3, r3, #8
 8002dca:	f003 0307 	and.w	r3, r3, #7
}
 8002dce:	4618      	mov	r0, r3
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd6:	4770      	bx	lr
 8002dd8:	e000ed00 	.word	0xe000ed00

08002ddc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ddc:	b480      	push	{r7}
 8002dde:	b083      	sub	sp, #12
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	4603      	mov	r3, r0
 8002de4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002de6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	db0b      	blt.n	8002e06 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002dee:	79fb      	ldrb	r3, [r7, #7]
 8002df0:	f003 021f 	and.w	r2, r3, #31
 8002df4:	4907      	ldr	r1, [pc, #28]	@ (8002e14 <__NVIC_EnableIRQ+0x38>)
 8002df6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dfa:	095b      	lsrs	r3, r3, #5
 8002dfc:	2001      	movs	r0, #1
 8002dfe:	fa00 f202 	lsl.w	r2, r0, r2
 8002e02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002e06:	bf00      	nop
 8002e08:	370c      	adds	r7, #12
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e10:	4770      	bx	lr
 8002e12:	bf00      	nop
 8002e14:	e000e100 	.word	0xe000e100

08002e18 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002e18:	b480      	push	{r7}
 8002e1a:	b083      	sub	sp, #12
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	4603      	mov	r3, r0
 8002e20:	6039      	str	r1, [r7, #0]
 8002e22:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	db0a      	blt.n	8002e42 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e2c:	683b      	ldr	r3, [r7, #0]
 8002e2e:	b2da      	uxtb	r2, r3
 8002e30:	490c      	ldr	r1, [pc, #48]	@ (8002e64 <__NVIC_SetPriority+0x4c>)
 8002e32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e36:	0112      	lsls	r2, r2, #4
 8002e38:	b2d2      	uxtb	r2, r2
 8002e3a:	440b      	add	r3, r1
 8002e3c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002e40:	e00a      	b.n	8002e58 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e42:	683b      	ldr	r3, [r7, #0]
 8002e44:	b2da      	uxtb	r2, r3
 8002e46:	4908      	ldr	r1, [pc, #32]	@ (8002e68 <__NVIC_SetPriority+0x50>)
 8002e48:	79fb      	ldrb	r3, [r7, #7]
 8002e4a:	f003 030f 	and.w	r3, r3, #15
 8002e4e:	3b04      	subs	r3, #4
 8002e50:	0112      	lsls	r2, r2, #4
 8002e52:	b2d2      	uxtb	r2, r2
 8002e54:	440b      	add	r3, r1
 8002e56:	761a      	strb	r2, [r3, #24]
}
 8002e58:	bf00      	nop
 8002e5a:	370c      	adds	r7, #12
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e62:	4770      	bx	lr
 8002e64:	e000e100 	.word	0xe000e100
 8002e68:	e000ed00 	.word	0xe000ed00

08002e6c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e6c:	b480      	push	{r7}
 8002e6e:	b089      	sub	sp, #36	@ 0x24
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	60f8      	str	r0, [r7, #12]
 8002e74:	60b9      	str	r1, [r7, #8]
 8002e76:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	f003 0307 	and.w	r3, r3, #7
 8002e7e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002e80:	69fb      	ldr	r3, [r7, #28]
 8002e82:	f1c3 0307 	rsb	r3, r3, #7
 8002e86:	2b04      	cmp	r3, #4
 8002e88:	bf28      	it	cs
 8002e8a:	2304      	movcs	r3, #4
 8002e8c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002e8e:	69fb      	ldr	r3, [r7, #28]
 8002e90:	3304      	adds	r3, #4
 8002e92:	2b06      	cmp	r3, #6
 8002e94:	d902      	bls.n	8002e9c <NVIC_EncodePriority+0x30>
 8002e96:	69fb      	ldr	r3, [r7, #28]
 8002e98:	3b03      	subs	r3, #3
 8002e9a:	e000      	b.n	8002e9e <NVIC_EncodePriority+0x32>
 8002e9c:	2300      	movs	r3, #0
 8002e9e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ea0:	f04f 32ff 	mov.w	r2, #4294967295
 8002ea4:	69bb      	ldr	r3, [r7, #24]
 8002ea6:	fa02 f303 	lsl.w	r3, r2, r3
 8002eaa:	43da      	mvns	r2, r3
 8002eac:	68bb      	ldr	r3, [r7, #8]
 8002eae:	401a      	ands	r2, r3
 8002eb0:	697b      	ldr	r3, [r7, #20]
 8002eb2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002eb4:	f04f 31ff 	mov.w	r1, #4294967295
 8002eb8:	697b      	ldr	r3, [r7, #20]
 8002eba:	fa01 f303 	lsl.w	r3, r1, r3
 8002ebe:	43d9      	mvns	r1, r3
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ec4:	4313      	orrs	r3, r2
         );
}
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	3724      	adds	r7, #36	@ 0x24
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed0:	4770      	bx	lr
	...

08002ed4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	b082      	sub	sp, #8
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	3b01      	subs	r3, #1
 8002ee0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002ee4:	d301      	bcc.n	8002eea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002ee6:	2301      	movs	r3, #1
 8002ee8:	e00f      	b.n	8002f0a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002eea:	4a0a      	ldr	r2, [pc, #40]	@ (8002f14 <SysTick_Config+0x40>)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	3b01      	subs	r3, #1
 8002ef0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002ef2:	210f      	movs	r1, #15
 8002ef4:	f04f 30ff 	mov.w	r0, #4294967295
 8002ef8:	f7ff ff8e 	bl	8002e18 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002efc:	4b05      	ldr	r3, [pc, #20]	@ (8002f14 <SysTick_Config+0x40>)
 8002efe:	2200      	movs	r2, #0
 8002f00:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002f02:	4b04      	ldr	r3, [pc, #16]	@ (8002f14 <SysTick_Config+0x40>)
 8002f04:	2207      	movs	r2, #7
 8002f06:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002f08:	2300      	movs	r3, #0
}
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	3708      	adds	r7, #8
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	bd80      	pop	{r7, pc}
 8002f12:	bf00      	nop
 8002f14:	e000e010 	.word	0xe000e010

08002f18 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	b082      	sub	sp, #8
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002f20:	6878      	ldr	r0, [r7, #4]
 8002f22:	f7ff ff29 	bl	8002d78 <__NVIC_SetPriorityGrouping>
}
 8002f26:	bf00      	nop
 8002f28:	3708      	adds	r7, #8
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	bd80      	pop	{r7, pc}

08002f2e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002f2e:	b580      	push	{r7, lr}
 8002f30:	b086      	sub	sp, #24
 8002f32:	af00      	add	r7, sp, #0
 8002f34:	4603      	mov	r3, r0
 8002f36:	60b9      	str	r1, [r7, #8]
 8002f38:	607a      	str	r2, [r7, #4]
 8002f3a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002f3c:	2300      	movs	r3, #0
 8002f3e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002f40:	f7ff ff3e 	bl	8002dc0 <__NVIC_GetPriorityGrouping>
 8002f44:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002f46:	687a      	ldr	r2, [r7, #4]
 8002f48:	68b9      	ldr	r1, [r7, #8]
 8002f4a:	6978      	ldr	r0, [r7, #20]
 8002f4c:	f7ff ff8e 	bl	8002e6c <NVIC_EncodePriority>
 8002f50:	4602      	mov	r2, r0
 8002f52:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f56:	4611      	mov	r1, r2
 8002f58:	4618      	mov	r0, r3
 8002f5a:	f7ff ff5d 	bl	8002e18 <__NVIC_SetPriority>
}
 8002f5e:	bf00      	nop
 8002f60:	3718      	adds	r7, #24
 8002f62:	46bd      	mov	sp, r7
 8002f64:	bd80      	pop	{r7, pc}

08002f66 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f66:	b580      	push	{r7, lr}
 8002f68:	b082      	sub	sp, #8
 8002f6a:	af00      	add	r7, sp, #0
 8002f6c:	4603      	mov	r3, r0
 8002f6e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002f70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f74:	4618      	mov	r0, r3
 8002f76:	f7ff ff31 	bl	8002ddc <__NVIC_EnableIRQ>
}
 8002f7a:	bf00      	nop
 8002f7c:	3708      	adds	r7, #8
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	bd80      	pop	{r7, pc}

08002f82 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002f82:	b580      	push	{r7, lr}
 8002f84:	b082      	sub	sp, #8
 8002f86:	af00      	add	r7, sp, #0
 8002f88:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002f8a:	6878      	ldr	r0, [r7, #4]
 8002f8c:	f7ff ffa2 	bl	8002ed4 <SysTick_Config>
 8002f90:	4603      	mov	r3, r0
}
 8002f92:	4618      	mov	r0, r3
 8002f94:	3708      	adds	r7, #8
 8002f96:	46bd      	mov	sp, r7
 8002f98:	bd80      	pop	{r7, pc}
	...

08002f9c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002f9c:	b580      	push	{r7, lr}
 8002f9e:	b086      	sub	sp, #24
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002fa4:	2300      	movs	r3, #0
 8002fa6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002fa8:	f7ff faa4 	bl	80024f4 <HAL_GetTick>
 8002fac:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d101      	bne.n	8002fb8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002fb4:	2301      	movs	r3, #1
 8002fb6:	e099      	b.n	80030ec <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	2202      	movs	r2, #2
 8002fbc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	681a      	ldr	r2, [r3, #0]
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f022 0201 	bic.w	r2, r2, #1
 8002fd6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002fd8:	e00f      	b.n	8002ffa <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002fda:	f7ff fa8b 	bl	80024f4 <HAL_GetTick>
 8002fde:	4602      	mov	r2, r0
 8002fe0:	693b      	ldr	r3, [r7, #16]
 8002fe2:	1ad3      	subs	r3, r2, r3
 8002fe4:	2b05      	cmp	r3, #5
 8002fe6:	d908      	bls.n	8002ffa <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	2220      	movs	r2, #32
 8002fec:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	2203      	movs	r2, #3
 8002ff2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8002ff6:	2303      	movs	r3, #3
 8002ff8:	e078      	b.n	80030ec <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f003 0301 	and.w	r3, r3, #1
 8003004:	2b00      	cmp	r3, #0
 8003006:	d1e8      	bne.n	8002fda <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003010:	697a      	ldr	r2, [r7, #20]
 8003012:	4b38      	ldr	r3, [pc, #224]	@ (80030f4 <HAL_DMA_Init+0x158>)
 8003014:	4013      	ands	r3, r2
 8003016:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	685a      	ldr	r2, [r3, #4]
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	689b      	ldr	r3, [r3, #8]
 8003020:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003026:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	691b      	ldr	r3, [r3, #16]
 800302c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003032:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	699b      	ldr	r3, [r3, #24]
 8003038:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800303e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	6a1b      	ldr	r3, [r3, #32]
 8003044:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003046:	697a      	ldr	r2, [r7, #20]
 8003048:	4313      	orrs	r3, r2
 800304a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003050:	2b04      	cmp	r3, #4
 8003052:	d107      	bne.n	8003064 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800305c:	4313      	orrs	r3, r2
 800305e:	697a      	ldr	r2, [r7, #20]
 8003060:	4313      	orrs	r3, r2
 8003062:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	697a      	ldr	r2, [r7, #20]
 800306a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	695b      	ldr	r3, [r3, #20]
 8003072:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003074:	697b      	ldr	r3, [r7, #20]
 8003076:	f023 0307 	bic.w	r3, r3, #7
 800307a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003080:	697a      	ldr	r2, [r7, #20]
 8003082:	4313      	orrs	r3, r2
 8003084:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800308a:	2b04      	cmp	r3, #4
 800308c:	d117      	bne.n	80030be <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003092:	697a      	ldr	r2, [r7, #20]
 8003094:	4313      	orrs	r3, r2
 8003096:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800309c:	2b00      	cmp	r3, #0
 800309e:	d00e      	beq.n	80030be <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80030a0:	6878      	ldr	r0, [r7, #4]
 80030a2:	f000 fb01 	bl	80036a8 <DMA_CheckFifoParam>
 80030a6:	4603      	mov	r3, r0
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d008      	beq.n	80030be <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	2240      	movs	r2, #64	@ 0x40
 80030b0:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	2201      	movs	r2, #1
 80030b6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80030ba:	2301      	movs	r3, #1
 80030bc:	e016      	b.n	80030ec <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	697a      	ldr	r2, [r7, #20]
 80030c4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80030c6:	6878      	ldr	r0, [r7, #4]
 80030c8:	f000 fab8 	bl	800363c <DMA_CalcBaseAndBitshift>
 80030cc:	4603      	mov	r3, r0
 80030ce:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030d4:	223f      	movs	r2, #63	@ 0x3f
 80030d6:	409a      	lsls	r2, r3
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	2200      	movs	r2, #0
 80030e0:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	2201      	movs	r2, #1
 80030e6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80030ea:	2300      	movs	r3, #0
}
 80030ec:	4618      	mov	r0, r3
 80030ee:	3718      	adds	r7, #24
 80030f0:	46bd      	mov	sp, r7
 80030f2:	bd80      	pop	{r7, pc}
 80030f4:	f010803f 	.word	0xf010803f

080030f8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80030f8:	b580      	push	{r7, lr}
 80030fa:	b086      	sub	sp, #24
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	60f8      	str	r0, [r7, #12]
 8003100:	60b9      	str	r1, [r7, #8]
 8003102:	607a      	str	r2, [r7, #4]
 8003104:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003106:	2300      	movs	r3, #0
 8003108:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800310e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8003116:	2b01      	cmp	r3, #1
 8003118:	d101      	bne.n	800311e <HAL_DMA_Start_IT+0x26>
 800311a:	2302      	movs	r3, #2
 800311c:	e040      	b.n	80031a0 <HAL_DMA_Start_IT+0xa8>
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	2201      	movs	r2, #1
 8003122:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800312c:	b2db      	uxtb	r3, r3
 800312e:	2b01      	cmp	r3, #1
 8003130:	d12f      	bne.n	8003192 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	2202      	movs	r2, #2
 8003136:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	2200      	movs	r2, #0
 800313e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003140:	683b      	ldr	r3, [r7, #0]
 8003142:	687a      	ldr	r2, [r7, #4]
 8003144:	68b9      	ldr	r1, [r7, #8]
 8003146:	68f8      	ldr	r0, [r7, #12]
 8003148:	f000 fa4a 	bl	80035e0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003150:	223f      	movs	r2, #63	@ 0x3f
 8003152:	409a      	lsls	r2, r3
 8003154:	693b      	ldr	r3, [r7, #16]
 8003156:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	681a      	ldr	r2, [r3, #0]
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f042 0216 	orr.w	r2, r2, #22
 8003166:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800316c:	2b00      	cmp	r3, #0
 800316e:	d007      	beq.n	8003180 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	681a      	ldr	r2, [r3, #0]
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f042 0208 	orr.w	r2, r2, #8
 800317e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	681a      	ldr	r2, [r3, #0]
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f042 0201 	orr.w	r2, r2, #1
 800318e:	601a      	str	r2, [r3, #0]
 8003190:	e005      	b.n	800319e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	2200      	movs	r2, #0
 8003196:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800319a:	2302      	movs	r3, #2
 800319c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800319e:	7dfb      	ldrb	r3, [r7, #23]
}
 80031a0:	4618      	mov	r0, r3
 80031a2:	3718      	adds	r7, #24
 80031a4:	46bd      	mov	sp, r7
 80031a6:	bd80      	pop	{r7, pc}

080031a8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80031a8:	b580      	push	{r7, lr}
 80031aa:	b084      	sub	sp, #16
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031b4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80031b6:	f7ff f99d 	bl	80024f4 <HAL_GetTick>
 80031ba:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80031c2:	b2db      	uxtb	r3, r3
 80031c4:	2b02      	cmp	r3, #2
 80031c6:	d008      	beq.n	80031da <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	2280      	movs	r2, #128	@ 0x80
 80031cc:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	2200      	movs	r2, #0
 80031d2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80031d6:	2301      	movs	r3, #1
 80031d8:	e052      	b.n	8003280 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	681a      	ldr	r2, [r3, #0]
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f022 0216 	bic.w	r2, r2, #22
 80031e8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	695a      	ldr	r2, [r3, #20]
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80031f8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d103      	bne.n	800320a <HAL_DMA_Abort+0x62>
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003206:	2b00      	cmp	r3, #0
 8003208:	d007      	beq.n	800321a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	681a      	ldr	r2, [r3, #0]
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f022 0208 	bic.w	r2, r2, #8
 8003218:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	681a      	ldr	r2, [r3, #0]
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f022 0201 	bic.w	r2, r2, #1
 8003228:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800322a:	e013      	b.n	8003254 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800322c:	f7ff f962 	bl	80024f4 <HAL_GetTick>
 8003230:	4602      	mov	r2, r0
 8003232:	68bb      	ldr	r3, [r7, #8]
 8003234:	1ad3      	subs	r3, r2, r3
 8003236:	2b05      	cmp	r3, #5
 8003238:	d90c      	bls.n	8003254 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	2220      	movs	r2, #32
 800323e:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	2203      	movs	r2, #3
 8003244:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	2200      	movs	r2, #0
 800324c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8003250:	2303      	movs	r3, #3
 8003252:	e015      	b.n	8003280 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f003 0301 	and.w	r3, r3, #1
 800325e:	2b00      	cmp	r3, #0
 8003260:	d1e4      	bne.n	800322c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003266:	223f      	movs	r2, #63	@ 0x3f
 8003268:	409a      	lsls	r2, r3
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	2201      	movs	r2, #1
 8003272:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	2200      	movs	r2, #0
 800327a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 800327e:	2300      	movs	r3, #0
}
 8003280:	4618      	mov	r0, r3
 8003282:	3710      	adds	r7, #16
 8003284:	46bd      	mov	sp, r7
 8003286:	bd80      	pop	{r7, pc}

08003288 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003288:	b480      	push	{r7}
 800328a:	b083      	sub	sp, #12
 800328c:	af00      	add	r7, sp, #0
 800328e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003296:	b2db      	uxtb	r3, r3
 8003298:	2b02      	cmp	r3, #2
 800329a:	d004      	beq.n	80032a6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2280      	movs	r2, #128	@ 0x80
 80032a0:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80032a2:	2301      	movs	r3, #1
 80032a4:	e00c      	b.n	80032c0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	2205      	movs	r2, #5
 80032aa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	681a      	ldr	r2, [r3, #0]
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f022 0201 	bic.w	r2, r2, #1
 80032bc:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80032be:	2300      	movs	r3, #0
}
 80032c0:	4618      	mov	r0, r3
 80032c2:	370c      	adds	r7, #12
 80032c4:	46bd      	mov	sp, r7
 80032c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ca:	4770      	bx	lr

080032cc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80032cc:	b580      	push	{r7, lr}
 80032ce:	b086      	sub	sp, #24
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80032d4:	2300      	movs	r3, #0
 80032d6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80032d8:	4b8e      	ldr	r3, [pc, #568]	@ (8003514 <HAL_DMA_IRQHandler+0x248>)
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	4a8e      	ldr	r2, [pc, #568]	@ (8003518 <HAL_DMA_IRQHandler+0x24c>)
 80032de:	fba2 2303 	umull	r2, r3, r2, r3
 80032e2:	0a9b      	lsrs	r3, r3, #10
 80032e4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80032ea:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80032ec:	693b      	ldr	r3, [r7, #16]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032f6:	2208      	movs	r2, #8
 80032f8:	409a      	lsls	r2, r3
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	4013      	ands	r3, r2
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d01a      	beq.n	8003338 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f003 0304 	and.w	r3, r3, #4
 800330c:	2b00      	cmp	r3, #0
 800330e:	d013      	beq.n	8003338 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	681a      	ldr	r2, [r3, #0]
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f022 0204 	bic.w	r2, r2, #4
 800331e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003324:	2208      	movs	r2, #8
 8003326:	409a      	lsls	r2, r3
 8003328:	693b      	ldr	r3, [r7, #16]
 800332a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003330:	f043 0201 	orr.w	r2, r3, #1
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800333c:	2201      	movs	r2, #1
 800333e:	409a      	lsls	r2, r3
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	4013      	ands	r3, r2
 8003344:	2b00      	cmp	r3, #0
 8003346:	d012      	beq.n	800336e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	695b      	ldr	r3, [r3, #20]
 800334e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003352:	2b00      	cmp	r3, #0
 8003354:	d00b      	beq.n	800336e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800335a:	2201      	movs	r2, #1
 800335c:	409a      	lsls	r2, r3
 800335e:	693b      	ldr	r3, [r7, #16]
 8003360:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003366:	f043 0202 	orr.w	r2, r3, #2
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003372:	2204      	movs	r2, #4
 8003374:	409a      	lsls	r2, r3
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	4013      	ands	r3, r2
 800337a:	2b00      	cmp	r3, #0
 800337c:	d012      	beq.n	80033a4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f003 0302 	and.w	r3, r3, #2
 8003388:	2b00      	cmp	r3, #0
 800338a:	d00b      	beq.n	80033a4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003390:	2204      	movs	r2, #4
 8003392:	409a      	lsls	r2, r3
 8003394:	693b      	ldr	r3, [r7, #16]
 8003396:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800339c:	f043 0204 	orr.w	r2, r3, #4
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033a8:	2210      	movs	r2, #16
 80033aa:	409a      	lsls	r2, r3
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	4013      	ands	r3, r2
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d043      	beq.n	800343c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f003 0308 	and.w	r3, r3, #8
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d03c      	beq.n	800343c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033c6:	2210      	movs	r2, #16
 80033c8:	409a      	lsls	r2, r3
 80033ca:	693b      	ldr	r3, [r7, #16]
 80033cc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d018      	beq.n	800340e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d108      	bne.n	80033fc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d024      	beq.n	800343c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033f6:	6878      	ldr	r0, [r7, #4]
 80033f8:	4798      	blx	r3
 80033fa:	e01f      	b.n	800343c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003400:	2b00      	cmp	r3, #0
 8003402:	d01b      	beq.n	800343c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003408:	6878      	ldr	r0, [r7, #4]
 800340a:	4798      	blx	r3
 800340c:	e016      	b.n	800343c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003418:	2b00      	cmp	r3, #0
 800341a:	d107      	bne.n	800342c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	681a      	ldr	r2, [r3, #0]
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f022 0208 	bic.w	r2, r2, #8
 800342a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003430:	2b00      	cmp	r3, #0
 8003432:	d003      	beq.n	800343c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003438:	6878      	ldr	r0, [r7, #4]
 800343a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003440:	2220      	movs	r2, #32
 8003442:	409a      	lsls	r2, r3
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	4013      	ands	r3, r2
 8003448:	2b00      	cmp	r3, #0
 800344a:	f000 808f 	beq.w	800356c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f003 0310 	and.w	r3, r3, #16
 8003458:	2b00      	cmp	r3, #0
 800345a:	f000 8087 	beq.w	800356c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003462:	2220      	movs	r2, #32
 8003464:	409a      	lsls	r2, r3
 8003466:	693b      	ldr	r3, [r7, #16]
 8003468:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003470:	b2db      	uxtb	r3, r3
 8003472:	2b05      	cmp	r3, #5
 8003474:	d136      	bne.n	80034e4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	681a      	ldr	r2, [r3, #0]
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f022 0216 	bic.w	r2, r2, #22
 8003484:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	695a      	ldr	r2, [r3, #20]
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003494:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800349a:	2b00      	cmp	r3, #0
 800349c:	d103      	bne.n	80034a6 <HAL_DMA_IRQHandler+0x1da>
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d007      	beq.n	80034b6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	681a      	ldr	r2, [r3, #0]
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f022 0208 	bic.w	r2, r2, #8
 80034b4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80034ba:	223f      	movs	r2, #63	@ 0x3f
 80034bc:	409a      	lsls	r2, r3
 80034be:	693b      	ldr	r3, [r7, #16]
 80034c0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	2201      	movs	r2, #1
 80034c6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	2200      	movs	r2, #0
 80034ce:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d07e      	beq.n	80035d8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80034de:	6878      	ldr	r0, [r7, #4]
 80034e0:	4798      	blx	r3
        }
        return;
 80034e2:	e079      	b.n	80035d8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d01d      	beq.n	800352e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d10d      	bne.n	800351c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003504:	2b00      	cmp	r3, #0
 8003506:	d031      	beq.n	800356c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800350c:	6878      	ldr	r0, [r7, #4]
 800350e:	4798      	blx	r3
 8003510:	e02c      	b.n	800356c <HAL_DMA_IRQHandler+0x2a0>
 8003512:	bf00      	nop
 8003514:	20000008 	.word	0x20000008
 8003518:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003520:	2b00      	cmp	r3, #0
 8003522:	d023      	beq.n	800356c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003528:	6878      	ldr	r0, [r7, #4]
 800352a:	4798      	blx	r3
 800352c:	e01e      	b.n	800356c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003538:	2b00      	cmp	r3, #0
 800353a:	d10f      	bne.n	800355c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	681a      	ldr	r2, [r3, #0]
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f022 0210 	bic.w	r2, r2, #16
 800354a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	2201      	movs	r2, #1
 8003550:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	2200      	movs	r2, #0
 8003558:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003560:	2b00      	cmp	r3, #0
 8003562:	d003      	beq.n	800356c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003568:	6878      	ldr	r0, [r7, #4]
 800356a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003570:	2b00      	cmp	r3, #0
 8003572:	d032      	beq.n	80035da <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003578:	f003 0301 	and.w	r3, r3, #1
 800357c:	2b00      	cmp	r3, #0
 800357e:	d022      	beq.n	80035c6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	2205      	movs	r2, #5
 8003584:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	681a      	ldr	r2, [r3, #0]
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f022 0201 	bic.w	r2, r2, #1
 8003596:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003598:	68bb      	ldr	r3, [r7, #8]
 800359a:	3301      	adds	r3, #1
 800359c:	60bb      	str	r3, [r7, #8]
 800359e:	697a      	ldr	r2, [r7, #20]
 80035a0:	429a      	cmp	r2, r3
 80035a2:	d307      	bcc.n	80035b4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f003 0301 	and.w	r3, r3, #1
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d1f2      	bne.n	8003598 <HAL_DMA_IRQHandler+0x2cc>
 80035b2:	e000      	b.n	80035b6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80035b4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	2201      	movs	r2, #1
 80035ba:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	2200      	movs	r2, #0
 80035c2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d005      	beq.n	80035da <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80035d2:	6878      	ldr	r0, [r7, #4]
 80035d4:	4798      	blx	r3
 80035d6:	e000      	b.n	80035da <HAL_DMA_IRQHandler+0x30e>
        return;
 80035d8:	bf00      	nop
    }
  }
}
 80035da:	3718      	adds	r7, #24
 80035dc:	46bd      	mov	sp, r7
 80035de:	bd80      	pop	{r7, pc}

080035e0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80035e0:	b480      	push	{r7}
 80035e2:	b085      	sub	sp, #20
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	60f8      	str	r0, [r7, #12]
 80035e8:	60b9      	str	r1, [r7, #8]
 80035ea:	607a      	str	r2, [r7, #4]
 80035ec:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	681a      	ldr	r2, [r3, #0]
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80035fc:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	683a      	ldr	r2, [r7, #0]
 8003604:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	689b      	ldr	r3, [r3, #8]
 800360a:	2b40      	cmp	r3, #64	@ 0x40
 800360c:	d108      	bne.n	8003620 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	687a      	ldr	r2, [r7, #4]
 8003614:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	68ba      	ldr	r2, [r7, #8]
 800361c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800361e:	e007      	b.n	8003630 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	68ba      	ldr	r2, [r7, #8]
 8003626:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	687a      	ldr	r2, [r7, #4]
 800362e:	60da      	str	r2, [r3, #12]
}
 8003630:	bf00      	nop
 8003632:	3714      	adds	r7, #20
 8003634:	46bd      	mov	sp, r7
 8003636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363a:	4770      	bx	lr

0800363c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800363c:	b480      	push	{r7}
 800363e:	b085      	sub	sp, #20
 8003640:	af00      	add	r7, sp, #0
 8003642:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	b2db      	uxtb	r3, r3
 800364a:	3b10      	subs	r3, #16
 800364c:	4a14      	ldr	r2, [pc, #80]	@ (80036a0 <DMA_CalcBaseAndBitshift+0x64>)
 800364e:	fba2 2303 	umull	r2, r3, r2, r3
 8003652:	091b      	lsrs	r3, r3, #4
 8003654:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003656:	4a13      	ldr	r2, [pc, #76]	@ (80036a4 <DMA_CalcBaseAndBitshift+0x68>)
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	4413      	add	r3, r2
 800365c:	781b      	ldrb	r3, [r3, #0]
 800365e:	461a      	mov	r2, r3
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	2b03      	cmp	r3, #3
 8003668:	d909      	bls.n	800367e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003672:	f023 0303 	bic.w	r3, r3, #3
 8003676:	1d1a      	adds	r2, r3, #4
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	659a      	str	r2, [r3, #88]	@ 0x58
 800367c:	e007      	b.n	800368e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003686:	f023 0303 	bic.w	r3, r3, #3
 800368a:	687a      	ldr	r2, [r7, #4]
 800368c:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8003692:	4618      	mov	r0, r3
 8003694:	3714      	adds	r7, #20
 8003696:	46bd      	mov	sp, r7
 8003698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369c:	4770      	bx	lr
 800369e:	bf00      	nop
 80036a0:	aaaaaaab 	.word	0xaaaaaaab
 80036a4:	0800adf0 	.word	0x0800adf0

080036a8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80036a8:	b480      	push	{r7}
 80036aa:	b085      	sub	sp, #20
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80036b0:	2300      	movs	r3, #0
 80036b2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036b8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	699b      	ldr	r3, [r3, #24]
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d11f      	bne.n	8003702 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80036c2:	68bb      	ldr	r3, [r7, #8]
 80036c4:	2b03      	cmp	r3, #3
 80036c6:	d856      	bhi.n	8003776 <DMA_CheckFifoParam+0xce>
 80036c8:	a201      	add	r2, pc, #4	@ (adr r2, 80036d0 <DMA_CheckFifoParam+0x28>)
 80036ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036ce:	bf00      	nop
 80036d0:	080036e1 	.word	0x080036e1
 80036d4:	080036f3 	.word	0x080036f3
 80036d8:	080036e1 	.word	0x080036e1
 80036dc:	08003777 	.word	0x08003777
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036e4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d046      	beq.n	800377a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80036ec:	2301      	movs	r3, #1
 80036ee:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80036f0:	e043      	b.n	800377a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036f6:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80036fa:	d140      	bne.n	800377e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80036fc:	2301      	movs	r3, #1
 80036fe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003700:	e03d      	b.n	800377e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	699b      	ldr	r3, [r3, #24]
 8003706:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800370a:	d121      	bne.n	8003750 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800370c:	68bb      	ldr	r3, [r7, #8]
 800370e:	2b03      	cmp	r3, #3
 8003710:	d837      	bhi.n	8003782 <DMA_CheckFifoParam+0xda>
 8003712:	a201      	add	r2, pc, #4	@ (adr r2, 8003718 <DMA_CheckFifoParam+0x70>)
 8003714:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003718:	08003729 	.word	0x08003729
 800371c:	0800372f 	.word	0x0800372f
 8003720:	08003729 	.word	0x08003729
 8003724:	08003741 	.word	0x08003741
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003728:	2301      	movs	r3, #1
 800372a:	73fb      	strb	r3, [r7, #15]
      break;
 800372c:	e030      	b.n	8003790 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003732:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003736:	2b00      	cmp	r3, #0
 8003738:	d025      	beq.n	8003786 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800373a:	2301      	movs	r3, #1
 800373c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800373e:	e022      	b.n	8003786 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003744:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003748:	d11f      	bne.n	800378a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800374a:	2301      	movs	r3, #1
 800374c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800374e:	e01c      	b.n	800378a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003750:	68bb      	ldr	r3, [r7, #8]
 8003752:	2b02      	cmp	r3, #2
 8003754:	d903      	bls.n	800375e <DMA_CheckFifoParam+0xb6>
 8003756:	68bb      	ldr	r3, [r7, #8]
 8003758:	2b03      	cmp	r3, #3
 800375a:	d003      	beq.n	8003764 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800375c:	e018      	b.n	8003790 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800375e:	2301      	movs	r3, #1
 8003760:	73fb      	strb	r3, [r7, #15]
      break;
 8003762:	e015      	b.n	8003790 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003768:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800376c:	2b00      	cmp	r3, #0
 800376e:	d00e      	beq.n	800378e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003770:	2301      	movs	r3, #1
 8003772:	73fb      	strb	r3, [r7, #15]
      break;
 8003774:	e00b      	b.n	800378e <DMA_CheckFifoParam+0xe6>
      break;
 8003776:	bf00      	nop
 8003778:	e00a      	b.n	8003790 <DMA_CheckFifoParam+0xe8>
      break;
 800377a:	bf00      	nop
 800377c:	e008      	b.n	8003790 <DMA_CheckFifoParam+0xe8>
      break;
 800377e:	bf00      	nop
 8003780:	e006      	b.n	8003790 <DMA_CheckFifoParam+0xe8>
      break;
 8003782:	bf00      	nop
 8003784:	e004      	b.n	8003790 <DMA_CheckFifoParam+0xe8>
      break;
 8003786:	bf00      	nop
 8003788:	e002      	b.n	8003790 <DMA_CheckFifoParam+0xe8>
      break;   
 800378a:	bf00      	nop
 800378c:	e000      	b.n	8003790 <DMA_CheckFifoParam+0xe8>
      break;
 800378e:	bf00      	nop
    }
  } 
  
  return status; 
 8003790:	7bfb      	ldrb	r3, [r7, #15]
}
 8003792:	4618      	mov	r0, r3
 8003794:	3714      	adds	r7, #20
 8003796:	46bd      	mov	sp, r7
 8003798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379c:	4770      	bx	lr
 800379e:	bf00      	nop

080037a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80037a0:	b480      	push	{r7}
 80037a2:	b089      	sub	sp, #36	@ 0x24
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	6078      	str	r0, [r7, #4]
 80037a8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80037aa:	2300      	movs	r3, #0
 80037ac:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80037ae:	2300      	movs	r3, #0
 80037b0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80037b2:	2300      	movs	r3, #0
 80037b4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80037b6:	2300      	movs	r3, #0
 80037b8:	61fb      	str	r3, [r7, #28]
 80037ba:	e16b      	b.n	8003a94 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80037bc:	2201      	movs	r2, #1
 80037be:	69fb      	ldr	r3, [r7, #28]
 80037c0:	fa02 f303 	lsl.w	r3, r2, r3
 80037c4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80037c6:	683b      	ldr	r3, [r7, #0]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	697a      	ldr	r2, [r7, #20]
 80037cc:	4013      	ands	r3, r2
 80037ce:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80037d0:	693a      	ldr	r2, [r7, #16]
 80037d2:	697b      	ldr	r3, [r7, #20]
 80037d4:	429a      	cmp	r2, r3
 80037d6:	f040 815a 	bne.w	8003a8e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80037da:	683b      	ldr	r3, [r7, #0]
 80037dc:	685b      	ldr	r3, [r3, #4]
 80037de:	f003 0303 	and.w	r3, r3, #3
 80037e2:	2b01      	cmp	r3, #1
 80037e4:	d005      	beq.n	80037f2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80037e6:	683b      	ldr	r3, [r7, #0]
 80037e8:	685b      	ldr	r3, [r3, #4]
 80037ea:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80037ee:	2b02      	cmp	r3, #2
 80037f0:	d130      	bne.n	8003854 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	689b      	ldr	r3, [r3, #8]
 80037f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80037f8:	69fb      	ldr	r3, [r7, #28]
 80037fa:	005b      	lsls	r3, r3, #1
 80037fc:	2203      	movs	r2, #3
 80037fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003802:	43db      	mvns	r3, r3
 8003804:	69ba      	ldr	r2, [r7, #24]
 8003806:	4013      	ands	r3, r2
 8003808:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800380a:	683b      	ldr	r3, [r7, #0]
 800380c:	68da      	ldr	r2, [r3, #12]
 800380e:	69fb      	ldr	r3, [r7, #28]
 8003810:	005b      	lsls	r3, r3, #1
 8003812:	fa02 f303 	lsl.w	r3, r2, r3
 8003816:	69ba      	ldr	r2, [r7, #24]
 8003818:	4313      	orrs	r3, r2
 800381a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	69ba      	ldr	r2, [r7, #24]
 8003820:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	685b      	ldr	r3, [r3, #4]
 8003826:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003828:	2201      	movs	r2, #1
 800382a:	69fb      	ldr	r3, [r7, #28]
 800382c:	fa02 f303 	lsl.w	r3, r2, r3
 8003830:	43db      	mvns	r3, r3
 8003832:	69ba      	ldr	r2, [r7, #24]
 8003834:	4013      	ands	r3, r2
 8003836:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003838:	683b      	ldr	r3, [r7, #0]
 800383a:	685b      	ldr	r3, [r3, #4]
 800383c:	091b      	lsrs	r3, r3, #4
 800383e:	f003 0201 	and.w	r2, r3, #1
 8003842:	69fb      	ldr	r3, [r7, #28]
 8003844:	fa02 f303 	lsl.w	r3, r2, r3
 8003848:	69ba      	ldr	r2, [r7, #24]
 800384a:	4313      	orrs	r3, r2
 800384c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	69ba      	ldr	r2, [r7, #24]
 8003852:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003854:	683b      	ldr	r3, [r7, #0]
 8003856:	685b      	ldr	r3, [r3, #4]
 8003858:	f003 0303 	and.w	r3, r3, #3
 800385c:	2b03      	cmp	r3, #3
 800385e:	d017      	beq.n	8003890 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	68db      	ldr	r3, [r3, #12]
 8003864:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003866:	69fb      	ldr	r3, [r7, #28]
 8003868:	005b      	lsls	r3, r3, #1
 800386a:	2203      	movs	r2, #3
 800386c:	fa02 f303 	lsl.w	r3, r2, r3
 8003870:	43db      	mvns	r3, r3
 8003872:	69ba      	ldr	r2, [r7, #24]
 8003874:	4013      	ands	r3, r2
 8003876:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003878:	683b      	ldr	r3, [r7, #0]
 800387a:	689a      	ldr	r2, [r3, #8]
 800387c:	69fb      	ldr	r3, [r7, #28]
 800387e:	005b      	lsls	r3, r3, #1
 8003880:	fa02 f303 	lsl.w	r3, r2, r3
 8003884:	69ba      	ldr	r2, [r7, #24]
 8003886:	4313      	orrs	r3, r2
 8003888:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	69ba      	ldr	r2, [r7, #24]
 800388e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003890:	683b      	ldr	r3, [r7, #0]
 8003892:	685b      	ldr	r3, [r3, #4]
 8003894:	f003 0303 	and.w	r3, r3, #3
 8003898:	2b02      	cmp	r3, #2
 800389a:	d123      	bne.n	80038e4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800389c:	69fb      	ldr	r3, [r7, #28]
 800389e:	08da      	lsrs	r2, r3, #3
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	3208      	adds	r2, #8
 80038a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80038a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80038aa:	69fb      	ldr	r3, [r7, #28]
 80038ac:	f003 0307 	and.w	r3, r3, #7
 80038b0:	009b      	lsls	r3, r3, #2
 80038b2:	220f      	movs	r2, #15
 80038b4:	fa02 f303 	lsl.w	r3, r2, r3
 80038b8:	43db      	mvns	r3, r3
 80038ba:	69ba      	ldr	r2, [r7, #24]
 80038bc:	4013      	ands	r3, r2
 80038be:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80038c0:	683b      	ldr	r3, [r7, #0]
 80038c2:	691a      	ldr	r2, [r3, #16]
 80038c4:	69fb      	ldr	r3, [r7, #28]
 80038c6:	f003 0307 	and.w	r3, r3, #7
 80038ca:	009b      	lsls	r3, r3, #2
 80038cc:	fa02 f303 	lsl.w	r3, r2, r3
 80038d0:	69ba      	ldr	r2, [r7, #24]
 80038d2:	4313      	orrs	r3, r2
 80038d4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80038d6:	69fb      	ldr	r3, [r7, #28]
 80038d8:	08da      	lsrs	r2, r3, #3
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	3208      	adds	r2, #8
 80038de:	69b9      	ldr	r1, [r7, #24]
 80038e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80038ea:	69fb      	ldr	r3, [r7, #28]
 80038ec:	005b      	lsls	r3, r3, #1
 80038ee:	2203      	movs	r2, #3
 80038f0:	fa02 f303 	lsl.w	r3, r2, r3
 80038f4:	43db      	mvns	r3, r3
 80038f6:	69ba      	ldr	r2, [r7, #24]
 80038f8:	4013      	ands	r3, r2
 80038fa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80038fc:	683b      	ldr	r3, [r7, #0]
 80038fe:	685b      	ldr	r3, [r3, #4]
 8003900:	f003 0203 	and.w	r2, r3, #3
 8003904:	69fb      	ldr	r3, [r7, #28]
 8003906:	005b      	lsls	r3, r3, #1
 8003908:	fa02 f303 	lsl.w	r3, r2, r3
 800390c:	69ba      	ldr	r2, [r7, #24]
 800390e:	4313      	orrs	r3, r2
 8003910:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	69ba      	ldr	r2, [r7, #24]
 8003916:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003918:	683b      	ldr	r3, [r7, #0]
 800391a:	685b      	ldr	r3, [r3, #4]
 800391c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003920:	2b00      	cmp	r3, #0
 8003922:	f000 80b4 	beq.w	8003a8e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003926:	2300      	movs	r3, #0
 8003928:	60fb      	str	r3, [r7, #12]
 800392a:	4b60      	ldr	r3, [pc, #384]	@ (8003aac <HAL_GPIO_Init+0x30c>)
 800392c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800392e:	4a5f      	ldr	r2, [pc, #380]	@ (8003aac <HAL_GPIO_Init+0x30c>)
 8003930:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003934:	6453      	str	r3, [r2, #68]	@ 0x44
 8003936:	4b5d      	ldr	r3, [pc, #372]	@ (8003aac <HAL_GPIO_Init+0x30c>)
 8003938:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800393a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800393e:	60fb      	str	r3, [r7, #12]
 8003940:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003942:	4a5b      	ldr	r2, [pc, #364]	@ (8003ab0 <HAL_GPIO_Init+0x310>)
 8003944:	69fb      	ldr	r3, [r7, #28]
 8003946:	089b      	lsrs	r3, r3, #2
 8003948:	3302      	adds	r3, #2
 800394a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800394e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003950:	69fb      	ldr	r3, [r7, #28]
 8003952:	f003 0303 	and.w	r3, r3, #3
 8003956:	009b      	lsls	r3, r3, #2
 8003958:	220f      	movs	r2, #15
 800395a:	fa02 f303 	lsl.w	r3, r2, r3
 800395e:	43db      	mvns	r3, r3
 8003960:	69ba      	ldr	r2, [r7, #24]
 8003962:	4013      	ands	r3, r2
 8003964:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	4a52      	ldr	r2, [pc, #328]	@ (8003ab4 <HAL_GPIO_Init+0x314>)
 800396a:	4293      	cmp	r3, r2
 800396c:	d02b      	beq.n	80039c6 <HAL_GPIO_Init+0x226>
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	4a51      	ldr	r2, [pc, #324]	@ (8003ab8 <HAL_GPIO_Init+0x318>)
 8003972:	4293      	cmp	r3, r2
 8003974:	d025      	beq.n	80039c2 <HAL_GPIO_Init+0x222>
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	4a50      	ldr	r2, [pc, #320]	@ (8003abc <HAL_GPIO_Init+0x31c>)
 800397a:	4293      	cmp	r3, r2
 800397c:	d01f      	beq.n	80039be <HAL_GPIO_Init+0x21e>
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	4a4f      	ldr	r2, [pc, #316]	@ (8003ac0 <HAL_GPIO_Init+0x320>)
 8003982:	4293      	cmp	r3, r2
 8003984:	d019      	beq.n	80039ba <HAL_GPIO_Init+0x21a>
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	4a4e      	ldr	r2, [pc, #312]	@ (8003ac4 <HAL_GPIO_Init+0x324>)
 800398a:	4293      	cmp	r3, r2
 800398c:	d013      	beq.n	80039b6 <HAL_GPIO_Init+0x216>
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	4a4d      	ldr	r2, [pc, #308]	@ (8003ac8 <HAL_GPIO_Init+0x328>)
 8003992:	4293      	cmp	r3, r2
 8003994:	d00d      	beq.n	80039b2 <HAL_GPIO_Init+0x212>
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	4a4c      	ldr	r2, [pc, #304]	@ (8003acc <HAL_GPIO_Init+0x32c>)
 800399a:	4293      	cmp	r3, r2
 800399c:	d007      	beq.n	80039ae <HAL_GPIO_Init+0x20e>
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	4a4b      	ldr	r2, [pc, #300]	@ (8003ad0 <HAL_GPIO_Init+0x330>)
 80039a2:	4293      	cmp	r3, r2
 80039a4:	d101      	bne.n	80039aa <HAL_GPIO_Init+0x20a>
 80039a6:	2307      	movs	r3, #7
 80039a8:	e00e      	b.n	80039c8 <HAL_GPIO_Init+0x228>
 80039aa:	2308      	movs	r3, #8
 80039ac:	e00c      	b.n	80039c8 <HAL_GPIO_Init+0x228>
 80039ae:	2306      	movs	r3, #6
 80039b0:	e00a      	b.n	80039c8 <HAL_GPIO_Init+0x228>
 80039b2:	2305      	movs	r3, #5
 80039b4:	e008      	b.n	80039c8 <HAL_GPIO_Init+0x228>
 80039b6:	2304      	movs	r3, #4
 80039b8:	e006      	b.n	80039c8 <HAL_GPIO_Init+0x228>
 80039ba:	2303      	movs	r3, #3
 80039bc:	e004      	b.n	80039c8 <HAL_GPIO_Init+0x228>
 80039be:	2302      	movs	r3, #2
 80039c0:	e002      	b.n	80039c8 <HAL_GPIO_Init+0x228>
 80039c2:	2301      	movs	r3, #1
 80039c4:	e000      	b.n	80039c8 <HAL_GPIO_Init+0x228>
 80039c6:	2300      	movs	r3, #0
 80039c8:	69fa      	ldr	r2, [r7, #28]
 80039ca:	f002 0203 	and.w	r2, r2, #3
 80039ce:	0092      	lsls	r2, r2, #2
 80039d0:	4093      	lsls	r3, r2
 80039d2:	69ba      	ldr	r2, [r7, #24]
 80039d4:	4313      	orrs	r3, r2
 80039d6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80039d8:	4935      	ldr	r1, [pc, #212]	@ (8003ab0 <HAL_GPIO_Init+0x310>)
 80039da:	69fb      	ldr	r3, [r7, #28]
 80039dc:	089b      	lsrs	r3, r3, #2
 80039de:	3302      	adds	r3, #2
 80039e0:	69ba      	ldr	r2, [r7, #24]
 80039e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80039e6:	4b3b      	ldr	r3, [pc, #236]	@ (8003ad4 <HAL_GPIO_Init+0x334>)
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80039ec:	693b      	ldr	r3, [r7, #16]
 80039ee:	43db      	mvns	r3, r3
 80039f0:	69ba      	ldr	r2, [r7, #24]
 80039f2:	4013      	ands	r3, r2
 80039f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80039f6:	683b      	ldr	r3, [r7, #0]
 80039f8:	685b      	ldr	r3, [r3, #4]
 80039fa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d003      	beq.n	8003a0a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003a02:	69ba      	ldr	r2, [r7, #24]
 8003a04:	693b      	ldr	r3, [r7, #16]
 8003a06:	4313      	orrs	r3, r2
 8003a08:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003a0a:	4a32      	ldr	r2, [pc, #200]	@ (8003ad4 <HAL_GPIO_Init+0x334>)
 8003a0c:	69bb      	ldr	r3, [r7, #24]
 8003a0e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003a10:	4b30      	ldr	r3, [pc, #192]	@ (8003ad4 <HAL_GPIO_Init+0x334>)
 8003a12:	685b      	ldr	r3, [r3, #4]
 8003a14:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a16:	693b      	ldr	r3, [r7, #16]
 8003a18:	43db      	mvns	r3, r3
 8003a1a:	69ba      	ldr	r2, [r7, #24]
 8003a1c:	4013      	ands	r3, r2
 8003a1e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003a20:	683b      	ldr	r3, [r7, #0]
 8003a22:	685b      	ldr	r3, [r3, #4]
 8003a24:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d003      	beq.n	8003a34 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003a2c:	69ba      	ldr	r2, [r7, #24]
 8003a2e:	693b      	ldr	r3, [r7, #16]
 8003a30:	4313      	orrs	r3, r2
 8003a32:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003a34:	4a27      	ldr	r2, [pc, #156]	@ (8003ad4 <HAL_GPIO_Init+0x334>)
 8003a36:	69bb      	ldr	r3, [r7, #24]
 8003a38:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003a3a:	4b26      	ldr	r3, [pc, #152]	@ (8003ad4 <HAL_GPIO_Init+0x334>)
 8003a3c:	689b      	ldr	r3, [r3, #8]
 8003a3e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a40:	693b      	ldr	r3, [r7, #16]
 8003a42:	43db      	mvns	r3, r3
 8003a44:	69ba      	ldr	r2, [r7, #24]
 8003a46:	4013      	ands	r3, r2
 8003a48:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003a4a:	683b      	ldr	r3, [r7, #0]
 8003a4c:	685b      	ldr	r3, [r3, #4]
 8003a4e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d003      	beq.n	8003a5e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003a56:	69ba      	ldr	r2, [r7, #24]
 8003a58:	693b      	ldr	r3, [r7, #16]
 8003a5a:	4313      	orrs	r3, r2
 8003a5c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003a5e:	4a1d      	ldr	r2, [pc, #116]	@ (8003ad4 <HAL_GPIO_Init+0x334>)
 8003a60:	69bb      	ldr	r3, [r7, #24]
 8003a62:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003a64:	4b1b      	ldr	r3, [pc, #108]	@ (8003ad4 <HAL_GPIO_Init+0x334>)
 8003a66:	68db      	ldr	r3, [r3, #12]
 8003a68:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a6a:	693b      	ldr	r3, [r7, #16]
 8003a6c:	43db      	mvns	r3, r3
 8003a6e:	69ba      	ldr	r2, [r7, #24]
 8003a70:	4013      	ands	r3, r2
 8003a72:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003a74:	683b      	ldr	r3, [r7, #0]
 8003a76:	685b      	ldr	r3, [r3, #4]
 8003a78:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d003      	beq.n	8003a88 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003a80:	69ba      	ldr	r2, [r7, #24]
 8003a82:	693b      	ldr	r3, [r7, #16]
 8003a84:	4313      	orrs	r3, r2
 8003a86:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003a88:	4a12      	ldr	r2, [pc, #72]	@ (8003ad4 <HAL_GPIO_Init+0x334>)
 8003a8a:	69bb      	ldr	r3, [r7, #24]
 8003a8c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003a8e:	69fb      	ldr	r3, [r7, #28]
 8003a90:	3301      	adds	r3, #1
 8003a92:	61fb      	str	r3, [r7, #28]
 8003a94:	69fb      	ldr	r3, [r7, #28]
 8003a96:	2b0f      	cmp	r3, #15
 8003a98:	f67f ae90 	bls.w	80037bc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003a9c:	bf00      	nop
 8003a9e:	bf00      	nop
 8003aa0:	3724      	adds	r7, #36	@ 0x24
 8003aa2:	46bd      	mov	sp, r7
 8003aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa8:	4770      	bx	lr
 8003aaa:	bf00      	nop
 8003aac:	40023800 	.word	0x40023800
 8003ab0:	40013800 	.word	0x40013800
 8003ab4:	40020000 	.word	0x40020000
 8003ab8:	40020400 	.word	0x40020400
 8003abc:	40020800 	.word	0x40020800
 8003ac0:	40020c00 	.word	0x40020c00
 8003ac4:	40021000 	.word	0x40021000
 8003ac8:	40021400 	.word	0x40021400
 8003acc:	40021800 	.word	0x40021800
 8003ad0:	40021c00 	.word	0x40021c00
 8003ad4:	40013c00 	.word	0x40013c00

08003ad8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003ad8:	b480      	push	{r7}
 8003ada:	b083      	sub	sp, #12
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	6078      	str	r0, [r7, #4]
 8003ae0:	460b      	mov	r3, r1
 8003ae2:	807b      	strh	r3, [r7, #2]
 8003ae4:	4613      	mov	r3, r2
 8003ae6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003ae8:	787b      	ldrb	r3, [r7, #1]
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d003      	beq.n	8003af6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003aee:	887a      	ldrh	r2, [r7, #2]
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003af4:	e003      	b.n	8003afe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003af6:	887b      	ldrh	r3, [r7, #2]
 8003af8:	041a      	lsls	r2, r3, #16
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	619a      	str	r2, [r3, #24]
}
 8003afe:	bf00      	nop
 8003b00:	370c      	adds	r7, #12
 8003b02:	46bd      	mov	sp, r7
 8003b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b08:	4770      	bx	lr

08003b0a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003b0a:	b480      	push	{r7}
 8003b0c:	b085      	sub	sp, #20
 8003b0e:	af00      	add	r7, sp, #0
 8003b10:	6078      	str	r0, [r7, #4]
 8003b12:	460b      	mov	r3, r1
 8003b14:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	695b      	ldr	r3, [r3, #20]
 8003b1a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003b1c:	887a      	ldrh	r2, [r7, #2]
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	4013      	ands	r3, r2
 8003b22:	041a      	lsls	r2, r3, #16
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	43d9      	mvns	r1, r3
 8003b28:	887b      	ldrh	r3, [r7, #2]
 8003b2a:	400b      	ands	r3, r1
 8003b2c:	431a      	orrs	r2, r3
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	619a      	str	r2, [r3, #24]
}
 8003b32:	bf00      	nop
 8003b34:	3714      	adds	r7, #20
 8003b36:	46bd      	mov	sp, r7
 8003b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3c:	4770      	bx	lr
	...

08003b40 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003b40:	b580      	push	{r7, lr}
 8003b42:	b084      	sub	sp, #16
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d101      	bne.n	8003b52 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003b4e:	2301      	movs	r3, #1
 8003b50:	e12b      	b.n	8003daa <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003b58:	b2db      	uxtb	r3, r3
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d106      	bne.n	8003b6c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	2200      	movs	r2, #0
 8003b62:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003b66:	6878      	ldr	r0, [r7, #4]
 8003b68:	f7fd f8e8 	bl	8000d3c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	2224      	movs	r2, #36	@ 0x24
 8003b70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	681a      	ldr	r2, [r3, #0]
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f022 0201 	bic.w	r2, r2, #1
 8003b82:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	681a      	ldr	r2, [r3, #0]
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003b92:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	681a      	ldr	r2, [r3, #0]
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003ba2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003ba4:	f000 fd80 	bl	80046a8 <HAL_RCC_GetPCLK1Freq>
 8003ba8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	685b      	ldr	r3, [r3, #4]
 8003bae:	4a81      	ldr	r2, [pc, #516]	@ (8003db4 <HAL_I2C_Init+0x274>)
 8003bb0:	4293      	cmp	r3, r2
 8003bb2:	d807      	bhi.n	8003bc4 <HAL_I2C_Init+0x84>
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	4a80      	ldr	r2, [pc, #512]	@ (8003db8 <HAL_I2C_Init+0x278>)
 8003bb8:	4293      	cmp	r3, r2
 8003bba:	bf94      	ite	ls
 8003bbc:	2301      	movls	r3, #1
 8003bbe:	2300      	movhi	r3, #0
 8003bc0:	b2db      	uxtb	r3, r3
 8003bc2:	e006      	b.n	8003bd2 <HAL_I2C_Init+0x92>
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	4a7d      	ldr	r2, [pc, #500]	@ (8003dbc <HAL_I2C_Init+0x27c>)
 8003bc8:	4293      	cmp	r3, r2
 8003bca:	bf94      	ite	ls
 8003bcc:	2301      	movls	r3, #1
 8003bce:	2300      	movhi	r3, #0
 8003bd0:	b2db      	uxtb	r3, r3
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d001      	beq.n	8003bda <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003bd6:	2301      	movs	r3, #1
 8003bd8:	e0e7      	b.n	8003daa <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	4a78      	ldr	r2, [pc, #480]	@ (8003dc0 <HAL_I2C_Init+0x280>)
 8003bde:	fba2 2303 	umull	r2, r3, r2, r3
 8003be2:	0c9b      	lsrs	r3, r3, #18
 8003be4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	685b      	ldr	r3, [r3, #4]
 8003bec:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	68ba      	ldr	r2, [r7, #8]
 8003bf6:	430a      	orrs	r2, r1
 8003bf8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	6a1b      	ldr	r3, [r3, #32]
 8003c00:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	685b      	ldr	r3, [r3, #4]
 8003c08:	4a6a      	ldr	r2, [pc, #424]	@ (8003db4 <HAL_I2C_Init+0x274>)
 8003c0a:	4293      	cmp	r3, r2
 8003c0c:	d802      	bhi.n	8003c14 <HAL_I2C_Init+0xd4>
 8003c0e:	68bb      	ldr	r3, [r7, #8]
 8003c10:	3301      	adds	r3, #1
 8003c12:	e009      	b.n	8003c28 <HAL_I2C_Init+0xe8>
 8003c14:	68bb      	ldr	r3, [r7, #8]
 8003c16:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003c1a:	fb02 f303 	mul.w	r3, r2, r3
 8003c1e:	4a69      	ldr	r2, [pc, #420]	@ (8003dc4 <HAL_I2C_Init+0x284>)
 8003c20:	fba2 2303 	umull	r2, r3, r2, r3
 8003c24:	099b      	lsrs	r3, r3, #6
 8003c26:	3301      	adds	r3, #1
 8003c28:	687a      	ldr	r2, [r7, #4]
 8003c2a:	6812      	ldr	r2, [r2, #0]
 8003c2c:	430b      	orrs	r3, r1
 8003c2e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	69db      	ldr	r3, [r3, #28]
 8003c36:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003c3a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	685b      	ldr	r3, [r3, #4]
 8003c42:	495c      	ldr	r1, [pc, #368]	@ (8003db4 <HAL_I2C_Init+0x274>)
 8003c44:	428b      	cmp	r3, r1
 8003c46:	d819      	bhi.n	8003c7c <HAL_I2C_Init+0x13c>
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	1e59      	subs	r1, r3, #1
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	685b      	ldr	r3, [r3, #4]
 8003c50:	005b      	lsls	r3, r3, #1
 8003c52:	fbb1 f3f3 	udiv	r3, r1, r3
 8003c56:	1c59      	adds	r1, r3, #1
 8003c58:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003c5c:	400b      	ands	r3, r1
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d00a      	beq.n	8003c78 <HAL_I2C_Init+0x138>
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	1e59      	subs	r1, r3, #1
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	685b      	ldr	r3, [r3, #4]
 8003c6a:	005b      	lsls	r3, r3, #1
 8003c6c:	fbb1 f3f3 	udiv	r3, r1, r3
 8003c70:	3301      	adds	r3, #1
 8003c72:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c76:	e051      	b.n	8003d1c <HAL_I2C_Init+0x1dc>
 8003c78:	2304      	movs	r3, #4
 8003c7a:	e04f      	b.n	8003d1c <HAL_I2C_Init+0x1dc>
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	689b      	ldr	r3, [r3, #8]
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d111      	bne.n	8003ca8 <HAL_I2C_Init+0x168>
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	1e58      	subs	r0, r3, #1
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	6859      	ldr	r1, [r3, #4]
 8003c8c:	460b      	mov	r3, r1
 8003c8e:	005b      	lsls	r3, r3, #1
 8003c90:	440b      	add	r3, r1
 8003c92:	fbb0 f3f3 	udiv	r3, r0, r3
 8003c96:	3301      	adds	r3, #1
 8003c98:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	bf0c      	ite	eq
 8003ca0:	2301      	moveq	r3, #1
 8003ca2:	2300      	movne	r3, #0
 8003ca4:	b2db      	uxtb	r3, r3
 8003ca6:	e012      	b.n	8003cce <HAL_I2C_Init+0x18e>
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	1e58      	subs	r0, r3, #1
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	6859      	ldr	r1, [r3, #4]
 8003cb0:	460b      	mov	r3, r1
 8003cb2:	009b      	lsls	r3, r3, #2
 8003cb4:	440b      	add	r3, r1
 8003cb6:	0099      	lsls	r1, r3, #2
 8003cb8:	440b      	add	r3, r1
 8003cba:	fbb0 f3f3 	udiv	r3, r0, r3
 8003cbe:	3301      	adds	r3, #1
 8003cc0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	bf0c      	ite	eq
 8003cc8:	2301      	moveq	r3, #1
 8003cca:	2300      	movne	r3, #0
 8003ccc:	b2db      	uxtb	r3, r3
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d001      	beq.n	8003cd6 <HAL_I2C_Init+0x196>
 8003cd2:	2301      	movs	r3, #1
 8003cd4:	e022      	b.n	8003d1c <HAL_I2C_Init+0x1dc>
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	689b      	ldr	r3, [r3, #8]
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d10e      	bne.n	8003cfc <HAL_I2C_Init+0x1bc>
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	1e58      	subs	r0, r3, #1
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	6859      	ldr	r1, [r3, #4]
 8003ce6:	460b      	mov	r3, r1
 8003ce8:	005b      	lsls	r3, r3, #1
 8003cea:	440b      	add	r3, r1
 8003cec:	fbb0 f3f3 	udiv	r3, r0, r3
 8003cf0:	3301      	adds	r3, #1
 8003cf2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003cf6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003cfa:	e00f      	b.n	8003d1c <HAL_I2C_Init+0x1dc>
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	1e58      	subs	r0, r3, #1
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	6859      	ldr	r1, [r3, #4]
 8003d04:	460b      	mov	r3, r1
 8003d06:	009b      	lsls	r3, r3, #2
 8003d08:	440b      	add	r3, r1
 8003d0a:	0099      	lsls	r1, r3, #2
 8003d0c:	440b      	add	r3, r1
 8003d0e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003d12:	3301      	adds	r3, #1
 8003d14:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d18:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003d1c:	6879      	ldr	r1, [r7, #4]
 8003d1e:	6809      	ldr	r1, [r1, #0]
 8003d20:	4313      	orrs	r3, r2
 8003d22:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	69da      	ldr	r2, [r3, #28]
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	6a1b      	ldr	r3, [r3, #32]
 8003d36:	431a      	orrs	r2, r3
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	430a      	orrs	r2, r1
 8003d3e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	689b      	ldr	r3, [r3, #8]
 8003d46:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003d4a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003d4e:	687a      	ldr	r2, [r7, #4]
 8003d50:	6911      	ldr	r1, [r2, #16]
 8003d52:	687a      	ldr	r2, [r7, #4]
 8003d54:	68d2      	ldr	r2, [r2, #12]
 8003d56:	4311      	orrs	r1, r2
 8003d58:	687a      	ldr	r2, [r7, #4]
 8003d5a:	6812      	ldr	r2, [r2, #0]
 8003d5c:	430b      	orrs	r3, r1
 8003d5e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	68db      	ldr	r3, [r3, #12]
 8003d66:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	695a      	ldr	r2, [r3, #20]
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	699b      	ldr	r3, [r3, #24]
 8003d72:	431a      	orrs	r2, r3
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	430a      	orrs	r2, r1
 8003d7a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	681a      	ldr	r2, [r3, #0]
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f042 0201 	orr.w	r2, r2, #1
 8003d8a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	2200      	movs	r2, #0
 8003d90:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	2220      	movs	r2, #32
 8003d96:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	2200      	movs	r2, #0
 8003d9e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	2200      	movs	r2, #0
 8003da4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003da8:	2300      	movs	r3, #0
}
 8003daa:	4618      	mov	r0, r3
 8003dac:	3710      	adds	r7, #16
 8003dae:	46bd      	mov	sp, r7
 8003db0:	bd80      	pop	{r7, pc}
 8003db2:	bf00      	nop
 8003db4:	000186a0 	.word	0x000186a0
 8003db8:	001e847f 	.word	0x001e847f
 8003dbc:	003d08ff 	.word	0x003d08ff
 8003dc0:	431bde83 	.word	0x431bde83
 8003dc4:	10624dd3 	.word	0x10624dd3

08003dc8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	b086      	sub	sp, #24
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d101      	bne.n	8003dda <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003dd6:	2301      	movs	r3, #1
 8003dd8:	e267      	b.n	80042aa <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f003 0301 	and.w	r3, r3, #1
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d075      	beq.n	8003ed2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003de6:	4b88      	ldr	r3, [pc, #544]	@ (8004008 <HAL_RCC_OscConfig+0x240>)
 8003de8:	689b      	ldr	r3, [r3, #8]
 8003dea:	f003 030c 	and.w	r3, r3, #12
 8003dee:	2b04      	cmp	r3, #4
 8003df0:	d00c      	beq.n	8003e0c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003df2:	4b85      	ldr	r3, [pc, #532]	@ (8004008 <HAL_RCC_OscConfig+0x240>)
 8003df4:	689b      	ldr	r3, [r3, #8]
 8003df6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003dfa:	2b08      	cmp	r3, #8
 8003dfc:	d112      	bne.n	8003e24 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003dfe:	4b82      	ldr	r3, [pc, #520]	@ (8004008 <HAL_RCC_OscConfig+0x240>)
 8003e00:	685b      	ldr	r3, [r3, #4]
 8003e02:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003e06:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003e0a:	d10b      	bne.n	8003e24 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e0c:	4b7e      	ldr	r3, [pc, #504]	@ (8004008 <HAL_RCC_OscConfig+0x240>)
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d05b      	beq.n	8003ed0 <HAL_RCC_OscConfig+0x108>
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	685b      	ldr	r3, [r3, #4]
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d157      	bne.n	8003ed0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003e20:	2301      	movs	r3, #1
 8003e22:	e242      	b.n	80042aa <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	685b      	ldr	r3, [r3, #4]
 8003e28:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003e2c:	d106      	bne.n	8003e3c <HAL_RCC_OscConfig+0x74>
 8003e2e:	4b76      	ldr	r3, [pc, #472]	@ (8004008 <HAL_RCC_OscConfig+0x240>)
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	4a75      	ldr	r2, [pc, #468]	@ (8004008 <HAL_RCC_OscConfig+0x240>)
 8003e34:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003e38:	6013      	str	r3, [r2, #0]
 8003e3a:	e01d      	b.n	8003e78 <HAL_RCC_OscConfig+0xb0>
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	685b      	ldr	r3, [r3, #4]
 8003e40:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003e44:	d10c      	bne.n	8003e60 <HAL_RCC_OscConfig+0x98>
 8003e46:	4b70      	ldr	r3, [pc, #448]	@ (8004008 <HAL_RCC_OscConfig+0x240>)
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	4a6f      	ldr	r2, [pc, #444]	@ (8004008 <HAL_RCC_OscConfig+0x240>)
 8003e4c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003e50:	6013      	str	r3, [r2, #0]
 8003e52:	4b6d      	ldr	r3, [pc, #436]	@ (8004008 <HAL_RCC_OscConfig+0x240>)
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	4a6c      	ldr	r2, [pc, #432]	@ (8004008 <HAL_RCC_OscConfig+0x240>)
 8003e58:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003e5c:	6013      	str	r3, [r2, #0]
 8003e5e:	e00b      	b.n	8003e78 <HAL_RCC_OscConfig+0xb0>
 8003e60:	4b69      	ldr	r3, [pc, #420]	@ (8004008 <HAL_RCC_OscConfig+0x240>)
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	4a68      	ldr	r2, [pc, #416]	@ (8004008 <HAL_RCC_OscConfig+0x240>)
 8003e66:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003e6a:	6013      	str	r3, [r2, #0]
 8003e6c:	4b66      	ldr	r3, [pc, #408]	@ (8004008 <HAL_RCC_OscConfig+0x240>)
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	4a65      	ldr	r2, [pc, #404]	@ (8004008 <HAL_RCC_OscConfig+0x240>)
 8003e72:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003e76:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	685b      	ldr	r3, [r3, #4]
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d013      	beq.n	8003ea8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e80:	f7fe fb38 	bl	80024f4 <HAL_GetTick>
 8003e84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e86:	e008      	b.n	8003e9a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003e88:	f7fe fb34 	bl	80024f4 <HAL_GetTick>
 8003e8c:	4602      	mov	r2, r0
 8003e8e:	693b      	ldr	r3, [r7, #16]
 8003e90:	1ad3      	subs	r3, r2, r3
 8003e92:	2b64      	cmp	r3, #100	@ 0x64
 8003e94:	d901      	bls.n	8003e9a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003e96:	2303      	movs	r3, #3
 8003e98:	e207      	b.n	80042aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e9a:	4b5b      	ldr	r3, [pc, #364]	@ (8004008 <HAL_RCC_OscConfig+0x240>)
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d0f0      	beq.n	8003e88 <HAL_RCC_OscConfig+0xc0>
 8003ea6:	e014      	b.n	8003ed2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ea8:	f7fe fb24 	bl	80024f4 <HAL_GetTick>
 8003eac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003eae:	e008      	b.n	8003ec2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003eb0:	f7fe fb20 	bl	80024f4 <HAL_GetTick>
 8003eb4:	4602      	mov	r2, r0
 8003eb6:	693b      	ldr	r3, [r7, #16]
 8003eb8:	1ad3      	subs	r3, r2, r3
 8003eba:	2b64      	cmp	r3, #100	@ 0x64
 8003ebc:	d901      	bls.n	8003ec2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003ebe:	2303      	movs	r3, #3
 8003ec0:	e1f3      	b.n	80042aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003ec2:	4b51      	ldr	r3, [pc, #324]	@ (8004008 <HAL_RCC_OscConfig+0x240>)
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d1f0      	bne.n	8003eb0 <HAL_RCC_OscConfig+0xe8>
 8003ece:	e000      	b.n	8003ed2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ed0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f003 0302 	and.w	r3, r3, #2
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d063      	beq.n	8003fa6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003ede:	4b4a      	ldr	r3, [pc, #296]	@ (8004008 <HAL_RCC_OscConfig+0x240>)
 8003ee0:	689b      	ldr	r3, [r3, #8]
 8003ee2:	f003 030c 	and.w	r3, r3, #12
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d00b      	beq.n	8003f02 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003eea:	4b47      	ldr	r3, [pc, #284]	@ (8004008 <HAL_RCC_OscConfig+0x240>)
 8003eec:	689b      	ldr	r3, [r3, #8]
 8003eee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003ef2:	2b08      	cmp	r3, #8
 8003ef4:	d11c      	bne.n	8003f30 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003ef6:	4b44      	ldr	r3, [pc, #272]	@ (8004008 <HAL_RCC_OscConfig+0x240>)
 8003ef8:	685b      	ldr	r3, [r3, #4]
 8003efa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d116      	bne.n	8003f30 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003f02:	4b41      	ldr	r3, [pc, #260]	@ (8004008 <HAL_RCC_OscConfig+0x240>)
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f003 0302 	and.w	r3, r3, #2
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d005      	beq.n	8003f1a <HAL_RCC_OscConfig+0x152>
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	68db      	ldr	r3, [r3, #12]
 8003f12:	2b01      	cmp	r3, #1
 8003f14:	d001      	beq.n	8003f1a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003f16:	2301      	movs	r3, #1
 8003f18:	e1c7      	b.n	80042aa <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f1a:	4b3b      	ldr	r3, [pc, #236]	@ (8004008 <HAL_RCC_OscConfig+0x240>)
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	691b      	ldr	r3, [r3, #16]
 8003f26:	00db      	lsls	r3, r3, #3
 8003f28:	4937      	ldr	r1, [pc, #220]	@ (8004008 <HAL_RCC_OscConfig+0x240>)
 8003f2a:	4313      	orrs	r3, r2
 8003f2c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003f2e:	e03a      	b.n	8003fa6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	68db      	ldr	r3, [r3, #12]
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d020      	beq.n	8003f7a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003f38:	4b34      	ldr	r3, [pc, #208]	@ (800400c <HAL_RCC_OscConfig+0x244>)
 8003f3a:	2201      	movs	r2, #1
 8003f3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f3e:	f7fe fad9 	bl	80024f4 <HAL_GetTick>
 8003f42:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f44:	e008      	b.n	8003f58 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003f46:	f7fe fad5 	bl	80024f4 <HAL_GetTick>
 8003f4a:	4602      	mov	r2, r0
 8003f4c:	693b      	ldr	r3, [r7, #16]
 8003f4e:	1ad3      	subs	r3, r2, r3
 8003f50:	2b02      	cmp	r3, #2
 8003f52:	d901      	bls.n	8003f58 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003f54:	2303      	movs	r3, #3
 8003f56:	e1a8      	b.n	80042aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f58:	4b2b      	ldr	r3, [pc, #172]	@ (8004008 <HAL_RCC_OscConfig+0x240>)
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f003 0302 	and.w	r3, r3, #2
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d0f0      	beq.n	8003f46 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f64:	4b28      	ldr	r3, [pc, #160]	@ (8004008 <HAL_RCC_OscConfig+0x240>)
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	691b      	ldr	r3, [r3, #16]
 8003f70:	00db      	lsls	r3, r3, #3
 8003f72:	4925      	ldr	r1, [pc, #148]	@ (8004008 <HAL_RCC_OscConfig+0x240>)
 8003f74:	4313      	orrs	r3, r2
 8003f76:	600b      	str	r3, [r1, #0]
 8003f78:	e015      	b.n	8003fa6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003f7a:	4b24      	ldr	r3, [pc, #144]	@ (800400c <HAL_RCC_OscConfig+0x244>)
 8003f7c:	2200      	movs	r2, #0
 8003f7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f80:	f7fe fab8 	bl	80024f4 <HAL_GetTick>
 8003f84:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f86:	e008      	b.n	8003f9a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003f88:	f7fe fab4 	bl	80024f4 <HAL_GetTick>
 8003f8c:	4602      	mov	r2, r0
 8003f8e:	693b      	ldr	r3, [r7, #16]
 8003f90:	1ad3      	subs	r3, r2, r3
 8003f92:	2b02      	cmp	r3, #2
 8003f94:	d901      	bls.n	8003f9a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003f96:	2303      	movs	r3, #3
 8003f98:	e187      	b.n	80042aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f9a:	4b1b      	ldr	r3, [pc, #108]	@ (8004008 <HAL_RCC_OscConfig+0x240>)
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f003 0302 	and.w	r3, r3, #2
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d1f0      	bne.n	8003f88 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f003 0308 	and.w	r3, r3, #8
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d036      	beq.n	8004020 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	695b      	ldr	r3, [r3, #20]
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d016      	beq.n	8003fe8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003fba:	4b15      	ldr	r3, [pc, #84]	@ (8004010 <HAL_RCC_OscConfig+0x248>)
 8003fbc:	2201      	movs	r2, #1
 8003fbe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fc0:	f7fe fa98 	bl	80024f4 <HAL_GetTick>
 8003fc4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003fc6:	e008      	b.n	8003fda <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003fc8:	f7fe fa94 	bl	80024f4 <HAL_GetTick>
 8003fcc:	4602      	mov	r2, r0
 8003fce:	693b      	ldr	r3, [r7, #16]
 8003fd0:	1ad3      	subs	r3, r2, r3
 8003fd2:	2b02      	cmp	r3, #2
 8003fd4:	d901      	bls.n	8003fda <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003fd6:	2303      	movs	r3, #3
 8003fd8:	e167      	b.n	80042aa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003fda:	4b0b      	ldr	r3, [pc, #44]	@ (8004008 <HAL_RCC_OscConfig+0x240>)
 8003fdc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003fde:	f003 0302 	and.w	r3, r3, #2
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d0f0      	beq.n	8003fc8 <HAL_RCC_OscConfig+0x200>
 8003fe6:	e01b      	b.n	8004020 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003fe8:	4b09      	ldr	r3, [pc, #36]	@ (8004010 <HAL_RCC_OscConfig+0x248>)
 8003fea:	2200      	movs	r2, #0
 8003fec:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003fee:	f7fe fa81 	bl	80024f4 <HAL_GetTick>
 8003ff2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ff4:	e00e      	b.n	8004014 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003ff6:	f7fe fa7d 	bl	80024f4 <HAL_GetTick>
 8003ffa:	4602      	mov	r2, r0
 8003ffc:	693b      	ldr	r3, [r7, #16]
 8003ffe:	1ad3      	subs	r3, r2, r3
 8004000:	2b02      	cmp	r3, #2
 8004002:	d907      	bls.n	8004014 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004004:	2303      	movs	r3, #3
 8004006:	e150      	b.n	80042aa <HAL_RCC_OscConfig+0x4e2>
 8004008:	40023800 	.word	0x40023800
 800400c:	42470000 	.word	0x42470000
 8004010:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004014:	4b88      	ldr	r3, [pc, #544]	@ (8004238 <HAL_RCC_OscConfig+0x470>)
 8004016:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004018:	f003 0302 	and.w	r3, r3, #2
 800401c:	2b00      	cmp	r3, #0
 800401e:	d1ea      	bne.n	8003ff6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f003 0304 	and.w	r3, r3, #4
 8004028:	2b00      	cmp	r3, #0
 800402a:	f000 8097 	beq.w	800415c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800402e:	2300      	movs	r3, #0
 8004030:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004032:	4b81      	ldr	r3, [pc, #516]	@ (8004238 <HAL_RCC_OscConfig+0x470>)
 8004034:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004036:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800403a:	2b00      	cmp	r3, #0
 800403c:	d10f      	bne.n	800405e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800403e:	2300      	movs	r3, #0
 8004040:	60bb      	str	r3, [r7, #8]
 8004042:	4b7d      	ldr	r3, [pc, #500]	@ (8004238 <HAL_RCC_OscConfig+0x470>)
 8004044:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004046:	4a7c      	ldr	r2, [pc, #496]	@ (8004238 <HAL_RCC_OscConfig+0x470>)
 8004048:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800404c:	6413      	str	r3, [r2, #64]	@ 0x40
 800404e:	4b7a      	ldr	r3, [pc, #488]	@ (8004238 <HAL_RCC_OscConfig+0x470>)
 8004050:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004052:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004056:	60bb      	str	r3, [r7, #8]
 8004058:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800405a:	2301      	movs	r3, #1
 800405c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800405e:	4b77      	ldr	r3, [pc, #476]	@ (800423c <HAL_RCC_OscConfig+0x474>)
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004066:	2b00      	cmp	r3, #0
 8004068:	d118      	bne.n	800409c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800406a:	4b74      	ldr	r3, [pc, #464]	@ (800423c <HAL_RCC_OscConfig+0x474>)
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	4a73      	ldr	r2, [pc, #460]	@ (800423c <HAL_RCC_OscConfig+0x474>)
 8004070:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004074:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004076:	f7fe fa3d 	bl	80024f4 <HAL_GetTick>
 800407a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800407c:	e008      	b.n	8004090 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800407e:	f7fe fa39 	bl	80024f4 <HAL_GetTick>
 8004082:	4602      	mov	r2, r0
 8004084:	693b      	ldr	r3, [r7, #16]
 8004086:	1ad3      	subs	r3, r2, r3
 8004088:	2b02      	cmp	r3, #2
 800408a:	d901      	bls.n	8004090 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800408c:	2303      	movs	r3, #3
 800408e:	e10c      	b.n	80042aa <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004090:	4b6a      	ldr	r3, [pc, #424]	@ (800423c <HAL_RCC_OscConfig+0x474>)
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004098:	2b00      	cmp	r3, #0
 800409a:	d0f0      	beq.n	800407e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	689b      	ldr	r3, [r3, #8]
 80040a0:	2b01      	cmp	r3, #1
 80040a2:	d106      	bne.n	80040b2 <HAL_RCC_OscConfig+0x2ea>
 80040a4:	4b64      	ldr	r3, [pc, #400]	@ (8004238 <HAL_RCC_OscConfig+0x470>)
 80040a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80040a8:	4a63      	ldr	r2, [pc, #396]	@ (8004238 <HAL_RCC_OscConfig+0x470>)
 80040aa:	f043 0301 	orr.w	r3, r3, #1
 80040ae:	6713      	str	r3, [r2, #112]	@ 0x70
 80040b0:	e01c      	b.n	80040ec <HAL_RCC_OscConfig+0x324>
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	689b      	ldr	r3, [r3, #8]
 80040b6:	2b05      	cmp	r3, #5
 80040b8:	d10c      	bne.n	80040d4 <HAL_RCC_OscConfig+0x30c>
 80040ba:	4b5f      	ldr	r3, [pc, #380]	@ (8004238 <HAL_RCC_OscConfig+0x470>)
 80040bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80040be:	4a5e      	ldr	r2, [pc, #376]	@ (8004238 <HAL_RCC_OscConfig+0x470>)
 80040c0:	f043 0304 	orr.w	r3, r3, #4
 80040c4:	6713      	str	r3, [r2, #112]	@ 0x70
 80040c6:	4b5c      	ldr	r3, [pc, #368]	@ (8004238 <HAL_RCC_OscConfig+0x470>)
 80040c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80040ca:	4a5b      	ldr	r2, [pc, #364]	@ (8004238 <HAL_RCC_OscConfig+0x470>)
 80040cc:	f043 0301 	orr.w	r3, r3, #1
 80040d0:	6713      	str	r3, [r2, #112]	@ 0x70
 80040d2:	e00b      	b.n	80040ec <HAL_RCC_OscConfig+0x324>
 80040d4:	4b58      	ldr	r3, [pc, #352]	@ (8004238 <HAL_RCC_OscConfig+0x470>)
 80040d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80040d8:	4a57      	ldr	r2, [pc, #348]	@ (8004238 <HAL_RCC_OscConfig+0x470>)
 80040da:	f023 0301 	bic.w	r3, r3, #1
 80040de:	6713      	str	r3, [r2, #112]	@ 0x70
 80040e0:	4b55      	ldr	r3, [pc, #340]	@ (8004238 <HAL_RCC_OscConfig+0x470>)
 80040e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80040e4:	4a54      	ldr	r2, [pc, #336]	@ (8004238 <HAL_RCC_OscConfig+0x470>)
 80040e6:	f023 0304 	bic.w	r3, r3, #4
 80040ea:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	689b      	ldr	r3, [r3, #8]
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d015      	beq.n	8004120 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040f4:	f7fe f9fe 	bl	80024f4 <HAL_GetTick>
 80040f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80040fa:	e00a      	b.n	8004112 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80040fc:	f7fe f9fa 	bl	80024f4 <HAL_GetTick>
 8004100:	4602      	mov	r2, r0
 8004102:	693b      	ldr	r3, [r7, #16]
 8004104:	1ad3      	subs	r3, r2, r3
 8004106:	f241 3288 	movw	r2, #5000	@ 0x1388
 800410a:	4293      	cmp	r3, r2
 800410c:	d901      	bls.n	8004112 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800410e:	2303      	movs	r3, #3
 8004110:	e0cb      	b.n	80042aa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004112:	4b49      	ldr	r3, [pc, #292]	@ (8004238 <HAL_RCC_OscConfig+0x470>)
 8004114:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004116:	f003 0302 	and.w	r3, r3, #2
 800411a:	2b00      	cmp	r3, #0
 800411c:	d0ee      	beq.n	80040fc <HAL_RCC_OscConfig+0x334>
 800411e:	e014      	b.n	800414a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004120:	f7fe f9e8 	bl	80024f4 <HAL_GetTick>
 8004124:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004126:	e00a      	b.n	800413e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004128:	f7fe f9e4 	bl	80024f4 <HAL_GetTick>
 800412c:	4602      	mov	r2, r0
 800412e:	693b      	ldr	r3, [r7, #16]
 8004130:	1ad3      	subs	r3, r2, r3
 8004132:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004136:	4293      	cmp	r3, r2
 8004138:	d901      	bls.n	800413e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800413a:	2303      	movs	r3, #3
 800413c:	e0b5      	b.n	80042aa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800413e:	4b3e      	ldr	r3, [pc, #248]	@ (8004238 <HAL_RCC_OscConfig+0x470>)
 8004140:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004142:	f003 0302 	and.w	r3, r3, #2
 8004146:	2b00      	cmp	r3, #0
 8004148:	d1ee      	bne.n	8004128 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800414a:	7dfb      	ldrb	r3, [r7, #23]
 800414c:	2b01      	cmp	r3, #1
 800414e:	d105      	bne.n	800415c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004150:	4b39      	ldr	r3, [pc, #228]	@ (8004238 <HAL_RCC_OscConfig+0x470>)
 8004152:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004154:	4a38      	ldr	r2, [pc, #224]	@ (8004238 <HAL_RCC_OscConfig+0x470>)
 8004156:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800415a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	699b      	ldr	r3, [r3, #24]
 8004160:	2b00      	cmp	r3, #0
 8004162:	f000 80a1 	beq.w	80042a8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004166:	4b34      	ldr	r3, [pc, #208]	@ (8004238 <HAL_RCC_OscConfig+0x470>)
 8004168:	689b      	ldr	r3, [r3, #8]
 800416a:	f003 030c 	and.w	r3, r3, #12
 800416e:	2b08      	cmp	r3, #8
 8004170:	d05c      	beq.n	800422c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	699b      	ldr	r3, [r3, #24]
 8004176:	2b02      	cmp	r3, #2
 8004178:	d141      	bne.n	80041fe <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800417a:	4b31      	ldr	r3, [pc, #196]	@ (8004240 <HAL_RCC_OscConfig+0x478>)
 800417c:	2200      	movs	r2, #0
 800417e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004180:	f7fe f9b8 	bl	80024f4 <HAL_GetTick>
 8004184:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004186:	e008      	b.n	800419a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004188:	f7fe f9b4 	bl	80024f4 <HAL_GetTick>
 800418c:	4602      	mov	r2, r0
 800418e:	693b      	ldr	r3, [r7, #16]
 8004190:	1ad3      	subs	r3, r2, r3
 8004192:	2b02      	cmp	r3, #2
 8004194:	d901      	bls.n	800419a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004196:	2303      	movs	r3, #3
 8004198:	e087      	b.n	80042aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800419a:	4b27      	ldr	r3, [pc, #156]	@ (8004238 <HAL_RCC_OscConfig+0x470>)
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d1f0      	bne.n	8004188 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	69da      	ldr	r2, [r3, #28]
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	6a1b      	ldr	r3, [r3, #32]
 80041ae:	431a      	orrs	r2, r3
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041b4:	019b      	lsls	r3, r3, #6
 80041b6:	431a      	orrs	r2, r3
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041bc:	085b      	lsrs	r3, r3, #1
 80041be:	3b01      	subs	r3, #1
 80041c0:	041b      	lsls	r3, r3, #16
 80041c2:	431a      	orrs	r2, r3
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041c8:	061b      	lsls	r3, r3, #24
 80041ca:	491b      	ldr	r1, [pc, #108]	@ (8004238 <HAL_RCC_OscConfig+0x470>)
 80041cc:	4313      	orrs	r3, r2
 80041ce:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80041d0:	4b1b      	ldr	r3, [pc, #108]	@ (8004240 <HAL_RCC_OscConfig+0x478>)
 80041d2:	2201      	movs	r2, #1
 80041d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041d6:	f7fe f98d 	bl	80024f4 <HAL_GetTick>
 80041da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80041dc:	e008      	b.n	80041f0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80041de:	f7fe f989 	bl	80024f4 <HAL_GetTick>
 80041e2:	4602      	mov	r2, r0
 80041e4:	693b      	ldr	r3, [r7, #16]
 80041e6:	1ad3      	subs	r3, r2, r3
 80041e8:	2b02      	cmp	r3, #2
 80041ea:	d901      	bls.n	80041f0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80041ec:	2303      	movs	r3, #3
 80041ee:	e05c      	b.n	80042aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80041f0:	4b11      	ldr	r3, [pc, #68]	@ (8004238 <HAL_RCC_OscConfig+0x470>)
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d0f0      	beq.n	80041de <HAL_RCC_OscConfig+0x416>
 80041fc:	e054      	b.n	80042a8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80041fe:	4b10      	ldr	r3, [pc, #64]	@ (8004240 <HAL_RCC_OscConfig+0x478>)
 8004200:	2200      	movs	r2, #0
 8004202:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004204:	f7fe f976 	bl	80024f4 <HAL_GetTick>
 8004208:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800420a:	e008      	b.n	800421e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800420c:	f7fe f972 	bl	80024f4 <HAL_GetTick>
 8004210:	4602      	mov	r2, r0
 8004212:	693b      	ldr	r3, [r7, #16]
 8004214:	1ad3      	subs	r3, r2, r3
 8004216:	2b02      	cmp	r3, #2
 8004218:	d901      	bls.n	800421e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800421a:	2303      	movs	r3, #3
 800421c:	e045      	b.n	80042aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800421e:	4b06      	ldr	r3, [pc, #24]	@ (8004238 <HAL_RCC_OscConfig+0x470>)
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004226:	2b00      	cmp	r3, #0
 8004228:	d1f0      	bne.n	800420c <HAL_RCC_OscConfig+0x444>
 800422a:	e03d      	b.n	80042a8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	699b      	ldr	r3, [r3, #24]
 8004230:	2b01      	cmp	r3, #1
 8004232:	d107      	bne.n	8004244 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004234:	2301      	movs	r3, #1
 8004236:	e038      	b.n	80042aa <HAL_RCC_OscConfig+0x4e2>
 8004238:	40023800 	.word	0x40023800
 800423c:	40007000 	.word	0x40007000
 8004240:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004244:	4b1b      	ldr	r3, [pc, #108]	@ (80042b4 <HAL_RCC_OscConfig+0x4ec>)
 8004246:	685b      	ldr	r3, [r3, #4]
 8004248:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	699b      	ldr	r3, [r3, #24]
 800424e:	2b01      	cmp	r3, #1
 8004250:	d028      	beq.n	80042a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800425c:	429a      	cmp	r2, r3
 800425e:	d121      	bne.n	80042a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800426a:	429a      	cmp	r2, r3
 800426c:	d11a      	bne.n	80042a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800426e:	68fa      	ldr	r2, [r7, #12]
 8004270:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004274:	4013      	ands	r3, r2
 8004276:	687a      	ldr	r2, [r7, #4]
 8004278:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800427a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800427c:	4293      	cmp	r3, r2
 800427e:	d111      	bne.n	80042a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800428a:	085b      	lsrs	r3, r3, #1
 800428c:	3b01      	subs	r3, #1
 800428e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004290:	429a      	cmp	r2, r3
 8004292:	d107      	bne.n	80042a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800429e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80042a0:	429a      	cmp	r2, r3
 80042a2:	d001      	beq.n	80042a8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80042a4:	2301      	movs	r3, #1
 80042a6:	e000      	b.n	80042aa <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80042a8:	2300      	movs	r3, #0
}
 80042aa:	4618      	mov	r0, r3
 80042ac:	3718      	adds	r7, #24
 80042ae:	46bd      	mov	sp, r7
 80042b0:	bd80      	pop	{r7, pc}
 80042b2:	bf00      	nop
 80042b4:	40023800 	.word	0x40023800

080042b8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80042b8:	b580      	push	{r7, lr}
 80042ba:	b084      	sub	sp, #16
 80042bc:	af00      	add	r7, sp, #0
 80042be:	6078      	str	r0, [r7, #4]
 80042c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d101      	bne.n	80042cc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80042c8:	2301      	movs	r3, #1
 80042ca:	e0cc      	b.n	8004466 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80042cc:	4b68      	ldr	r3, [pc, #416]	@ (8004470 <HAL_RCC_ClockConfig+0x1b8>)
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f003 0307 	and.w	r3, r3, #7
 80042d4:	683a      	ldr	r2, [r7, #0]
 80042d6:	429a      	cmp	r2, r3
 80042d8:	d90c      	bls.n	80042f4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80042da:	4b65      	ldr	r3, [pc, #404]	@ (8004470 <HAL_RCC_ClockConfig+0x1b8>)
 80042dc:	683a      	ldr	r2, [r7, #0]
 80042de:	b2d2      	uxtb	r2, r2
 80042e0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80042e2:	4b63      	ldr	r3, [pc, #396]	@ (8004470 <HAL_RCC_ClockConfig+0x1b8>)
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f003 0307 	and.w	r3, r3, #7
 80042ea:	683a      	ldr	r2, [r7, #0]
 80042ec:	429a      	cmp	r2, r3
 80042ee:	d001      	beq.n	80042f4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80042f0:	2301      	movs	r3, #1
 80042f2:	e0b8      	b.n	8004466 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f003 0302 	and.w	r3, r3, #2
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d020      	beq.n	8004342 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f003 0304 	and.w	r3, r3, #4
 8004308:	2b00      	cmp	r3, #0
 800430a:	d005      	beq.n	8004318 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800430c:	4b59      	ldr	r3, [pc, #356]	@ (8004474 <HAL_RCC_ClockConfig+0x1bc>)
 800430e:	689b      	ldr	r3, [r3, #8]
 8004310:	4a58      	ldr	r2, [pc, #352]	@ (8004474 <HAL_RCC_ClockConfig+0x1bc>)
 8004312:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004316:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f003 0308 	and.w	r3, r3, #8
 8004320:	2b00      	cmp	r3, #0
 8004322:	d005      	beq.n	8004330 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004324:	4b53      	ldr	r3, [pc, #332]	@ (8004474 <HAL_RCC_ClockConfig+0x1bc>)
 8004326:	689b      	ldr	r3, [r3, #8]
 8004328:	4a52      	ldr	r2, [pc, #328]	@ (8004474 <HAL_RCC_ClockConfig+0x1bc>)
 800432a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800432e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004330:	4b50      	ldr	r3, [pc, #320]	@ (8004474 <HAL_RCC_ClockConfig+0x1bc>)
 8004332:	689b      	ldr	r3, [r3, #8]
 8004334:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	689b      	ldr	r3, [r3, #8]
 800433c:	494d      	ldr	r1, [pc, #308]	@ (8004474 <HAL_RCC_ClockConfig+0x1bc>)
 800433e:	4313      	orrs	r3, r2
 8004340:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f003 0301 	and.w	r3, r3, #1
 800434a:	2b00      	cmp	r3, #0
 800434c:	d044      	beq.n	80043d8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	685b      	ldr	r3, [r3, #4]
 8004352:	2b01      	cmp	r3, #1
 8004354:	d107      	bne.n	8004366 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004356:	4b47      	ldr	r3, [pc, #284]	@ (8004474 <HAL_RCC_ClockConfig+0x1bc>)
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800435e:	2b00      	cmp	r3, #0
 8004360:	d119      	bne.n	8004396 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004362:	2301      	movs	r3, #1
 8004364:	e07f      	b.n	8004466 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	685b      	ldr	r3, [r3, #4]
 800436a:	2b02      	cmp	r3, #2
 800436c:	d003      	beq.n	8004376 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004372:	2b03      	cmp	r3, #3
 8004374:	d107      	bne.n	8004386 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004376:	4b3f      	ldr	r3, [pc, #252]	@ (8004474 <HAL_RCC_ClockConfig+0x1bc>)
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800437e:	2b00      	cmp	r3, #0
 8004380:	d109      	bne.n	8004396 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004382:	2301      	movs	r3, #1
 8004384:	e06f      	b.n	8004466 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004386:	4b3b      	ldr	r3, [pc, #236]	@ (8004474 <HAL_RCC_ClockConfig+0x1bc>)
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	f003 0302 	and.w	r3, r3, #2
 800438e:	2b00      	cmp	r3, #0
 8004390:	d101      	bne.n	8004396 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004392:	2301      	movs	r3, #1
 8004394:	e067      	b.n	8004466 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004396:	4b37      	ldr	r3, [pc, #220]	@ (8004474 <HAL_RCC_ClockConfig+0x1bc>)
 8004398:	689b      	ldr	r3, [r3, #8]
 800439a:	f023 0203 	bic.w	r2, r3, #3
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	685b      	ldr	r3, [r3, #4]
 80043a2:	4934      	ldr	r1, [pc, #208]	@ (8004474 <HAL_RCC_ClockConfig+0x1bc>)
 80043a4:	4313      	orrs	r3, r2
 80043a6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80043a8:	f7fe f8a4 	bl	80024f4 <HAL_GetTick>
 80043ac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80043ae:	e00a      	b.n	80043c6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80043b0:	f7fe f8a0 	bl	80024f4 <HAL_GetTick>
 80043b4:	4602      	mov	r2, r0
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	1ad3      	subs	r3, r2, r3
 80043ba:	f241 3288 	movw	r2, #5000	@ 0x1388
 80043be:	4293      	cmp	r3, r2
 80043c0:	d901      	bls.n	80043c6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80043c2:	2303      	movs	r3, #3
 80043c4:	e04f      	b.n	8004466 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80043c6:	4b2b      	ldr	r3, [pc, #172]	@ (8004474 <HAL_RCC_ClockConfig+0x1bc>)
 80043c8:	689b      	ldr	r3, [r3, #8]
 80043ca:	f003 020c 	and.w	r2, r3, #12
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	685b      	ldr	r3, [r3, #4]
 80043d2:	009b      	lsls	r3, r3, #2
 80043d4:	429a      	cmp	r2, r3
 80043d6:	d1eb      	bne.n	80043b0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80043d8:	4b25      	ldr	r3, [pc, #148]	@ (8004470 <HAL_RCC_ClockConfig+0x1b8>)
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f003 0307 	and.w	r3, r3, #7
 80043e0:	683a      	ldr	r2, [r7, #0]
 80043e2:	429a      	cmp	r2, r3
 80043e4:	d20c      	bcs.n	8004400 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80043e6:	4b22      	ldr	r3, [pc, #136]	@ (8004470 <HAL_RCC_ClockConfig+0x1b8>)
 80043e8:	683a      	ldr	r2, [r7, #0]
 80043ea:	b2d2      	uxtb	r2, r2
 80043ec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80043ee:	4b20      	ldr	r3, [pc, #128]	@ (8004470 <HAL_RCC_ClockConfig+0x1b8>)
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	f003 0307 	and.w	r3, r3, #7
 80043f6:	683a      	ldr	r2, [r7, #0]
 80043f8:	429a      	cmp	r2, r3
 80043fa:	d001      	beq.n	8004400 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80043fc:	2301      	movs	r3, #1
 80043fe:	e032      	b.n	8004466 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f003 0304 	and.w	r3, r3, #4
 8004408:	2b00      	cmp	r3, #0
 800440a:	d008      	beq.n	800441e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800440c:	4b19      	ldr	r3, [pc, #100]	@ (8004474 <HAL_RCC_ClockConfig+0x1bc>)
 800440e:	689b      	ldr	r3, [r3, #8]
 8004410:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	68db      	ldr	r3, [r3, #12]
 8004418:	4916      	ldr	r1, [pc, #88]	@ (8004474 <HAL_RCC_ClockConfig+0x1bc>)
 800441a:	4313      	orrs	r3, r2
 800441c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f003 0308 	and.w	r3, r3, #8
 8004426:	2b00      	cmp	r3, #0
 8004428:	d009      	beq.n	800443e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800442a:	4b12      	ldr	r3, [pc, #72]	@ (8004474 <HAL_RCC_ClockConfig+0x1bc>)
 800442c:	689b      	ldr	r3, [r3, #8]
 800442e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	691b      	ldr	r3, [r3, #16]
 8004436:	00db      	lsls	r3, r3, #3
 8004438:	490e      	ldr	r1, [pc, #56]	@ (8004474 <HAL_RCC_ClockConfig+0x1bc>)
 800443a:	4313      	orrs	r3, r2
 800443c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800443e:	f000 f821 	bl	8004484 <HAL_RCC_GetSysClockFreq>
 8004442:	4602      	mov	r2, r0
 8004444:	4b0b      	ldr	r3, [pc, #44]	@ (8004474 <HAL_RCC_ClockConfig+0x1bc>)
 8004446:	689b      	ldr	r3, [r3, #8]
 8004448:	091b      	lsrs	r3, r3, #4
 800444a:	f003 030f 	and.w	r3, r3, #15
 800444e:	490a      	ldr	r1, [pc, #40]	@ (8004478 <HAL_RCC_ClockConfig+0x1c0>)
 8004450:	5ccb      	ldrb	r3, [r1, r3]
 8004452:	fa22 f303 	lsr.w	r3, r2, r3
 8004456:	4a09      	ldr	r2, [pc, #36]	@ (800447c <HAL_RCC_ClockConfig+0x1c4>)
 8004458:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800445a:	4b09      	ldr	r3, [pc, #36]	@ (8004480 <HAL_RCC_ClockConfig+0x1c8>)
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	4618      	mov	r0, r3
 8004460:	f7fe f804 	bl	800246c <HAL_InitTick>

  return HAL_OK;
 8004464:	2300      	movs	r3, #0
}
 8004466:	4618      	mov	r0, r3
 8004468:	3710      	adds	r7, #16
 800446a:	46bd      	mov	sp, r7
 800446c:	bd80      	pop	{r7, pc}
 800446e:	bf00      	nop
 8004470:	40023c00 	.word	0x40023c00
 8004474:	40023800 	.word	0x40023800
 8004478:	0800add8 	.word	0x0800add8
 800447c:	20000008 	.word	0x20000008
 8004480:	2000000c 	.word	0x2000000c

08004484 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004484:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004488:	b094      	sub	sp, #80	@ 0x50
 800448a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800448c:	2300      	movs	r3, #0
 800448e:	647b      	str	r3, [r7, #68]	@ 0x44
 8004490:	2300      	movs	r3, #0
 8004492:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004494:	2300      	movs	r3, #0
 8004496:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8004498:	2300      	movs	r3, #0
 800449a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800449c:	4b79      	ldr	r3, [pc, #484]	@ (8004684 <HAL_RCC_GetSysClockFreq+0x200>)
 800449e:	689b      	ldr	r3, [r3, #8]
 80044a0:	f003 030c 	and.w	r3, r3, #12
 80044a4:	2b08      	cmp	r3, #8
 80044a6:	d00d      	beq.n	80044c4 <HAL_RCC_GetSysClockFreq+0x40>
 80044a8:	2b08      	cmp	r3, #8
 80044aa:	f200 80e1 	bhi.w	8004670 <HAL_RCC_GetSysClockFreq+0x1ec>
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d002      	beq.n	80044b8 <HAL_RCC_GetSysClockFreq+0x34>
 80044b2:	2b04      	cmp	r3, #4
 80044b4:	d003      	beq.n	80044be <HAL_RCC_GetSysClockFreq+0x3a>
 80044b6:	e0db      	b.n	8004670 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80044b8:	4b73      	ldr	r3, [pc, #460]	@ (8004688 <HAL_RCC_GetSysClockFreq+0x204>)
 80044ba:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 80044bc:	e0db      	b.n	8004676 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80044be:	4b73      	ldr	r3, [pc, #460]	@ (800468c <HAL_RCC_GetSysClockFreq+0x208>)
 80044c0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80044c2:	e0d8      	b.n	8004676 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80044c4:	4b6f      	ldr	r3, [pc, #444]	@ (8004684 <HAL_RCC_GetSysClockFreq+0x200>)
 80044c6:	685b      	ldr	r3, [r3, #4]
 80044c8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80044cc:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80044ce:	4b6d      	ldr	r3, [pc, #436]	@ (8004684 <HAL_RCC_GetSysClockFreq+0x200>)
 80044d0:	685b      	ldr	r3, [r3, #4]
 80044d2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d063      	beq.n	80045a2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80044da:	4b6a      	ldr	r3, [pc, #424]	@ (8004684 <HAL_RCC_GetSysClockFreq+0x200>)
 80044dc:	685b      	ldr	r3, [r3, #4]
 80044de:	099b      	lsrs	r3, r3, #6
 80044e0:	2200      	movs	r2, #0
 80044e2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80044e4:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80044e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80044e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80044ec:	633b      	str	r3, [r7, #48]	@ 0x30
 80044ee:	2300      	movs	r3, #0
 80044f0:	637b      	str	r3, [r7, #52]	@ 0x34
 80044f2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80044f6:	4622      	mov	r2, r4
 80044f8:	462b      	mov	r3, r5
 80044fa:	f04f 0000 	mov.w	r0, #0
 80044fe:	f04f 0100 	mov.w	r1, #0
 8004502:	0159      	lsls	r1, r3, #5
 8004504:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004508:	0150      	lsls	r0, r2, #5
 800450a:	4602      	mov	r2, r0
 800450c:	460b      	mov	r3, r1
 800450e:	4621      	mov	r1, r4
 8004510:	1a51      	subs	r1, r2, r1
 8004512:	6139      	str	r1, [r7, #16]
 8004514:	4629      	mov	r1, r5
 8004516:	eb63 0301 	sbc.w	r3, r3, r1
 800451a:	617b      	str	r3, [r7, #20]
 800451c:	f04f 0200 	mov.w	r2, #0
 8004520:	f04f 0300 	mov.w	r3, #0
 8004524:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004528:	4659      	mov	r1, fp
 800452a:	018b      	lsls	r3, r1, #6
 800452c:	4651      	mov	r1, sl
 800452e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004532:	4651      	mov	r1, sl
 8004534:	018a      	lsls	r2, r1, #6
 8004536:	4651      	mov	r1, sl
 8004538:	ebb2 0801 	subs.w	r8, r2, r1
 800453c:	4659      	mov	r1, fp
 800453e:	eb63 0901 	sbc.w	r9, r3, r1
 8004542:	f04f 0200 	mov.w	r2, #0
 8004546:	f04f 0300 	mov.w	r3, #0
 800454a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800454e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004552:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004556:	4690      	mov	r8, r2
 8004558:	4699      	mov	r9, r3
 800455a:	4623      	mov	r3, r4
 800455c:	eb18 0303 	adds.w	r3, r8, r3
 8004560:	60bb      	str	r3, [r7, #8]
 8004562:	462b      	mov	r3, r5
 8004564:	eb49 0303 	adc.w	r3, r9, r3
 8004568:	60fb      	str	r3, [r7, #12]
 800456a:	f04f 0200 	mov.w	r2, #0
 800456e:	f04f 0300 	mov.w	r3, #0
 8004572:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004576:	4629      	mov	r1, r5
 8004578:	024b      	lsls	r3, r1, #9
 800457a:	4621      	mov	r1, r4
 800457c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004580:	4621      	mov	r1, r4
 8004582:	024a      	lsls	r2, r1, #9
 8004584:	4610      	mov	r0, r2
 8004586:	4619      	mov	r1, r3
 8004588:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800458a:	2200      	movs	r2, #0
 800458c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800458e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004590:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004594:	f7fb fe6c 	bl	8000270 <__aeabi_uldivmod>
 8004598:	4602      	mov	r2, r0
 800459a:	460b      	mov	r3, r1
 800459c:	4613      	mov	r3, r2
 800459e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80045a0:	e058      	b.n	8004654 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80045a2:	4b38      	ldr	r3, [pc, #224]	@ (8004684 <HAL_RCC_GetSysClockFreq+0x200>)
 80045a4:	685b      	ldr	r3, [r3, #4]
 80045a6:	099b      	lsrs	r3, r3, #6
 80045a8:	2200      	movs	r2, #0
 80045aa:	4618      	mov	r0, r3
 80045ac:	4611      	mov	r1, r2
 80045ae:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80045b2:	623b      	str	r3, [r7, #32]
 80045b4:	2300      	movs	r3, #0
 80045b6:	627b      	str	r3, [r7, #36]	@ 0x24
 80045b8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80045bc:	4642      	mov	r2, r8
 80045be:	464b      	mov	r3, r9
 80045c0:	f04f 0000 	mov.w	r0, #0
 80045c4:	f04f 0100 	mov.w	r1, #0
 80045c8:	0159      	lsls	r1, r3, #5
 80045ca:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80045ce:	0150      	lsls	r0, r2, #5
 80045d0:	4602      	mov	r2, r0
 80045d2:	460b      	mov	r3, r1
 80045d4:	4641      	mov	r1, r8
 80045d6:	ebb2 0a01 	subs.w	sl, r2, r1
 80045da:	4649      	mov	r1, r9
 80045dc:	eb63 0b01 	sbc.w	fp, r3, r1
 80045e0:	f04f 0200 	mov.w	r2, #0
 80045e4:	f04f 0300 	mov.w	r3, #0
 80045e8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80045ec:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80045f0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80045f4:	ebb2 040a 	subs.w	r4, r2, sl
 80045f8:	eb63 050b 	sbc.w	r5, r3, fp
 80045fc:	f04f 0200 	mov.w	r2, #0
 8004600:	f04f 0300 	mov.w	r3, #0
 8004604:	00eb      	lsls	r3, r5, #3
 8004606:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800460a:	00e2      	lsls	r2, r4, #3
 800460c:	4614      	mov	r4, r2
 800460e:	461d      	mov	r5, r3
 8004610:	4643      	mov	r3, r8
 8004612:	18e3      	adds	r3, r4, r3
 8004614:	603b      	str	r3, [r7, #0]
 8004616:	464b      	mov	r3, r9
 8004618:	eb45 0303 	adc.w	r3, r5, r3
 800461c:	607b      	str	r3, [r7, #4]
 800461e:	f04f 0200 	mov.w	r2, #0
 8004622:	f04f 0300 	mov.w	r3, #0
 8004626:	e9d7 4500 	ldrd	r4, r5, [r7]
 800462a:	4629      	mov	r1, r5
 800462c:	028b      	lsls	r3, r1, #10
 800462e:	4621      	mov	r1, r4
 8004630:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004634:	4621      	mov	r1, r4
 8004636:	028a      	lsls	r2, r1, #10
 8004638:	4610      	mov	r0, r2
 800463a:	4619      	mov	r1, r3
 800463c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800463e:	2200      	movs	r2, #0
 8004640:	61bb      	str	r3, [r7, #24]
 8004642:	61fa      	str	r2, [r7, #28]
 8004644:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004648:	f7fb fe12 	bl	8000270 <__aeabi_uldivmod>
 800464c:	4602      	mov	r2, r0
 800464e:	460b      	mov	r3, r1
 8004650:	4613      	mov	r3, r2
 8004652:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004654:	4b0b      	ldr	r3, [pc, #44]	@ (8004684 <HAL_RCC_GetSysClockFreq+0x200>)
 8004656:	685b      	ldr	r3, [r3, #4]
 8004658:	0c1b      	lsrs	r3, r3, #16
 800465a:	f003 0303 	and.w	r3, r3, #3
 800465e:	3301      	adds	r3, #1
 8004660:	005b      	lsls	r3, r3, #1
 8004662:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8004664:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004666:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004668:	fbb2 f3f3 	udiv	r3, r2, r3
 800466c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800466e:	e002      	b.n	8004676 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004670:	4b05      	ldr	r3, [pc, #20]	@ (8004688 <HAL_RCC_GetSysClockFreq+0x204>)
 8004672:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004674:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004676:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004678:	4618      	mov	r0, r3
 800467a:	3750      	adds	r7, #80	@ 0x50
 800467c:	46bd      	mov	sp, r7
 800467e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004682:	bf00      	nop
 8004684:	40023800 	.word	0x40023800
 8004688:	00f42400 	.word	0x00f42400
 800468c:	007a1200 	.word	0x007a1200

08004690 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004690:	b480      	push	{r7}
 8004692:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004694:	4b03      	ldr	r3, [pc, #12]	@ (80046a4 <HAL_RCC_GetHCLKFreq+0x14>)
 8004696:	681b      	ldr	r3, [r3, #0]
}
 8004698:	4618      	mov	r0, r3
 800469a:	46bd      	mov	sp, r7
 800469c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a0:	4770      	bx	lr
 80046a2:	bf00      	nop
 80046a4:	20000008 	.word	0x20000008

080046a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80046a8:	b580      	push	{r7, lr}
 80046aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80046ac:	f7ff fff0 	bl	8004690 <HAL_RCC_GetHCLKFreq>
 80046b0:	4602      	mov	r2, r0
 80046b2:	4b05      	ldr	r3, [pc, #20]	@ (80046c8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80046b4:	689b      	ldr	r3, [r3, #8]
 80046b6:	0a9b      	lsrs	r3, r3, #10
 80046b8:	f003 0307 	and.w	r3, r3, #7
 80046bc:	4903      	ldr	r1, [pc, #12]	@ (80046cc <HAL_RCC_GetPCLK1Freq+0x24>)
 80046be:	5ccb      	ldrb	r3, [r1, r3]
 80046c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80046c4:	4618      	mov	r0, r3
 80046c6:	bd80      	pop	{r7, pc}
 80046c8:	40023800 	.word	0x40023800
 80046cc:	0800ade8 	.word	0x0800ade8

080046d0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80046d0:	b580      	push	{r7, lr}
 80046d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80046d4:	f7ff ffdc 	bl	8004690 <HAL_RCC_GetHCLKFreq>
 80046d8:	4602      	mov	r2, r0
 80046da:	4b05      	ldr	r3, [pc, #20]	@ (80046f0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80046dc:	689b      	ldr	r3, [r3, #8]
 80046de:	0b5b      	lsrs	r3, r3, #13
 80046e0:	f003 0307 	and.w	r3, r3, #7
 80046e4:	4903      	ldr	r1, [pc, #12]	@ (80046f4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80046e6:	5ccb      	ldrb	r3, [r1, r3]
 80046e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80046ec:	4618      	mov	r0, r3
 80046ee:	bd80      	pop	{r7, pc}
 80046f0:	40023800 	.word	0x40023800
 80046f4:	0800ade8 	.word	0x0800ade8

080046f8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80046f8:	b580      	push	{r7, lr}
 80046fa:	b082      	sub	sp, #8
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	2b00      	cmp	r3, #0
 8004704:	d101      	bne.n	800470a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004706:	2301      	movs	r3, #1
 8004708:	e07b      	b.n	8004802 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800470e:	2b00      	cmp	r3, #0
 8004710:	d108      	bne.n	8004724 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	685b      	ldr	r3, [r3, #4]
 8004716:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800471a:	d009      	beq.n	8004730 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	2200      	movs	r2, #0
 8004720:	61da      	str	r2, [r3, #28]
 8004722:	e005      	b.n	8004730 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	2200      	movs	r2, #0
 8004728:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	2200      	movs	r2, #0
 800472e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	2200      	movs	r2, #0
 8004734:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800473c:	b2db      	uxtb	r3, r3
 800473e:	2b00      	cmp	r3, #0
 8004740:	d106      	bne.n	8004750 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	2200      	movs	r2, #0
 8004746:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800474a:	6878      	ldr	r0, [r7, #4]
 800474c:	f7fd fa08 	bl	8001b60 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	2202      	movs	r2, #2
 8004754:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	681a      	ldr	r2, [r3, #0]
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004766:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	685b      	ldr	r3, [r3, #4]
 800476c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	689b      	ldr	r3, [r3, #8]
 8004774:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004778:	431a      	orrs	r2, r3
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	68db      	ldr	r3, [r3, #12]
 800477e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004782:	431a      	orrs	r2, r3
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	691b      	ldr	r3, [r3, #16]
 8004788:	f003 0302 	and.w	r3, r3, #2
 800478c:	431a      	orrs	r2, r3
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	695b      	ldr	r3, [r3, #20]
 8004792:	f003 0301 	and.w	r3, r3, #1
 8004796:	431a      	orrs	r2, r3
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	699b      	ldr	r3, [r3, #24]
 800479c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80047a0:	431a      	orrs	r2, r3
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	69db      	ldr	r3, [r3, #28]
 80047a6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80047aa:	431a      	orrs	r2, r3
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	6a1b      	ldr	r3, [r3, #32]
 80047b0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80047b4:	ea42 0103 	orr.w	r1, r2, r3
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047bc:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	430a      	orrs	r2, r1
 80047c6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	699b      	ldr	r3, [r3, #24]
 80047cc:	0c1b      	lsrs	r3, r3, #16
 80047ce:	f003 0104 	and.w	r1, r3, #4
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047d6:	f003 0210 	and.w	r2, r3, #16
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	430a      	orrs	r2, r1
 80047e0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	69da      	ldr	r2, [r3, #28]
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80047f0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	2200      	movs	r2, #0
 80047f6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	2201      	movs	r2, #1
 80047fc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8004800:	2300      	movs	r3, #0
}
 8004802:	4618      	mov	r0, r3
 8004804:	3708      	adds	r7, #8
 8004806:	46bd      	mov	sp, r7
 8004808:	bd80      	pop	{r7, pc}

0800480a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800480a:	b580      	push	{r7, lr}
 800480c:	b088      	sub	sp, #32
 800480e:	af00      	add	r7, sp, #0
 8004810:	60f8      	str	r0, [r7, #12]
 8004812:	60b9      	str	r1, [r7, #8]
 8004814:	603b      	str	r3, [r7, #0]
 8004816:	4613      	mov	r3, r2
 8004818:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800481a:	2300      	movs	r3, #0
 800481c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004824:	2b01      	cmp	r3, #1
 8004826:	d101      	bne.n	800482c <HAL_SPI_Transmit+0x22>
 8004828:	2302      	movs	r3, #2
 800482a:	e126      	b.n	8004a7a <HAL_SPI_Transmit+0x270>
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	2201      	movs	r2, #1
 8004830:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004834:	f7fd fe5e 	bl	80024f4 <HAL_GetTick>
 8004838:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800483a:	88fb      	ldrh	r3, [r7, #6]
 800483c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004844:	b2db      	uxtb	r3, r3
 8004846:	2b01      	cmp	r3, #1
 8004848:	d002      	beq.n	8004850 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800484a:	2302      	movs	r3, #2
 800484c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800484e:	e10b      	b.n	8004a68 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8004850:	68bb      	ldr	r3, [r7, #8]
 8004852:	2b00      	cmp	r3, #0
 8004854:	d002      	beq.n	800485c <HAL_SPI_Transmit+0x52>
 8004856:	88fb      	ldrh	r3, [r7, #6]
 8004858:	2b00      	cmp	r3, #0
 800485a:	d102      	bne.n	8004862 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800485c:	2301      	movs	r3, #1
 800485e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004860:	e102      	b.n	8004a68 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	2203      	movs	r2, #3
 8004866:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	2200      	movs	r2, #0
 800486e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	68ba      	ldr	r2, [r7, #8]
 8004874:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	88fa      	ldrh	r2, [r7, #6]
 800487a:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	88fa      	ldrh	r2, [r7, #6]
 8004880:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	2200      	movs	r2, #0
 8004886:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	2200      	movs	r2, #0
 800488c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	2200      	movs	r2, #0
 8004892:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	2200      	movs	r2, #0
 8004898:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	2200      	movs	r2, #0
 800489e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	689b      	ldr	r3, [r3, #8]
 80048a4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80048a8:	d10f      	bne.n	80048ca <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	681a      	ldr	r2, [r3, #0]
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80048b8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	681a      	ldr	r2, [r3, #0]
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80048c8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80048d4:	2b40      	cmp	r3, #64	@ 0x40
 80048d6:	d007      	beq.n	80048e8 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	681a      	ldr	r2, [r3, #0]
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80048e6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	68db      	ldr	r3, [r3, #12]
 80048ec:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80048f0:	d14b      	bne.n	800498a <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	685b      	ldr	r3, [r3, #4]
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d002      	beq.n	8004900 <HAL_SPI_Transmit+0xf6>
 80048fa:	8afb      	ldrh	r3, [r7, #22]
 80048fc:	2b01      	cmp	r3, #1
 80048fe:	d13e      	bne.n	800497e <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004904:	881a      	ldrh	r2, [r3, #0]
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004910:	1c9a      	adds	r2, r3, #2
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800491a:	b29b      	uxth	r3, r3
 800491c:	3b01      	subs	r3, #1
 800491e:	b29a      	uxth	r2, r3
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004924:	e02b      	b.n	800497e <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	689b      	ldr	r3, [r3, #8]
 800492c:	f003 0302 	and.w	r3, r3, #2
 8004930:	2b02      	cmp	r3, #2
 8004932:	d112      	bne.n	800495a <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004938:	881a      	ldrh	r2, [r3, #0]
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004944:	1c9a      	adds	r2, r3, #2
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800494e:	b29b      	uxth	r3, r3
 8004950:	3b01      	subs	r3, #1
 8004952:	b29a      	uxth	r2, r3
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	86da      	strh	r2, [r3, #54]	@ 0x36
 8004958:	e011      	b.n	800497e <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800495a:	f7fd fdcb 	bl	80024f4 <HAL_GetTick>
 800495e:	4602      	mov	r2, r0
 8004960:	69bb      	ldr	r3, [r7, #24]
 8004962:	1ad3      	subs	r3, r2, r3
 8004964:	683a      	ldr	r2, [r7, #0]
 8004966:	429a      	cmp	r2, r3
 8004968:	d803      	bhi.n	8004972 <HAL_SPI_Transmit+0x168>
 800496a:	683b      	ldr	r3, [r7, #0]
 800496c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004970:	d102      	bne.n	8004978 <HAL_SPI_Transmit+0x16e>
 8004972:	683b      	ldr	r3, [r7, #0]
 8004974:	2b00      	cmp	r3, #0
 8004976:	d102      	bne.n	800497e <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8004978:	2303      	movs	r3, #3
 800497a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800497c:	e074      	b.n	8004a68 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004982:	b29b      	uxth	r3, r3
 8004984:	2b00      	cmp	r3, #0
 8004986:	d1ce      	bne.n	8004926 <HAL_SPI_Transmit+0x11c>
 8004988:	e04c      	b.n	8004a24 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	685b      	ldr	r3, [r3, #4]
 800498e:	2b00      	cmp	r3, #0
 8004990:	d002      	beq.n	8004998 <HAL_SPI_Transmit+0x18e>
 8004992:	8afb      	ldrh	r3, [r7, #22]
 8004994:	2b01      	cmp	r3, #1
 8004996:	d140      	bne.n	8004a1a <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	330c      	adds	r3, #12
 80049a2:	7812      	ldrb	r2, [r2, #0]
 80049a4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049aa:	1c5a      	adds	r2, r3, #1
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80049b4:	b29b      	uxth	r3, r3
 80049b6:	3b01      	subs	r3, #1
 80049b8:	b29a      	uxth	r2, r3
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 80049be:	e02c      	b.n	8004a1a <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	689b      	ldr	r3, [r3, #8]
 80049c6:	f003 0302 	and.w	r3, r3, #2
 80049ca:	2b02      	cmp	r3, #2
 80049cc:	d113      	bne.n	80049f6 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	330c      	adds	r3, #12
 80049d8:	7812      	ldrb	r2, [r2, #0]
 80049da:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049e0:	1c5a      	adds	r2, r3, #1
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80049ea:	b29b      	uxth	r3, r3
 80049ec:	3b01      	subs	r3, #1
 80049ee:	b29a      	uxth	r2, r3
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	86da      	strh	r2, [r3, #54]	@ 0x36
 80049f4:	e011      	b.n	8004a1a <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80049f6:	f7fd fd7d 	bl	80024f4 <HAL_GetTick>
 80049fa:	4602      	mov	r2, r0
 80049fc:	69bb      	ldr	r3, [r7, #24]
 80049fe:	1ad3      	subs	r3, r2, r3
 8004a00:	683a      	ldr	r2, [r7, #0]
 8004a02:	429a      	cmp	r2, r3
 8004a04:	d803      	bhi.n	8004a0e <HAL_SPI_Transmit+0x204>
 8004a06:	683b      	ldr	r3, [r7, #0]
 8004a08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a0c:	d102      	bne.n	8004a14 <HAL_SPI_Transmit+0x20a>
 8004a0e:	683b      	ldr	r3, [r7, #0]
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d102      	bne.n	8004a1a <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8004a14:	2303      	movs	r3, #3
 8004a16:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004a18:	e026      	b.n	8004a68 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004a1e:	b29b      	uxth	r3, r3
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d1cd      	bne.n	80049c0 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004a24:	69ba      	ldr	r2, [r7, #24]
 8004a26:	6839      	ldr	r1, [r7, #0]
 8004a28:	68f8      	ldr	r0, [r7, #12]
 8004a2a:	f000 fbcb 	bl	80051c4 <SPI_EndRxTxTransaction>
 8004a2e:	4603      	mov	r3, r0
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d002      	beq.n	8004a3a <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	2220      	movs	r2, #32
 8004a38:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	689b      	ldr	r3, [r3, #8]
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d10a      	bne.n	8004a58 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004a42:	2300      	movs	r3, #0
 8004a44:	613b      	str	r3, [r7, #16]
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	68db      	ldr	r3, [r3, #12]
 8004a4c:	613b      	str	r3, [r7, #16]
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	689b      	ldr	r3, [r3, #8]
 8004a54:	613b      	str	r3, [r7, #16]
 8004a56:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d002      	beq.n	8004a66 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8004a60:	2301      	movs	r3, #1
 8004a62:	77fb      	strb	r3, [r7, #31]
 8004a64:	e000      	b.n	8004a68 <HAL_SPI_Transmit+0x25e>
  }

error:
 8004a66:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	2201      	movs	r2, #1
 8004a6c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	2200      	movs	r2, #0
 8004a74:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8004a78:	7ffb      	ldrb	r3, [r7, #31]
}
 8004a7a:	4618      	mov	r0, r3
 8004a7c:	3720      	adds	r7, #32
 8004a7e:	46bd      	mov	sp, r7
 8004a80:	bd80      	pop	{r7, pc}

08004a82 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004a82:	b580      	push	{r7, lr}
 8004a84:	b088      	sub	sp, #32
 8004a86:	af02      	add	r7, sp, #8
 8004a88:	60f8      	str	r0, [r7, #12]
 8004a8a:	60b9      	str	r1, [r7, #8]
 8004a8c:	603b      	str	r3, [r7, #0]
 8004a8e:	4613      	mov	r3, r2
 8004a90:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004a92:	2300      	movs	r3, #0
 8004a94:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	685b      	ldr	r3, [r3, #4]
 8004a9a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004a9e:	d112      	bne.n	8004ac6 <HAL_SPI_Receive+0x44>
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	689b      	ldr	r3, [r3, #8]
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d10e      	bne.n	8004ac6 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	2204      	movs	r2, #4
 8004aac:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004ab0:	88fa      	ldrh	r2, [r7, #6]
 8004ab2:	683b      	ldr	r3, [r7, #0]
 8004ab4:	9300      	str	r3, [sp, #0]
 8004ab6:	4613      	mov	r3, r2
 8004ab8:	68ba      	ldr	r2, [r7, #8]
 8004aba:	68b9      	ldr	r1, [r7, #8]
 8004abc:	68f8      	ldr	r0, [r7, #12]
 8004abe:	f000 f8f1 	bl	8004ca4 <HAL_SPI_TransmitReceive>
 8004ac2:	4603      	mov	r3, r0
 8004ac4:	e0ea      	b.n	8004c9c <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004acc:	2b01      	cmp	r3, #1
 8004ace:	d101      	bne.n	8004ad4 <HAL_SPI_Receive+0x52>
 8004ad0:	2302      	movs	r3, #2
 8004ad2:	e0e3      	b.n	8004c9c <HAL_SPI_Receive+0x21a>
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	2201      	movs	r2, #1
 8004ad8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004adc:	f7fd fd0a 	bl	80024f4 <HAL_GetTick>
 8004ae0:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004ae8:	b2db      	uxtb	r3, r3
 8004aea:	2b01      	cmp	r3, #1
 8004aec:	d002      	beq.n	8004af4 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8004aee:	2302      	movs	r3, #2
 8004af0:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004af2:	e0ca      	b.n	8004c8a <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8004af4:	68bb      	ldr	r3, [r7, #8]
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d002      	beq.n	8004b00 <HAL_SPI_Receive+0x7e>
 8004afa:	88fb      	ldrh	r3, [r7, #6]
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d102      	bne.n	8004b06 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8004b00:	2301      	movs	r3, #1
 8004b02:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004b04:	e0c1      	b.n	8004c8a <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	2204      	movs	r2, #4
 8004b0a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	2200      	movs	r2, #0
 8004b12:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	68ba      	ldr	r2, [r7, #8]
 8004b18:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	88fa      	ldrh	r2, [r7, #6]
 8004b1e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	88fa      	ldrh	r2, [r7, #6]
 8004b24:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	2200      	movs	r2, #0
 8004b2a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	2200      	movs	r2, #0
 8004b30:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	2200      	movs	r2, #0
 8004b36:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	2200      	movs	r2, #0
 8004b3c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	2200      	movs	r2, #0
 8004b42:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	689b      	ldr	r3, [r3, #8]
 8004b48:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004b4c:	d10f      	bne.n	8004b6e <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	681a      	ldr	r2, [r3, #0]
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004b5c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	681a      	ldr	r2, [r3, #0]
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8004b6c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b78:	2b40      	cmp	r3, #64	@ 0x40
 8004b7a:	d007      	beq.n	8004b8c <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	681a      	ldr	r2, [r3, #0]
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004b8a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	68db      	ldr	r3, [r3, #12]
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d162      	bne.n	8004c5a <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004b94:	e02e      	b.n	8004bf4 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	689b      	ldr	r3, [r3, #8]
 8004b9c:	f003 0301 	and.w	r3, r3, #1
 8004ba0:	2b01      	cmp	r3, #1
 8004ba2:	d115      	bne.n	8004bd0 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	f103 020c 	add.w	r2, r3, #12
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004bb0:	7812      	ldrb	r2, [r2, #0]
 8004bb2:	b2d2      	uxtb	r2, r2
 8004bb4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004bba:	1c5a      	adds	r2, r3, #1
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004bc4:	b29b      	uxth	r3, r3
 8004bc6:	3b01      	subs	r3, #1
 8004bc8:	b29a      	uxth	r2, r3
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004bce:	e011      	b.n	8004bf4 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004bd0:	f7fd fc90 	bl	80024f4 <HAL_GetTick>
 8004bd4:	4602      	mov	r2, r0
 8004bd6:	693b      	ldr	r3, [r7, #16]
 8004bd8:	1ad3      	subs	r3, r2, r3
 8004bda:	683a      	ldr	r2, [r7, #0]
 8004bdc:	429a      	cmp	r2, r3
 8004bde:	d803      	bhi.n	8004be8 <HAL_SPI_Receive+0x166>
 8004be0:	683b      	ldr	r3, [r7, #0]
 8004be2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004be6:	d102      	bne.n	8004bee <HAL_SPI_Receive+0x16c>
 8004be8:	683b      	ldr	r3, [r7, #0]
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d102      	bne.n	8004bf4 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8004bee:	2303      	movs	r3, #3
 8004bf0:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004bf2:	e04a      	b.n	8004c8a <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004bf8:	b29b      	uxth	r3, r3
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d1cb      	bne.n	8004b96 <HAL_SPI_Receive+0x114>
 8004bfe:	e031      	b.n	8004c64 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	689b      	ldr	r3, [r3, #8]
 8004c06:	f003 0301 	and.w	r3, r3, #1
 8004c0a:	2b01      	cmp	r3, #1
 8004c0c:	d113      	bne.n	8004c36 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	68da      	ldr	r2, [r3, #12]
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c18:	b292      	uxth	r2, r2
 8004c1a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c20:	1c9a      	adds	r2, r3, #2
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004c2a:	b29b      	uxth	r3, r3
 8004c2c:	3b01      	subs	r3, #1
 8004c2e:	b29a      	uxth	r2, r3
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004c34:	e011      	b.n	8004c5a <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004c36:	f7fd fc5d 	bl	80024f4 <HAL_GetTick>
 8004c3a:	4602      	mov	r2, r0
 8004c3c:	693b      	ldr	r3, [r7, #16]
 8004c3e:	1ad3      	subs	r3, r2, r3
 8004c40:	683a      	ldr	r2, [r7, #0]
 8004c42:	429a      	cmp	r2, r3
 8004c44:	d803      	bhi.n	8004c4e <HAL_SPI_Receive+0x1cc>
 8004c46:	683b      	ldr	r3, [r7, #0]
 8004c48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c4c:	d102      	bne.n	8004c54 <HAL_SPI_Receive+0x1d2>
 8004c4e:	683b      	ldr	r3, [r7, #0]
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d102      	bne.n	8004c5a <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8004c54:	2303      	movs	r3, #3
 8004c56:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004c58:	e017      	b.n	8004c8a <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004c5e:	b29b      	uxth	r3, r3
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d1cd      	bne.n	8004c00 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004c64:	693a      	ldr	r2, [r7, #16]
 8004c66:	6839      	ldr	r1, [r7, #0]
 8004c68:	68f8      	ldr	r0, [r7, #12]
 8004c6a:	f000 fa45 	bl	80050f8 <SPI_EndRxTransaction>
 8004c6e:	4603      	mov	r3, r0
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d002      	beq.n	8004c7a <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	2220      	movs	r2, #32
 8004c78:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d002      	beq.n	8004c88 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8004c82:	2301      	movs	r3, #1
 8004c84:	75fb      	strb	r3, [r7, #23]
 8004c86:	e000      	b.n	8004c8a <HAL_SPI_Receive+0x208>
  }

error :
 8004c88:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	2201      	movs	r2, #1
 8004c8e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  __HAL_UNLOCK(hspi);
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	2200      	movs	r2, #0
 8004c96:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8004c9a:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c9c:	4618      	mov	r0, r3
 8004c9e:	3718      	adds	r7, #24
 8004ca0:	46bd      	mov	sp, r7
 8004ca2:	bd80      	pop	{r7, pc}

08004ca4 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004ca4:	b580      	push	{r7, lr}
 8004ca6:	b08c      	sub	sp, #48	@ 0x30
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	60f8      	str	r0, [r7, #12]
 8004cac:	60b9      	str	r1, [r7, #8]
 8004cae:	607a      	str	r2, [r7, #4]
 8004cb0:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004cb2:	2301      	movs	r3, #1
 8004cb4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004cb6:	2300      	movs	r3, #0
 8004cb8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004cc2:	2b01      	cmp	r3, #1
 8004cc4:	d101      	bne.n	8004cca <HAL_SPI_TransmitReceive+0x26>
 8004cc6:	2302      	movs	r3, #2
 8004cc8:	e18a      	b.n	8004fe0 <HAL_SPI_TransmitReceive+0x33c>
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	2201      	movs	r2, #1
 8004cce:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004cd2:	f7fd fc0f 	bl	80024f4 <HAL_GetTick>
 8004cd6:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004cde:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  tmp_mode            = hspi->Init.Mode;
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	685b      	ldr	r3, [r3, #4]
 8004ce6:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8004ce8:	887b      	ldrh	r3, [r7, #2]
 8004cea:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004cec:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004cf0:	2b01      	cmp	r3, #1
 8004cf2:	d00f      	beq.n	8004d14 <HAL_SPI_TransmitReceive+0x70>
 8004cf4:	69fb      	ldr	r3, [r7, #28]
 8004cf6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004cfa:	d107      	bne.n	8004d0c <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	689b      	ldr	r3, [r3, #8]
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d103      	bne.n	8004d0c <HAL_SPI_TransmitReceive+0x68>
 8004d04:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004d08:	2b04      	cmp	r3, #4
 8004d0a:	d003      	beq.n	8004d14 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8004d0c:	2302      	movs	r3, #2
 8004d0e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8004d12:	e15b      	b.n	8004fcc <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004d14:	68bb      	ldr	r3, [r7, #8]
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d005      	beq.n	8004d26 <HAL_SPI_TransmitReceive+0x82>
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d002      	beq.n	8004d26 <HAL_SPI_TransmitReceive+0x82>
 8004d20:	887b      	ldrh	r3, [r7, #2]
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d103      	bne.n	8004d2e <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8004d26:	2301      	movs	r3, #1
 8004d28:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8004d2c:	e14e      	b.n	8004fcc <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004d34:	b2db      	uxtb	r3, r3
 8004d36:	2b04      	cmp	r3, #4
 8004d38:	d003      	beq.n	8004d42 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	2205      	movs	r2, #5
 8004d3e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	2200      	movs	r2, #0
 8004d46:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	687a      	ldr	r2, [r7, #4]
 8004d4c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	887a      	ldrh	r2, [r7, #2]
 8004d52:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	887a      	ldrh	r2, [r7, #2]
 8004d58:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	68ba      	ldr	r2, [r7, #8]
 8004d5e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	887a      	ldrh	r2, [r7, #2]
 8004d64:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	887a      	ldrh	r2, [r7, #2]
 8004d6a:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	2200      	movs	r2, #0
 8004d70:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	2200      	movs	r2, #0
 8004d76:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d82:	2b40      	cmp	r3, #64	@ 0x40
 8004d84:	d007      	beq.n	8004d96 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	681a      	ldr	r2, [r3, #0]
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004d94:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	68db      	ldr	r3, [r3, #12]
 8004d9a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004d9e:	d178      	bne.n	8004e92 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	685b      	ldr	r3, [r3, #4]
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d002      	beq.n	8004dae <HAL_SPI_TransmitReceive+0x10a>
 8004da8:	8b7b      	ldrh	r3, [r7, #26]
 8004daa:	2b01      	cmp	r3, #1
 8004dac:	d166      	bne.n	8004e7c <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004db2:	881a      	ldrh	r2, [r3, #0]
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004dbe:	1c9a      	adds	r2, r3, #2
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004dc8:	b29b      	uxth	r3, r3
 8004dca:	3b01      	subs	r3, #1
 8004dcc:	b29a      	uxth	r2, r3
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004dd2:	e053      	b.n	8004e7c <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	689b      	ldr	r3, [r3, #8]
 8004dda:	f003 0302 	and.w	r3, r3, #2
 8004dde:	2b02      	cmp	r3, #2
 8004de0:	d11b      	bne.n	8004e1a <HAL_SPI_TransmitReceive+0x176>
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004de6:	b29b      	uxth	r3, r3
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d016      	beq.n	8004e1a <HAL_SPI_TransmitReceive+0x176>
 8004dec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004dee:	2b01      	cmp	r3, #1
 8004df0:	d113      	bne.n	8004e1a <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004df6:	881a      	ldrh	r2, [r3, #0]
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e02:	1c9a      	adds	r2, r3, #2
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004e0c:	b29b      	uxth	r3, r3
 8004e0e:	3b01      	subs	r3, #1
 8004e10:	b29a      	uxth	r2, r3
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004e16:	2300      	movs	r3, #0
 8004e18:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	689b      	ldr	r3, [r3, #8]
 8004e20:	f003 0301 	and.w	r3, r3, #1
 8004e24:	2b01      	cmp	r3, #1
 8004e26:	d119      	bne.n	8004e5c <HAL_SPI_TransmitReceive+0x1b8>
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004e2c:	b29b      	uxth	r3, r3
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d014      	beq.n	8004e5c <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	68da      	ldr	r2, [r3, #12]
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e3c:	b292      	uxth	r2, r2
 8004e3e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e44:	1c9a      	adds	r2, r3, #2
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004e4e:	b29b      	uxth	r3, r3
 8004e50:	3b01      	subs	r3, #1
 8004e52:	b29a      	uxth	r2, r3
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004e58:	2301      	movs	r3, #1
 8004e5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004e5c:	f7fd fb4a 	bl	80024f4 <HAL_GetTick>
 8004e60:	4602      	mov	r2, r0
 8004e62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e64:	1ad3      	subs	r3, r2, r3
 8004e66:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004e68:	429a      	cmp	r2, r3
 8004e6a:	d807      	bhi.n	8004e7c <HAL_SPI_TransmitReceive+0x1d8>
 8004e6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e72:	d003      	beq.n	8004e7c <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8004e74:	2303      	movs	r3, #3
 8004e76:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        goto error;
 8004e7a:	e0a7      	b.n	8004fcc <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004e80:	b29b      	uxth	r3, r3
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d1a6      	bne.n	8004dd4 <HAL_SPI_TransmitReceive+0x130>
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004e8a:	b29b      	uxth	r3, r3
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d1a1      	bne.n	8004dd4 <HAL_SPI_TransmitReceive+0x130>
 8004e90:	e07c      	b.n	8004f8c <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	685b      	ldr	r3, [r3, #4]
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d002      	beq.n	8004ea0 <HAL_SPI_TransmitReceive+0x1fc>
 8004e9a:	8b7b      	ldrh	r3, [r7, #26]
 8004e9c:	2b01      	cmp	r3, #1
 8004e9e:	d16b      	bne.n	8004f78 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	330c      	adds	r3, #12
 8004eaa:	7812      	ldrb	r2, [r2, #0]
 8004eac:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004eb2:	1c5a      	adds	r2, r3, #1
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004ebc:	b29b      	uxth	r3, r3
 8004ebe:	3b01      	subs	r3, #1
 8004ec0:	b29a      	uxth	r2, r3
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004ec6:	e057      	b.n	8004f78 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	689b      	ldr	r3, [r3, #8]
 8004ece:	f003 0302 	and.w	r3, r3, #2
 8004ed2:	2b02      	cmp	r3, #2
 8004ed4:	d11c      	bne.n	8004f10 <HAL_SPI_TransmitReceive+0x26c>
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004eda:	b29b      	uxth	r3, r3
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d017      	beq.n	8004f10 <HAL_SPI_TransmitReceive+0x26c>
 8004ee0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ee2:	2b01      	cmp	r3, #1
 8004ee4:	d114      	bne.n	8004f10 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	330c      	adds	r3, #12
 8004ef0:	7812      	ldrb	r2, [r2, #0]
 8004ef2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ef8:	1c5a      	adds	r2, r3, #1
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004f02:	b29b      	uxth	r3, r3
 8004f04:	3b01      	subs	r3, #1
 8004f06:	b29a      	uxth	r2, r3
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004f0c:	2300      	movs	r3, #0
 8004f0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	689b      	ldr	r3, [r3, #8]
 8004f16:	f003 0301 	and.w	r3, r3, #1
 8004f1a:	2b01      	cmp	r3, #1
 8004f1c:	d119      	bne.n	8004f52 <HAL_SPI_TransmitReceive+0x2ae>
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004f22:	b29b      	uxth	r3, r3
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d014      	beq.n	8004f52 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	68da      	ldr	r2, [r3, #12]
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f32:	b2d2      	uxtb	r2, r2
 8004f34:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f3a:	1c5a      	adds	r2, r3, #1
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004f44:	b29b      	uxth	r3, r3
 8004f46:	3b01      	subs	r3, #1
 8004f48:	b29a      	uxth	r2, r3
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004f4e:	2301      	movs	r3, #1
 8004f50:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004f52:	f7fd facf 	bl	80024f4 <HAL_GetTick>
 8004f56:	4602      	mov	r2, r0
 8004f58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f5a:	1ad3      	subs	r3, r2, r3
 8004f5c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004f5e:	429a      	cmp	r2, r3
 8004f60:	d803      	bhi.n	8004f6a <HAL_SPI_TransmitReceive+0x2c6>
 8004f62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f68:	d102      	bne.n	8004f70 <HAL_SPI_TransmitReceive+0x2cc>
 8004f6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d103      	bne.n	8004f78 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8004f70:	2303      	movs	r3, #3
 8004f72:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        goto error;
 8004f76:	e029      	b.n	8004fcc <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004f7c:	b29b      	uxth	r3, r3
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d1a2      	bne.n	8004ec8 <HAL_SPI_TransmitReceive+0x224>
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004f86:	b29b      	uxth	r3, r3
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d19d      	bne.n	8004ec8 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004f8c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004f8e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8004f90:	68f8      	ldr	r0, [r7, #12]
 8004f92:	f000 f917 	bl	80051c4 <SPI_EndRxTxTransaction>
 8004f96:	4603      	mov	r3, r0
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d006      	beq.n	8004faa <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8004f9c:	2301      	movs	r3, #1
 8004f9e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	2220      	movs	r2, #32
 8004fa6:	655a      	str	r2, [r3, #84]	@ 0x54
    goto error;
 8004fa8:	e010      	b.n	8004fcc <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	689b      	ldr	r3, [r3, #8]
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d10b      	bne.n	8004fca <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004fb2:	2300      	movs	r3, #0
 8004fb4:	617b      	str	r3, [r7, #20]
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	68db      	ldr	r3, [r3, #12]
 8004fbc:	617b      	str	r3, [r7, #20]
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	689b      	ldr	r3, [r3, #8]
 8004fc4:	617b      	str	r3, [r7, #20]
 8004fc6:	697b      	ldr	r3, [r7, #20]
 8004fc8:	e000      	b.n	8004fcc <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8004fca:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	2201      	movs	r2, #1
 8004fd0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  __HAL_UNLOCK(hspi);
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	2200      	movs	r2, #0
 8004fd8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8004fdc:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 8004fe0:	4618      	mov	r0, r3
 8004fe2:	3730      	adds	r7, #48	@ 0x30
 8004fe4:	46bd      	mov	sp, r7
 8004fe6:	bd80      	pop	{r7, pc}

08004fe8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004fe8:	b580      	push	{r7, lr}
 8004fea:	b088      	sub	sp, #32
 8004fec:	af00      	add	r7, sp, #0
 8004fee:	60f8      	str	r0, [r7, #12]
 8004ff0:	60b9      	str	r1, [r7, #8]
 8004ff2:	603b      	str	r3, [r7, #0]
 8004ff4:	4613      	mov	r3, r2
 8004ff6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004ff8:	f7fd fa7c 	bl	80024f4 <HAL_GetTick>
 8004ffc:	4602      	mov	r2, r0
 8004ffe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005000:	1a9b      	subs	r3, r3, r2
 8005002:	683a      	ldr	r2, [r7, #0]
 8005004:	4413      	add	r3, r2
 8005006:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005008:	f7fd fa74 	bl	80024f4 <HAL_GetTick>
 800500c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800500e:	4b39      	ldr	r3, [pc, #228]	@ (80050f4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	015b      	lsls	r3, r3, #5
 8005014:	0d1b      	lsrs	r3, r3, #20
 8005016:	69fa      	ldr	r2, [r7, #28]
 8005018:	fb02 f303 	mul.w	r3, r2, r3
 800501c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800501e:	e054      	b.n	80050ca <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005020:	683b      	ldr	r3, [r7, #0]
 8005022:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005026:	d050      	beq.n	80050ca <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005028:	f7fd fa64 	bl	80024f4 <HAL_GetTick>
 800502c:	4602      	mov	r2, r0
 800502e:	69bb      	ldr	r3, [r7, #24]
 8005030:	1ad3      	subs	r3, r2, r3
 8005032:	69fa      	ldr	r2, [r7, #28]
 8005034:	429a      	cmp	r2, r3
 8005036:	d902      	bls.n	800503e <SPI_WaitFlagStateUntilTimeout+0x56>
 8005038:	69fb      	ldr	r3, [r7, #28]
 800503a:	2b00      	cmp	r3, #0
 800503c:	d13d      	bne.n	80050ba <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	685a      	ldr	r2, [r3, #4]
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800504c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	685b      	ldr	r3, [r3, #4]
 8005052:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005056:	d111      	bne.n	800507c <SPI_WaitFlagStateUntilTimeout+0x94>
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	689b      	ldr	r3, [r3, #8]
 800505c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005060:	d004      	beq.n	800506c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	689b      	ldr	r3, [r3, #8]
 8005066:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800506a:	d107      	bne.n	800507c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	681a      	ldr	r2, [r3, #0]
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800507a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005080:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005084:	d10f      	bne.n	80050a6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	681a      	ldr	r2, [r3, #0]
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005094:	601a      	str	r2, [r3, #0]
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	681a      	ldr	r2, [r3, #0]
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80050a4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	2201      	movs	r2, #1
 80050aa:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	2200      	movs	r2, #0
 80050b2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 80050b6:	2303      	movs	r3, #3
 80050b8:	e017      	b.n	80050ea <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80050ba:	697b      	ldr	r3, [r7, #20]
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d101      	bne.n	80050c4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80050c0:	2300      	movs	r3, #0
 80050c2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80050c4:	697b      	ldr	r3, [r7, #20]
 80050c6:	3b01      	subs	r3, #1
 80050c8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	689a      	ldr	r2, [r3, #8]
 80050d0:	68bb      	ldr	r3, [r7, #8]
 80050d2:	4013      	ands	r3, r2
 80050d4:	68ba      	ldr	r2, [r7, #8]
 80050d6:	429a      	cmp	r2, r3
 80050d8:	bf0c      	ite	eq
 80050da:	2301      	moveq	r3, #1
 80050dc:	2300      	movne	r3, #0
 80050de:	b2db      	uxtb	r3, r3
 80050e0:	461a      	mov	r2, r3
 80050e2:	79fb      	ldrb	r3, [r7, #7]
 80050e4:	429a      	cmp	r2, r3
 80050e6:	d19b      	bne.n	8005020 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80050e8:	2300      	movs	r3, #0
}
 80050ea:	4618      	mov	r0, r3
 80050ec:	3720      	adds	r7, #32
 80050ee:	46bd      	mov	sp, r7
 80050f0:	bd80      	pop	{r7, pc}
 80050f2:	bf00      	nop
 80050f4:	20000008 	.word	0x20000008

080050f8 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80050f8:	b580      	push	{r7, lr}
 80050fa:	b086      	sub	sp, #24
 80050fc:	af02      	add	r7, sp, #8
 80050fe:	60f8      	str	r0, [r7, #12]
 8005100:	60b9      	str	r1, [r7, #8]
 8005102:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	685b      	ldr	r3, [r3, #4]
 8005108:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800510c:	d111      	bne.n	8005132 <SPI_EndRxTransaction+0x3a>
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	689b      	ldr	r3, [r3, #8]
 8005112:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005116:	d004      	beq.n	8005122 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	689b      	ldr	r3, [r3, #8]
 800511c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005120:	d107      	bne.n	8005132 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	681a      	ldr	r2, [r3, #0]
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005130:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	685b      	ldr	r3, [r3, #4]
 8005136:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800513a:	d12a      	bne.n	8005192 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	689b      	ldr	r3, [r3, #8]
 8005140:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005144:	d012      	beq.n	800516c <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	9300      	str	r3, [sp, #0]
 800514a:	68bb      	ldr	r3, [r7, #8]
 800514c:	2200      	movs	r2, #0
 800514e:	2180      	movs	r1, #128	@ 0x80
 8005150:	68f8      	ldr	r0, [r7, #12]
 8005152:	f7ff ff49 	bl	8004fe8 <SPI_WaitFlagStateUntilTimeout>
 8005156:	4603      	mov	r3, r0
 8005158:	2b00      	cmp	r3, #0
 800515a:	d02d      	beq.n	80051b8 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005160:	f043 0220 	orr.w	r2, r3, #32
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8005168:	2303      	movs	r3, #3
 800516a:	e026      	b.n	80051ba <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	9300      	str	r3, [sp, #0]
 8005170:	68bb      	ldr	r3, [r7, #8]
 8005172:	2200      	movs	r2, #0
 8005174:	2101      	movs	r1, #1
 8005176:	68f8      	ldr	r0, [r7, #12]
 8005178:	f7ff ff36 	bl	8004fe8 <SPI_WaitFlagStateUntilTimeout>
 800517c:	4603      	mov	r3, r0
 800517e:	2b00      	cmp	r3, #0
 8005180:	d01a      	beq.n	80051b8 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005186:	f043 0220 	orr.w	r2, r3, #32
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 800518e:	2303      	movs	r3, #3
 8005190:	e013      	b.n	80051ba <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	9300      	str	r3, [sp, #0]
 8005196:	68bb      	ldr	r3, [r7, #8]
 8005198:	2200      	movs	r2, #0
 800519a:	2101      	movs	r1, #1
 800519c:	68f8      	ldr	r0, [r7, #12]
 800519e:	f7ff ff23 	bl	8004fe8 <SPI_WaitFlagStateUntilTimeout>
 80051a2:	4603      	mov	r3, r0
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d007      	beq.n	80051b8 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80051ac:	f043 0220 	orr.w	r2, r3, #32
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80051b4:	2303      	movs	r3, #3
 80051b6:	e000      	b.n	80051ba <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80051b8:	2300      	movs	r3, #0
}
 80051ba:	4618      	mov	r0, r3
 80051bc:	3710      	adds	r7, #16
 80051be:	46bd      	mov	sp, r7
 80051c0:	bd80      	pop	{r7, pc}
	...

080051c4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80051c4:	b580      	push	{r7, lr}
 80051c6:	b088      	sub	sp, #32
 80051c8:	af02      	add	r7, sp, #8
 80051ca:	60f8      	str	r0, [r7, #12]
 80051cc:	60b9      	str	r1, [r7, #8]
 80051ce:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80051d0:	4b1b      	ldr	r3, [pc, #108]	@ (8005240 <SPI_EndRxTxTransaction+0x7c>)
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	4a1b      	ldr	r2, [pc, #108]	@ (8005244 <SPI_EndRxTxTransaction+0x80>)
 80051d6:	fba2 2303 	umull	r2, r3, r2, r3
 80051da:	0d5b      	lsrs	r3, r3, #21
 80051dc:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80051e0:	fb02 f303 	mul.w	r3, r2, r3
 80051e4:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	685b      	ldr	r3, [r3, #4]
 80051ea:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80051ee:	d112      	bne.n	8005216 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	9300      	str	r3, [sp, #0]
 80051f4:	68bb      	ldr	r3, [r7, #8]
 80051f6:	2200      	movs	r2, #0
 80051f8:	2180      	movs	r1, #128	@ 0x80
 80051fa:	68f8      	ldr	r0, [r7, #12]
 80051fc:	f7ff fef4 	bl	8004fe8 <SPI_WaitFlagStateUntilTimeout>
 8005200:	4603      	mov	r3, r0
 8005202:	2b00      	cmp	r3, #0
 8005204:	d016      	beq.n	8005234 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800520a:	f043 0220 	orr.w	r2, r3, #32
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8005212:	2303      	movs	r3, #3
 8005214:	e00f      	b.n	8005236 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005216:	697b      	ldr	r3, [r7, #20]
 8005218:	2b00      	cmp	r3, #0
 800521a:	d00a      	beq.n	8005232 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800521c:	697b      	ldr	r3, [r7, #20]
 800521e:	3b01      	subs	r3, #1
 8005220:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	689b      	ldr	r3, [r3, #8]
 8005228:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800522c:	2b80      	cmp	r3, #128	@ 0x80
 800522e:	d0f2      	beq.n	8005216 <SPI_EndRxTxTransaction+0x52>
 8005230:	e000      	b.n	8005234 <SPI_EndRxTxTransaction+0x70>
        break;
 8005232:	bf00      	nop
  }

  return HAL_OK;
 8005234:	2300      	movs	r3, #0
}
 8005236:	4618      	mov	r0, r3
 8005238:	3718      	adds	r7, #24
 800523a:	46bd      	mov	sp, r7
 800523c:	bd80      	pop	{r7, pc}
 800523e:	bf00      	nop
 8005240:	20000008 	.word	0x20000008
 8005244:	165e9f81 	.word	0x165e9f81

08005248 <HAL_SRAM_Init>:
  * @param  Timing Pointer to SRAM control timing structure 
  * @param  ExtTiming Pointer to SRAM extended mode timing structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing, FMC_NORSRAM_TimingTypeDef *ExtTiming)
{ 
 8005248:	b580      	push	{r7, lr}
 800524a:	b084      	sub	sp, #16
 800524c:	af00      	add	r7, sp, #0
 800524e:	60f8      	str	r0, [r7, #12]
 8005250:	60b9      	str	r1, [r7, #8]
 8005252:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if(hsram == NULL)
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	2b00      	cmp	r3, #0
 8005258:	d101      	bne.n	800525e <HAL_SRAM_Init+0x16>
  {
     return HAL_ERROR;
 800525a:	2301      	movs	r3, #1
 800525c:	e034      	b.n	80052c8 <HAL_SRAM_Init+0x80>
  }
  
  if(hsram->State == HAL_SRAM_STATE_RESET)
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	f893 3049 	ldrb.w	r3, [r3, #73]	@ 0x49
 8005264:	b2db      	uxtb	r3, r3
 8005266:	2b00      	cmp	r3, #0
 8005268:	d106      	bne.n	8005278 <HAL_SRAM_Init+0x30>
  {  
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	2200      	movs	r2, #0
 800526e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8005272:	68f8      	ldr	r0, [r7, #12]
 8005274:	f7fb fbf0 	bl	8000a58 <HAL_SRAM_MspInit>
#endif
  }
  
  /* Initialize SRAM control Interface */
  FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	681a      	ldr	r2, [r3, #0]
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	3308      	adds	r3, #8
 8005280:	4619      	mov	r1, r3
 8005282:	4610      	mov	r0, r2
 8005284:	f002 f84e 	bl	8007324 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank); 
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	6818      	ldr	r0, [r3, #0]
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	689b      	ldr	r3, [r3, #8]
 8005290:	461a      	mov	r2, r3
 8005292:	68b9      	ldr	r1, [r7, #8]
 8005294:	f002 f898 	bl	80073c8 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,  hsram->Init.ExtendedMode);  
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	6858      	ldr	r0, [r3, #4]
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	689a      	ldr	r2, [r3, #8]
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80052a4:	6879      	ldr	r1, [r7, #4]
 80052a6:	f002 f8cd 	bl	8007444 <FSMC_NORSRAM_Extended_Timing_Init>
  
  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank); 
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	68fa      	ldr	r2, [r7, #12]
 80052b0:	6892      	ldr	r2, [r2, #8]
 80052b2:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	68fa      	ldr	r2, [r7, #12]
 80052bc:	6892      	ldr	r2, [r2, #8]
 80052be:	f041 0101 	orr.w	r1, r1, #1
 80052c2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  
  return HAL_OK;
 80052c6:	2300      	movs	r3, #0
}
 80052c8:	4618      	mov	r0, r3
 80052ca:	3710      	adds	r7, #16
 80052cc:	46bd      	mov	sp, r7
 80052ce:	bd80      	pop	{r7, pc}

080052d0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80052d0:	b580      	push	{r7, lr}
 80052d2:	b082      	sub	sp, #8
 80052d4:	af00      	add	r7, sp, #0
 80052d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d101      	bne.n	80052e2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80052de:	2301      	movs	r3, #1
 80052e0:	e041      	b.n	8005366 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80052e8:	b2db      	uxtb	r3, r3
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d106      	bne.n	80052fc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	2200      	movs	r2, #0
 80052f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80052f6:	6878      	ldr	r0, [r7, #4]
 80052f8:	f7fc fe2c 	bl	8001f54 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	2202      	movs	r2, #2
 8005300:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681a      	ldr	r2, [r3, #0]
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	3304      	adds	r3, #4
 800530c:	4619      	mov	r1, r3
 800530e:	4610      	mov	r0, r2
 8005310:	f000 fc1a 	bl	8005b48 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	2201      	movs	r2, #1
 8005318:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	2201      	movs	r2, #1
 8005320:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	2201      	movs	r2, #1
 8005328:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	2201      	movs	r2, #1
 8005330:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	2201      	movs	r2, #1
 8005338:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	2201      	movs	r2, #1
 8005340:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	2201      	movs	r2, #1
 8005348:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	2201      	movs	r2, #1
 8005350:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	2201      	movs	r2, #1
 8005358:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	2201      	movs	r2, #1
 8005360:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005364:	2300      	movs	r3, #0
}
 8005366:	4618      	mov	r0, r3
 8005368:	3708      	adds	r7, #8
 800536a:	46bd      	mov	sp, r7
 800536c:	bd80      	pop	{r7, pc}
	...

08005370 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005370:	b480      	push	{r7}
 8005372:	b085      	sub	sp, #20
 8005374:	af00      	add	r7, sp, #0
 8005376:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800537e:	b2db      	uxtb	r3, r3
 8005380:	2b01      	cmp	r3, #1
 8005382:	d001      	beq.n	8005388 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005384:	2301      	movs	r3, #1
 8005386:	e046      	b.n	8005416 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	2202      	movs	r2, #2
 800538c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	4a23      	ldr	r2, [pc, #140]	@ (8005424 <HAL_TIM_Base_Start+0xb4>)
 8005396:	4293      	cmp	r3, r2
 8005398:	d022      	beq.n	80053e0 <HAL_TIM_Base_Start+0x70>
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80053a2:	d01d      	beq.n	80053e0 <HAL_TIM_Base_Start+0x70>
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	4a1f      	ldr	r2, [pc, #124]	@ (8005428 <HAL_TIM_Base_Start+0xb8>)
 80053aa:	4293      	cmp	r3, r2
 80053ac:	d018      	beq.n	80053e0 <HAL_TIM_Base_Start+0x70>
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	4a1e      	ldr	r2, [pc, #120]	@ (800542c <HAL_TIM_Base_Start+0xbc>)
 80053b4:	4293      	cmp	r3, r2
 80053b6:	d013      	beq.n	80053e0 <HAL_TIM_Base_Start+0x70>
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	4a1c      	ldr	r2, [pc, #112]	@ (8005430 <HAL_TIM_Base_Start+0xc0>)
 80053be:	4293      	cmp	r3, r2
 80053c0:	d00e      	beq.n	80053e0 <HAL_TIM_Base_Start+0x70>
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	4a1b      	ldr	r2, [pc, #108]	@ (8005434 <HAL_TIM_Base_Start+0xc4>)
 80053c8:	4293      	cmp	r3, r2
 80053ca:	d009      	beq.n	80053e0 <HAL_TIM_Base_Start+0x70>
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	4a19      	ldr	r2, [pc, #100]	@ (8005438 <HAL_TIM_Base_Start+0xc8>)
 80053d2:	4293      	cmp	r3, r2
 80053d4:	d004      	beq.n	80053e0 <HAL_TIM_Base_Start+0x70>
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	4a18      	ldr	r2, [pc, #96]	@ (800543c <HAL_TIM_Base_Start+0xcc>)
 80053dc:	4293      	cmp	r3, r2
 80053de:	d111      	bne.n	8005404 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	689b      	ldr	r3, [r3, #8]
 80053e6:	f003 0307 	and.w	r3, r3, #7
 80053ea:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	2b06      	cmp	r3, #6
 80053f0:	d010      	beq.n	8005414 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	681a      	ldr	r2, [r3, #0]
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	f042 0201 	orr.w	r2, r2, #1
 8005400:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005402:	e007      	b.n	8005414 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	681a      	ldr	r2, [r3, #0]
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	f042 0201 	orr.w	r2, r2, #1
 8005412:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005414:	2300      	movs	r3, #0
}
 8005416:	4618      	mov	r0, r3
 8005418:	3714      	adds	r7, #20
 800541a:	46bd      	mov	sp, r7
 800541c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005420:	4770      	bx	lr
 8005422:	bf00      	nop
 8005424:	40010000 	.word	0x40010000
 8005428:	40000400 	.word	0x40000400
 800542c:	40000800 	.word	0x40000800
 8005430:	40000c00 	.word	0x40000c00
 8005434:	40010400 	.word	0x40010400
 8005438:	40014000 	.word	0x40014000
 800543c:	40001800 	.word	0x40001800

08005440 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005440:	b480      	push	{r7}
 8005442:	b085      	sub	sp, #20
 8005444:	af00      	add	r7, sp, #0
 8005446:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800544e:	b2db      	uxtb	r3, r3
 8005450:	2b01      	cmp	r3, #1
 8005452:	d001      	beq.n	8005458 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005454:	2301      	movs	r3, #1
 8005456:	e04e      	b.n	80054f6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	2202      	movs	r2, #2
 800545c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	68da      	ldr	r2, [r3, #12]
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	f042 0201 	orr.w	r2, r2, #1
 800546e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	4a23      	ldr	r2, [pc, #140]	@ (8005504 <HAL_TIM_Base_Start_IT+0xc4>)
 8005476:	4293      	cmp	r3, r2
 8005478:	d022      	beq.n	80054c0 <HAL_TIM_Base_Start_IT+0x80>
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005482:	d01d      	beq.n	80054c0 <HAL_TIM_Base_Start_IT+0x80>
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	4a1f      	ldr	r2, [pc, #124]	@ (8005508 <HAL_TIM_Base_Start_IT+0xc8>)
 800548a:	4293      	cmp	r3, r2
 800548c:	d018      	beq.n	80054c0 <HAL_TIM_Base_Start_IT+0x80>
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	4a1e      	ldr	r2, [pc, #120]	@ (800550c <HAL_TIM_Base_Start_IT+0xcc>)
 8005494:	4293      	cmp	r3, r2
 8005496:	d013      	beq.n	80054c0 <HAL_TIM_Base_Start_IT+0x80>
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	4a1c      	ldr	r2, [pc, #112]	@ (8005510 <HAL_TIM_Base_Start_IT+0xd0>)
 800549e:	4293      	cmp	r3, r2
 80054a0:	d00e      	beq.n	80054c0 <HAL_TIM_Base_Start_IT+0x80>
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	4a1b      	ldr	r2, [pc, #108]	@ (8005514 <HAL_TIM_Base_Start_IT+0xd4>)
 80054a8:	4293      	cmp	r3, r2
 80054aa:	d009      	beq.n	80054c0 <HAL_TIM_Base_Start_IT+0x80>
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	4a19      	ldr	r2, [pc, #100]	@ (8005518 <HAL_TIM_Base_Start_IT+0xd8>)
 80054b2:	4293      	cmp	r3, r2
 80054b4:	d004      	beq.n	80054c0 <HAL_TIM_Base_Start_IT+0x80>
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	4a18      	ldr	r2, [pc, #96]	@ (800551c <HAL_TIM_Base_Start_IT+0xdc>)
 80054bc:	4293      	cmp	r3, r2
 80054be:	d111      	bne.n	80054e4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	689b      	ldr	r3, [r3, #8]
 80054c6:	f003 0307 	and.w	r3, r3, #7
 80054ca:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	2b06      	cmp	r3, #6
 80054d0:	d010      	beq.n	80054f4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	681a      	ldr	r2, [r3, #0]
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	f042 0201 	orr.w	r2, r2, #1
 80054e0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80054e2:	e007      	b.n	80054f4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	681a      	ldr	r2, [r3, #0]
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	f042 0201 	orr.w	r2, r2, #1
 80054f2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80054f4:	2300      	movs	r3, #0
}
 80054f6:	4618      	mov	r0, r3
 80054f8:	3714      	adds	r7, #20
 80054fa:	46bd      	mov	sp, r7
 80054fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005500:	4770      	bx	lr
 8005502:	bf00      	nop
 8005504:	40010000 	.word	0x40010000
 8005508:	40000400 	.word	0x40000400
 800550c:	40000800 	.word	0x40000800
 8005510:	40000c00 	.word	0x40000c00
 8005514:	40010400 	.word	0x40010400
 8005518:	40014000 	.word	0x40014000
 800551c:	40001800 	.word	0x40001800

08005520 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005520:	b580      	push	{r7, lr}
 8005522:	b082      	sub	sp, #8
 8005524:	af00      	add	r7, sp, #0
 8005526:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	2b00      	cmp	r3, #0
 800552c:	d101      	bne.n	8005532 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800552e:	2301      	movs	r3, #1
 8005530:	e041      	b.n	80055b6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005538:	b2db      	uxtb	r3, r3
 800553a:	2b00      	cmp	r3, #0
 800553c:	d106      	bne.n	800554c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	2200      	movs	r2, #0
 8005542:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005546:	6878      	ldr	r0, [r7, #4]
 8005548:	f000 f839 	bl	80055be <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	2202      	movs	r2, #2
 8005550:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681a      	ldr	r2, [r3, #0]
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	3304      	adds	r3, #4
 800555c:	4619      	mov	r1, r3
 800555e:	4610      	mov	r0, r2
 8005560:	f000 faf2 	bl	8005b48 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	2201      	movs	r2, #1
 8005568:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	2201      	movs	r2, #1
 8005570:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	2201      	movs	r2, #1
 8005578:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	2201      	movs	r2, #1
 8005580:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	2201      	movs	r2, #1
 8005588:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	2201      	movs	r2, #1
 8005590:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	2201      	movs	r2, #1
 8005598:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	2201      	movs	r2, #1
 80055a0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	2201      	movs	r2, #1
 80055a8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	2201      	movs	r2, #1
 80055b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80055b4:	2300      	movs	r3, #0
}
 80055b6:	4618      	mov	r0, r3
 80055b8:	3708      	adds	r7, #8
 80055ba:	46bd      	mov	sp, r7
 80055bc:	bd80      	pop	{r7, pc}

080055be <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80055be:	b480      	push	{r7}
 80055c0:	b083      	sub	sp, #12
 80055c2:	af00      	add	r7, sp, #0
 80055c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80055c6:	bf00      	nop
 80055c8:	370c      	adds	r7, #12
 80055ca:	46bd      	mov	sp, r7
 80055cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d0:	4770      	bx	lr

080055d2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80055d2:	b580      	push	{r7, lr}
 80055d4:	b082      	sub	sp, #8
 80055d6:	af00      	add	r7, sp, #0
 80055d8:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	691b      	ldr	r3, [r3, #16]
 80055e0:	f003 0302 	and.w	r3, r3, #2
 80055e4:	2b02      	cmp	r3, #2
 80055e6:	d122      	bne.n	800562e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	68db      	ldr	r3, [r3, #12]
 80055ee:	f003 0302 	and.w	r3, r3, #2
 80055f2:	2b02      	cmp	r3, #2
 80055f4:	d11b      	bne.n	800562e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	f06f 0202 	mvn.w	r2, #2
 80055fe:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	2201      	movs	r2, #1
 8005604:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	699b      	ldr	r3, [r3, #24]
 800560c:	f003 0303 	and.w	r3, r3, #3
 8005610:	2b00      	cmp	r3, #0
 8005612:	d003      	beq.n	800561c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005614:	6878      	ldr	r0, [r7, #4]
 8005616:	f000 fa78 	bl	8005b0a <HAL_TIM_IC_CaptureCallback>
 800561a:	e005      	b.n	8005628 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800561c:	6878      	ldr	r0, [r7, #4]
 800561e:	f000 fa6a 	bl	8005af6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005622:	6878      	ldr	r0, [r7, #4]
 8005624:	f000 fa7b 	bl	8005b1e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	2200      	movs	r2, #0
 800562c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	691b      	ldr	r3, [r3, #16]
 8005634:	f003 0304 	and.w	r3, r3, #4
 8005638:	2b04      	cmp	r3, #4
 800563a:	d122      	bne.n	8005682 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	68db      	ldr	r3, [r3, #12]
 8005642:	f003 0304 	and.w	r3, r3, #4
 8005646:	2b04      	cmp	r3, #4
 8005648:	d11b      	bne.n	8005682 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	f06f 0204 	mvn.w	r2, #4
 8005652:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	2202      	movs	r2, #2
 8005658:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	699b      	ldr	r3, [r3, #24]
 8005660:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005664:	2b00      	cmp	r3, #0
 8005666:	d003      	beq.n	8005670 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005668:	6878      	ldr	r0, [r7, #4]
 800566a:	f000 fa4e 	bl	8005b0a <HAL_TIM_IC_CaptureCallback>
 800566e:	e005      	b.n	800567c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005670:	6878      	ldr	r0, [r7, #4]
 8005672:	f000 fa40 	bl	8005af6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005676:	6878      	ldr	r0, [r7, #4]
 8005678:	f000 fa51 	bl	8005b1e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	2200      	movs	r2, #0
 8005680:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	691b      	ldr	r3, [r3, #16]
 8005688:	f003 0308 	and.w	r3, r3, #8
 800568c:	2b08      	cmp	r3, #8
 800568e:	d122      	bne.n	80056d6 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	68db      	ldr	r3, [r3, #12]
 8005696:	f003 0308 	and.w	r3, r3, #8
 800569a:	2b08      	cmp	r3, #8
 800569c:	d11b      	bne.n	80056d6 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	f06f 0208 	mvn.w	r2, #8
 80056a6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	2204      	movs	r2, #4
 80056ac:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	69db      	ldr	r3, [r3, #28]
 80056b4:	f003 0303 	and.w	r3, r3, #3
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d003      	beq.n	80056c4 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80056bc:	6878      	ldr	r0, [r7, #4]
 80056be:	f000 fa24 	bl	8005b0a <HAL_TIM_IC_CaptureCallback>
 80056c2:	e005      	b.n	80056d0 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80056c4:	6878      	ldr	r0, [r7, #4]
 80056c6:	f000 fa16 	bl	8005af6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80056ca:	6878      	ldr	r0, [r7, #4]
 80056cc:	f000 fa27 	bl	8005b1e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	2200      	movs	r2, #0
 80056d4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	691b      	ldr	r3, [r3, #16]
 80056dc:	f003 0310 	and.w	r3, r3, #16
 80056e0:	2b10      	cmp	r3, #16
 80056e2:	d122      	bne.n	800572a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	68db      	ldr	r3, [r3, #12]
 80056ea:	f003 0310 	and.w	r3, r3, #16
 80056ee:	2b10      	cmp	r3, #16
 80056f0:	d11b      	bne.n	800572a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	f06f 0210 	mvn.w	r2, #16
 80056fa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	2208      	movs	r2, #8
 8005700:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	69db      	ldr	r3, [r3, #28]
 8005708:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800570c:	2b00      	cmp	r3, #0
 800570e:	d003      	beq.n	8005718 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005710:	6878      	ldr	r0, [r7, #4]
 8005712:	f000 f9fa 	bl	8005b0a <HAL_TIM_IC_CaptureCallback>
 8005716:	e005      	b.n	8005724 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005718:	6878      	ldr	r0, [r7, #4]
 800571a:	f000 f9ec 	bl	8005af6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800571e:	6878      	ldr	r0, [r7, #4]
 8005720:	f000 f9fd 	bl	8005b1e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	2200      	movs	r2, #0
 8005728:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	691b      	ldr	r3, [r3, #16]
 8005730:	f003 0301 	and.w	r3, r3, #1
 8005734:	2b01      	cmp	r3, #1
 8005736:	d10e      	bne.n	8005756 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	68db      	ldr	r3, [r3, #12]
 800573e:	f003 0301 	and.w	r3, r3, #1
 8005742:	2b01      	cmp	r3, #1
 8005744:	d107      	bne.n	8005756 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	f06f 0201 	mvn.w	r2, #1
 800574e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005750:	6878      	ldr	r0, [r7, #4]
 8005752:	f7fc f9a5 	bl	8001aa0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	691b      	ldr	r3, [r3, #16]
 800575c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005760:	2b80      	cmp	r3, #128	@ 0x80
 8005762:	d10e      	bne.n	8005782 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	68db      	ldr	r3, [r3, #12]
 800576a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800576e:	2b80      	cmp	r3, #128	@ 0x80
 8005770:	d107      	bne.n	8005782 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800577a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800577c:	6878      	ldr	r0, [r7, #4]
 800577e:	f000 fd53 	bl	8006228 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	691b      	ldr	r3, [r3, #16]
 8005788:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800578c:	2b40      	cmp	r3, #64	@ 0x40
 800578e:	d10e      	bne.n	80057ae <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	68db      	ldr	r3, [r3, #12]
 8005796:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800579a:	2b40      	cmp	r3, #64	@ 0x40
 800579c:	d107      	bne.n	80057ae <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80057a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80057a8:	6878      	ldr	r0, [r7, #4]
 80057aa:	f000 f9c2 	bl	8005b32 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	691b      	ldr	r3, [r3, #16]
 80057b4:	f003 0320 	and.w	r3, r3, #32
 80057b8:	2b20      	cmp	r3, #32
 80057ba:	d10e      	bne.n	80057da <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	68db      	ldr	r3, [r3, #12]
 80057c2:	f003 0320 	and.w	r3, r3, #32
 80057c6:	2b20      	cmp	r3, #32
 80057c8:	d107      	bne.n	80057da <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	f06f 0220 	mvn.w	r2, #32
 80057d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80057d4:	6878      	ldr	r0, [r7, #4]
 80057d6:	f000 fd1d 	bl	8006214 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80057da:	bf00      	nop
 80057dc:	3708      	adds	r7, #8
 80057de:	46bd      	mov	sp, r7
 80057e0:	bd80      	pop	{r7, pc}
	...

080057e4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80057e4:	b580      	push	{r7, lr}
 80057e6:	b086      	sub	sp, #24
 80057e8:	af00      	add	r7, sp, #0
 80057ea:	60f8      	str	r0, [r7, #12]
 80057ec:	60b9      	str	r1, [r7, #8]
 80057ee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80057f0:	2300      	movs	r3, #0
 80057f2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80057fa:	2b01      	cmp	r3, #1
 80057fc:	d101      	bne.n	8005802 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80057fe:	2302      	movs	r3, #2
 8005800:	e0ae      	b.n	8005960 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	2201      	movs	r2, #1
 8005806:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	2b0c      	cmp	r3, #12
 800580e:	f200 809f 	bhi.w	8005950 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005812:	a201      	add	r2, pc, #4	@ (adr r2, 8005818 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005814:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005818:	0800584d 	.word	0x0800584d
 800581c:	08005951 	.word	0x08005951
 8005820:	08005951 	.word	0x08005951
 8005824:	08005951 	.word	0x08005951
 8005828:	0800588d 	.word	0x0800588d
 800582c:	08005951 	.word	0x08005951
 8005830:	08005951 	.word	0x08005951
 8005834:	08005951 	.word	0x08005951
 8005838:	080058cf 	.word	0x080058cf
 800583c:	08005951 	.word	0x08005951
 8005840:	08005951 	.word	0x08005951
 8005844:	08005951 	.word	0x08005951
 8005848:	0800590f 	.word	0x0800590f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	68b9      	ldr	r1, [r7, #8]
 8005852:	4618      	mov	r0, r3
 8005854:	f000 fa18 	bl	8005c88 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	699a      	ldr	r2, [r3, #24]
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	f042 0208 	orr.w	r2, r2, #8
 8005866:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	699a      	ldr	r2, [r3, #24]
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	f022 0204 	bic.w	r2, r2, #4
 8005876:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	6999      	ldr	r1, [r3, #24]
 800587e:	68bb      	ldr	r3, [r7, #8]
 8005880:	691a      	ldr	r2, [r3, #16]
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	430a      	orrs	r2, r1
 8005888:	619a      	str	r2, [r3, #24]
      break;
 800588a:	e064      	b.n	8005956 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	68b9      	ldr	r1, [r7, #8]
 8005892:	4618      	mov	r0, r3
 8005894:	f000 fa68 	bl	8005d68 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	699a      	ldr	r2, [r3, #24]
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80058a6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	699a      	ldr	r2, [r3, #24]
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80058b6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	6999      	ldr	r1, [r3, #24]
 80058be:	68bb      	ldr	r3, [r7, #8]
 80058c0:	691b      	ldr	r3, [r3, #16]
 80058c2:	021a      	lsls	r2, r3, #8
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	430a      	orrs	r2, r1
 80058ca:	619a      	str	r2, [r3, #24]
      break;
 80058cc:	e043      	b.n	8005956 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	68b9      	ldr	r1, [r7, #8]
 80058d4:	4618      	mov	r0, r3
 80058d6:	f000 fabd 	bl	8005e54 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	69da      	ldr	r2, [r3, #28]
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	f042 0208 	orr.w	r2, r2, #8
 80058e8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	69da      	ldr	r2, [r3, #28]
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	f022 0204 	bic.w	r2, r2, #4
 80058f8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	69d9      	ldr	r1, [r3, #28]
 8005900:	68bb      	ldr	r3, [r7, #8]
 8005902:	691a      	ldr	r2, [r3, #16]
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	430a      	orrs	r2, r1
 800590a:	61da      	str	r2, [r3, #28]
      break;
 800590c:	e023      	b.n	8005956 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	68b9      	ldr	r1, [r7, #8]
 8005914:	4618      	mov	r0, r3
 8005916:	f000 fb11 	bl	8005f3c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	69da      	ldr	r2, [r3, #28]
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005928:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	69da      	ldr	r2, [r3, #28]
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005938:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	69d9      	ldr	r1, [r3, #28]
 8005940:	68bb      	ldr	r3, [r7, #8]
 8005942:	691b      	ldr	r3, [r3, #16]
 8005944:	021a      	lsls	r2, r3, #8
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	430a      	orrs	r2, r1
 800594c:	61da      	str	r2, [r3, #28]
      break;
 800594e:	e002      	b.n	8005956 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005950:	2301      	movs	r3, #1
 8005952:	75fb      	strb	r3, [r7, #23]
      break;
 8005954:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	2200      	movs	r2, #0
 800595a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800595e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005960:	4618      	mov	r0, r3
 8005962:	3718      	adds	r7, #24
 8005964:	46bd      	mov	sp, r7
 8005966:	bd80      	pop	{r7, pc}

08005968 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005968:	b580      	push	{r7, lr}
 800596a:	b084      	sub	sp, #16
 800596c:	af00      	add	r7, sp, #0
 800596e:	6078      	str	r0, [r7, #4]
 8005970:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005972:	2300      	movs	r3, #0
 8005974:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800597c:	2b01      	cmp	r3, #1
 800597e:	d101      	bne.n	8005984 <HAL_TIM_ConfigClockSource+0x1c>
 8005980:	2302      	movs	r3, #2
 8005982:	e0b4      	b.n	8005aee <HAL_TIM_ConfigClockSource+0x186>
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	2201      	movs	r2, #1
 8005988:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	2202      	movs	r2, #2
 8005990:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	689b      	ldr	r3, [r3, #8]
 800599a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800599c:	68bb      	ldr	r3, [r7, #8]
 800599e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80059a2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80059a4:	68bb      	ldr	r3, [r7, #8]
 80059a6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80059aa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	68ba      	ldr	r2, [r7, #8]
 80059b2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80059b4:	683b      	ldr	r3, [r7, #0]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80059bc:	d03e      	beq.n	8005a3c <HAL_TIM_ConfigClockSource+0xd4>
 80059be:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80059c2:	f200 8087 	bhi.w	8005ad4 <HAL_TIM_ConfigClockSource+0x16c>
 80059c6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80059ca:	f000 8086 	beq.w	8005ada <HAL_TIM_ConfigClockSource+0x172>
 80059ce:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80059d2:	d87f      	bhi.n	8005ad4 <HAL_TIM_ConfigClockSource+0x16c>
 80059d4:	2b70      	cmp	r3, #112	@ 0x70
 80059d6:	d01a      	beq.n	8005a0e <HAL_TIM_ConfigClockSource+0xa6>
 80059d8:	2b70      	cmp	r3, #112	@ 0x70
 80059da:	d87b      	bhi.n	8005ad4 <HAL_TIM_ConfigClockSource+0x16c>
 80059dc:	2b60      	cmp	r3, #96	@ 0x60
 80059de:	d050      	beq.n	8005a82 <HAL_TIM_ConfigClockSource+0x11a>
 80059e0:	2b60      	cmp	r3, #96	@ 0x60
 80059e2:	d877      	bhi.n	8005ad4 <HAL_TIM_ConfigClockSource+0x16c>
 80059e4:	2b50      	cmp	r3, #80	@ 0x50
 80059e6:	d03c      	beq.n	8005a62 <HAL_TIM_ConfigClockSource+0xfa>
 80059e8:	2b50      	cmp	r3, #80	@ 0x50
 80059ea:	d873      	bhi.n	8005ad4 <HAL_TIM_ConfigClockSource+0x16c>
 80059ec:	2b40      	cmp	r3, #64	@ 0x40
 80059ee:	d058      	beq.n	8005aa2 <HAL_TIM_ConfigClockSource+0x13a>
 80059f0:	2b40      	cmp	r3, #64	@ 0x40
 80059f2:	d86f      	bhi.n	8005ad4 <HAL_TIM_ConfigClockSource+0x16c>
 80059f4:	2b30      	cmp	r3, #48	@ 0x30
 80059f6:	d064      	beq.n	8005ac2 <HAL_TIM_ConfigClockSource+0x15a>
 80059f8:	2b30      	cmp	r3, #48	@ 0x30
 80059fa:	d86b      	bhi.n	8005ad4 <HAL_TIM_ConfigClockSource+0x16c>
 80059fc:	2b20      	cmp	r3, #32
 80059fe:	d060      	beq.n	8005ac2 <HAL_TIM_ConfigClockSource+0x15a>
 8005a00:	2b20      	cmp	r3, #32
 8005a02:	d867      	bhi.n	8005ad4 <HAL_TIM_ConfigClockSource+0x16c>
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d05c      	beq.n	8005ac2 <HAL_TIM_ConfigClockSource+0x15a>
 8005a08:	2b10      	cmp	r3, #16
 8005a0a:	d05a      	beq.n	8005ac2 <HAL_TIM_ConfigClockSource+0x15a>
 8005a0c:	e062      	b.n	8005ad4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	6818      	ldr	r0, [r3, #0]
 8005a12:	683b      	ldr	r3, [r7, #0]
 8005a14:	6899      	ldr	r1, [r3, #8]
 8005a16:	683b      	ldr	r3, [r7, #0]
 8005a18:	685a      	ldr	r2, [r3, #4]
 8005a1a:	683b      	ldr	r3, [r7, #0]
 8005a1c:	68db      	ldr	r3, [r3, #12]
 8005a1e:	f000 fb5d 	bl	80060dc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	689b      	ldr	r3, [r3, #8]
 8005a28:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005a2a:	68bb      	ldr	r3, [r7, #8]
 8005a2c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005a30:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	68ba      	ldr	r2, [r7, #8]
 8005a38:	609a      	str	r2, [r3, #8]
      break;
 8005a3a:	e04f      	b.n	8005adc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	6818      	ldr	r0, [r3, #0]
 8005a40:	683b      	ldr	r3, [r7, #0]
 8005a42:	6899      	ldr	r1, [r3, #8]
 8005a44:	683b      	ldr	r3, [r7, #0]
 8005a46:	685a      	ldr	r2, [r3, #4]
 8005a48:	683b      	ldr	r3, [r7, #0]
 8005a4a:	68db      	ldr	r3, [r3, #12]
 8005a4c:	f000 fb46 	bl	80060dc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	689a      	ldr	r2, [r3, #8]
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005a5e:	609a      	str	r2, [r3, #8]
      break;
 8005a60:	e03c      	b.n	8005adc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	6818      	ldr	r0, [r3, #0]
 8005a66:	683b      	ldr	r3, [r7, #0]
 8005a68:	6859      	ldr	r1, [r3, #4]
 8005a6a:	683b      	ldr	r3, [r7, #0]
 8005a6c:	68db      	ldr	r3, [r3, #12]
 8005a6e:	461a      	mov	r2, r3
 8005a70:	f000 faba 	bl	8005fe8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	2150      	movs	r1, #80	@ 0x50
 8005a7a:	4618      	mov	r0, r3
 8005a7c:	f000 fb13 	bl	80060a6 <TIM_ITRx_SetConfig>
      break;
 8005a80:	e02c      	b.n	8005adc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	6818      	ldr	r0, [r3, #0]
 8005a86:	683b      	ldr	r3, [r7, #0]
 8005a88:	6859      	ldr	r1, [r3, #4]
 8005a8a:	683b      	ldr	r3, [r7, #0]
 8005a8c:	68db      	ldr	r3, [r3, #12]
 8005a8e:	461a      	mov	r2, r3
 8005a90:	f000 fad9 	bl	8006046 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	2160      	movs	r1, #96	@ 0x60
 8005a9a:	4618      	mov	r0, r3
 8005a9c:	f000 fb03 	bl	80060a6 <TIM_ITRx_SetConfig>
      break;
 8005aa0:	e01c      	b.n	8005adc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	6818      	ldr	r0, [r3, #0]
 8005aa6:	683b      	ldr	r3, [r7, #0]
 8005aa8:	6859      	ldr	r1, [r3, #4]
 8005aaa:	683b      	ldr	r3, [r7, #0]
 8005aac:	68db      	ldr	r3, [r3, #12]
 8005aae:	461a      	mov	r2, r3
 8005ab0:	f000 fa9a 	bl	8005fe8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	2140      	movs	r1, #64	@ 0x40
 8005aba:	4618      	mov	r0, r3
 8005abc:	f000 faf3 	bl	80060a6 <TIM_ITRx_SetConfig>
      break;
 8005ac0:	e00c      	b.n	8005adc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681a      	ldr	r2, [r3, #0]
 8005ac6:	683b      	ldr	r3, [r7, #0]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	4619      	mov	r1, r3
 8005acc:	4610      	mov	r0, r2
 8005ace:	f000 faea 	bl	80060a6 <TIM_ITRx_SetConfig>
      break;
 8005ad2:	e003      	b.n	8005adc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005ad4:	2301      	movs	r3, #1
 8005ad6:	73fb      	strb	r3, [r7, #15]
      break;
 8005ad8:	e000      	b.n	8005adc <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005ada:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	2201      	movs	r2, #1
 8005ae0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	2200      	movs	r2, #0
 8005ae8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005aec:	7bfb      	ldrb	r3, [r7, #15]
}
 8005aee:	4618      	mov	r0, r3
 8005af0:	3710      	adds	r7, #16
 8005af2:	46bd      	mov	sp, r7
 8005af4:	bd80      	pop	{r7, pc}

08005af6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005af6:	b480      	push	{r7}
 8005af8:	b083      	sub	sp, #12
 8005afa:	af00      	add	r7, sp, #0
 8005afc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005afe:	bf00      	nop
 8005b00:	370c      	adds	r7, #12
 8005b02:	46bd      	mov	sp, r7
 8005b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b08:	4770      	bx	lr

08005b0a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005b0a:	b480      	push	{r7}
 8005b0c:	b083      	sub	sp, #12
 8005b0e:	af00      	add	r7, sp, #0
 8005b10:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005b12:	bf00      	nop
 8005b14:	370c      	adds	r7, #12
 8005b16:	46bd      	mov	sp, r7
 8005b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b1c:	4770      	bx	lr

08005b1e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005b1e:	b480      	push	{r7}
 8005b20:	b083      	sub	sp, #12
 8005b22:	af00      	add	r7, sp, #0
 8005b24:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005b26:	bf00      	nop
 8005b28:	370c      	adds	r7, #12
 8005b2a:	46bd      	mov	sp, r7
 8005b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b30:	4770      	bx	lr

08005b32 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005b32:	b480      	push	{r7}
 8005b34:	b083      	sub	sp, #12
 8005b36:	af00      	add	r7, sp, #0
 8005b38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005b3a:	bf00      	nop
 8005b3c:	370c      	adds	r7, #12
 8005b3e:	46bd      	mov	sp, r7
 8005b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b44:	4770      	bx	lr
	...

08005b48 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005b48:	b480      	push	{r7}
 8005b4a:	b085      	sub	sp, #20
 8005b4c:	af00      	add	r7, sp, #0
 8005b4e:	6078      	str	r0, [r7, #4]
 8005b50:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	4a40      	ldr	r2, [pc, #256]	@ (8005c5c <TIM_Base_SetConfig+0x114>)
 8005b5c:	4293      	cmp	r3, r2
 8005b5e:	d013      	beq.n	8005b88 <TIM_Base_SetConfig+0x40>
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005b66:	d00f      	beq.n	8005b88 <TIM_Base_SetConfig+0x40>
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	4a3d      	ldr	r2, [pc, #244]	@ (8005c60 <TIM_Base_SetConfig+0x118>)
 8005b6c:	4293      	cmp	r3, r2
 8005b6e:	d00b      	beq.n	8005b88 <TIM_Base_SetConfig+0x40>
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	4a3c      	ldr	r2, [pc, #240]	@ (8005c64 <TIM_Base_SetConfig+0x11c>)
 8005b74:	4293      	cmp	r3, r2
 8005b76:	d007      	beq.n	8005b88 <TIM_Base_SetConfig+0x40>
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	4a3b      	ldr	r2, [pc, #236]	@ (8005c68 <TIM_Base_SetConfig+0x120>)
 8005b7c:	4293      	cmp	r3, r2
 8005b7e:	d003      	beq.n	8005b88 <TIM_Base_SetConfig+0x40>
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	4a3a      	ldr	r2, [pc, #232]	@ (8005c6c <TIM_Base_SetConfig+0x124>)
 8005b84:	4293      	cmp	r3, r2
 8005b86:	d108      	bne.n	8005b9a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005b8e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005b90:	683b      	ldr	r3, [r7, #0]
 8005b92:	685b      	ldr	r3, [r3, #4]
 8005b94:	68fa      	ldr	r2, [r7, #12]
 8005b96:	4313      	orrs	r3, r2
 8005b98:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	4a2f      	ldr	r2, [pc, #188]	@ (8005c5c <TIM_Base_SetConfig+0x114>)
 8005b9e:	4293      	cmp	r3, r2
 8005ba0:	d02b      	beq.n	8005bfa <TIM_Base_SetConfig+0xb2>
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005ba8:	d027      	beq.n	8005bfa <TIM_Base_SetConfig+0xb2>
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	4a2c      	ldr	r2, [pc, #176]	@ (8005c60 <TIM_Base_SetConfig+0x118>)
 8005bae:	4293      	cmp	r3, r2
 8005bb0:	d023      	beq.n	8005bfa <TIM_Base_SetConfig+0xb2>
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	4a2b      	ldr	r2, [pc, #172]	@ (8005c64 <TIM_Base_SetConfig+0x11c>)
 8005bb6:	4293      	cmp	r3, r2
 8005bb8:	d01f      	beq.n	8005bfa <TIM_Base_SetConfig+0xb2>
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	4a2a      	ldr	r2, [pc, #168]	@ (8005c68 <TIM_Base_SetConfig+0x120>)
 8005bbe:	4293      	cmp	r3, r2
 8005bc0:	d01b      	beq.n	8005bfa <TIM_Base_SetConfig+0xb2>
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	4a29      	ldr	r2, [pc, #164]	@ (8005c6c <TIM_Base_SetConfig+0x124>)
 8005bc6:	4293      	cmp	r3, r2
 8005bc8:	d017      	beq.n	8005bfa <TIM_Base_SetConfig+0xb2>
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	4a28      	ldr	r2, [pc, #160]	@ (8005c70 <TIM_Base_SetConfig+0x128>)
 8005bce:	4293      	cmp	r3, r2
 8005bd0:	d013      	beq.n	8005bfa <TIM_Base_SetConfig+0xb2>
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	4a27      	ldr	r2, [pc, #156]	@ (8005c74 <TIM_Base_SetConfig+0x12c>)
 8005bd6:	4293      	cmp	r3, r2
 8005bd8:	d00f      	beq.n	8005bfa <TIM_Base_SetConfig+0xb2>
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	4a26      	ldr	r2, [pc, #152]	@ (8005c78 <TIM_Base_SetConfig+0x130>)
 8005bde:	4293      	cmp	r3, r2
 8005be0:	d00b      	beq.n	8005bfa <TIM_Base_SetConfig+0xb2>
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	4a25      	ldr	r2, [pc, #148]	@ (8005c7c <TIM_Base_SetConfig+0x134>)
 8005be6:	4293      	cmp	r3, r2
 8005be8:	d007      	beq.n	8005bfa <TIM_Base_SetConfig+0xb2>
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	4a24      	ldr	r2, [pc, #144]	@ (8005c80 <TIM_Base_SetConfig+0x138>)
 8005bee:	4293      	cmp	r3, r2
 8005bf0:	d003      	beq.n	8005bfa <TIM_Base_SetConfig+0xb2>
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	4a23      	ldr	r2, [pc, #140]	@ (8005c84 <TIM_Base_SetConfig+0x13c>)
 8005bf6:	4293      	cmp	r3, r2
 8005bf8:	d108      	bne.n	8005c0c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005c00:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005c02:	683b      	ldr	r3, [r7, #0]
 8005c04:	68db      	ldr	r3, [r3, #12]
 8005c06:	68fa      	ldr	r2, [r7, #12]
 8005c08:	4313      	orrs	r3, r2
 8005c0a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005c12:	683b      	ldr	r3, [r7, #0]
 8005c14:	695b      	ldr	r3, [r3, #20]
 8005c16:	4313      	orrs	r3, r2
 8005c18:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	68fa      	ldr	r2, [r7, #12]
 8005c1e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005c20:	683b      	ldr	r3, [r7, #0]
 8005c22:	689a      	ldr	r2, [r3, #8]
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005c28:	683b      	ldr	r3, [r7, #0]
 8005c2a:	681a      	ldr	r2, [r3, #0]
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	4a0a      	ldr	r2, [pc, #40]	@ (8005c5c <TIM_Base_SetConfig+0x114>)
 8005c34:	4293      	cmp	r3, r2
 8005c36:	d003      	beq.n	8005c40 <TIM_Base_SetConfig+0xf8>
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	4a0c      	ldr	r2, [pc, #48]	@ (8005c6c <TIM_Base_SetConfig+0x124>)
 8005c3c:	4293      	cmp	r3, r2
 8005c3e:	d103      	bne.n	8005c48 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005c40:	683b      	ldr	r3, [r7, #0]
 8005c42:	691a      	ldr	r2, [r3, #16]
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	2201      	movs	r2, #1
 8005c4c:	615a      	str	r2, [r3, #20]
}
 8005c4e:	bf00      	nop
 8005c50:	3714      	adds	r7, #20
 8005c52:	46bd      	mov	sp, r7
 8005c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c58:	4770      	bx	lr
 8005c5a:	bf00      	nop
 8005c5c:	40010000 	.word	0x40010000
 8005c60:	40000400 	.word	0x40000400
 8005c64:	40000800 	.word	0x40000800
 8005c68:	40000c00 	.word	0x40000c00
 8005c6c:	40010400 	.word	0x40010400
 8005c70:	40014000 	.word	0x40014000
 8005c74:	40014400 	.word	0x40014400
 8005c78:	40014800 	.word	0x40014800
 8005c7c:	40001800 	.word	0x40001800
 8005c80:	40001c00 	.word	0x40001c00
 8005c84:	40002000 	.word	0x40002000

08005c88 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005c88:	b480      	push	{r7}
 8005c8a:	b087      	sub	sp, #28
 8005c8c:	af00      	add	r7, sp, #0
 8005c8e:	6078      	str	r0, [r7, #4]
 8005c90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	6a1b      	ldr	r3, [r3, #32]
 8005c96:	f023 0201 	bic.w	r2, r3, #1
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	6a1b      	ldr	r3, [r3, #32]
 8005ca2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	685b      	ldr	r3, [r3, #4]
 8005ca8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	699b      	ldr	r3, [r3, #24]
 8005cae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005cb6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	f023 0303 	bic.w	r3, r3, #3
 8005cbe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005cc0:	683b      	ldr	r3, [r7, #0]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	68fa      	ldr	r2, [r7, #12]
 8005cc6:	4313      	orrs	r3, r2
 8005cc8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005cca:	697b      	ldr	r3, [r7, #20]
 8005ccc:	f023 0302 	bic.w	r3, r3, #2
 8005cd0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005cd2:	683b      	ldr	r3, [r7, #0]
 8005cd4:	689b      	ldr	r3, [r3, #8]
 8005cd6:	697a      	ldr	r2, [r7, #20]
 8005cd8:	4313      	orrs	r3, r2
 8005cda:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	4a20      	ldr	r2, [pc, #128]	@ (8005d60 <TIM_OC1_SetConfig+0xd8>)
 8005ce0:	4293      	cmp	r3, r2
 8005ce2:	d003      	beq.n	8005cec <TIM_OC1_SetConfig+0x64>
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	4a1f      	ldr	r2, [pc, #124]	@ (8005d64 <TIM_OC1_SetConfig+0xdc>)
 8005ce8:	4293      	cmp	r3, r2
 8005cea:	d10c      	bne.n	8005d06 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005cec:	697b      	ldr	r3, [r7, #20]
 8005cee:	f023 0308 	bic.w	r3, r3, #8
 8005cf2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005cf4:	683b      	ldr	r3, [r7, #0]
 8005cf6:	68db      	ldr	r3, [r3, #12]
 8005cf8:	697a      	ldr	r2, [r7, #20]
 8005cfa:	4313      	orrs	r3, r2
 8005cfc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005cfe:	697b      	ldr	r3, [r7, #20]
 8005d00:	f023 0304 	bic.w	r3, r3, #4
 8005d04:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	4a15      	ldr	r2, [pc, #84]	@ (8005d60 <TIM_OC1_SetConfig+0xd8>)
 8005d0a:	4293      	cmp	r3, r2
 8005d0c:	d003      	beq.n	8005d16 <TIM_OC1_SetConfig+0x8e>
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	4a14      	ldr	r2, [pc, #80]	@ (8005d64 <TIM_OC1_SetConfig+0xdc>)
 8005d12:	4293      	cmp	r3, r2
 8005d14:	d111      	bne.n	8005d3a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005d16:	693b      	ldr	r3, [r7, #16]
 8005d18:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005d1c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005d1e:	693b      	ldr	r3, [r7, #16]
 8005d20:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005d24:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005d26:	683b      	ldr	r3, [r7, #0]
 8005d28:	695b      	ldr	r3, [r3, #20]
 8005d2a:	693a      	ldr	r2, [r7, #16]
 8005d2c:	4313      	orrs	r3, r2
 8005d2e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005d30:	683b      	ldr	r3, [r7, #0]
 8005d32:	699b      	ldr	r3, [r3, #24]
 8005d34:	693a      	ldr	r2, [r7, #16]
 8005d36:	4313      	orrs	r3, r2
 8005d38:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	693a      	ldr	r2, [r7, #16]
 8005d3e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	68fa      	ldr	r2, [r7, #12]
 8005d44:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005d46:	683b      	ldr	r3, [r7, #0]
 8005d48:	685a      	ldr	r2, [r3, #4]
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	697a      	ldr	r2, [r7, #20]
 8005d52:	621a      	str	r2, [r3, #32]
}
 8005d54:	bf00      	nop
 8005d56:	371c      	adds	r7, #28
 8005d58:	46bd      	mov	sp, r7
 8005d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d5e:	4770      	bx	lr
 8005d60:	40010000 	.word	0x40010000
 8005d64:	40010400 	.word	0x40010400

08005d68 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005d68:	b480      	push	{r7}
 8005d6a:	b087      	sub	sp, #28
 8005d6c:	af00      	add	r7, sp, #0
 8005d6e:	6078      	str	r0, [r7, #4]
 8005d70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	6a1b      	ldr	r3, [r3, #32]
 8005d76:	f023 0210 	bic.w	r2, r3, #16
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	6a1b      	ldr	r3, [r3, #32]
 8005d82:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	685b      	ldr	r3, [r3, #4]
 8005d88:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	699b      	ldr	r3, [r3, #24]
 8005d8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005d96:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005d9e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005da0:	683b      	ldr	r3, [r7, #0]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	021b      	lsls	r3, r3, #8
 8005da6:	68fa      	ldr	r2, [r7, #12]
 8005da8:	4313      	orrs	r3, r2
 8005daa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005dac:	697b      	ldr	r3, [r7, #20]
 8005dae:	f023 0320 	bic.w	r3, r3, #32
 8005db2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005db4:	683b      	ldr	r3, [r7, #0]
 8005db6:	689b      	ldr	r3, [r3, #8]
 8005db8:	011b      	lsls	r3, r3, #4
 8005dba:	697a      	ldr	r2, [r7, #20]
 8005dbc:	4313      	orrs	r3, r2
 8005dbe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	4a22      	ldr	r2, [pc, #136]	@ (8005e4c <TIM_OC2_SetConfig+0xe4>)
 8005dc4:	4293      	cmp	r3, r2
 8005dc6:	d003      	beq.n	8005dd0 <TIM_OC2_SetConfig+0x68>
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	4a21      	ldr	r2, [pc, #132]	@ (8005e50 <TIM_OC2_SetConfig+0xe8>)
 8005dcc:	4293      	cmp	r3, r2
 8005dce:	d10d      	bne.n	8005dec <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005dd0:	697b      	ldr	r3, [r7, #20]
 8005dd2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005dd6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005dd8:	683b      	ldr	r3, [r7, #0]
 8005dda:	68db      	ldr	r3, [r3, #12]
 8005ddc:	011b      	lsls	r3, r3, #4
 8005dde:	697a      	ldr	r2, [r7, #20]
 8005de0:	4313      	orrs	r3, r2
 8005de2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005de4:	697b      	ldr	r3, [r7, #20]
 8005de6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005dea:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	4a17      	ldr	r2, [pc, #92]	@ (8005e4c <TIM_OC2_SetConfig+0xe4>)
 8005df0:	4293      	cmp	r3, r2
 8005df2:	d003      	beq.n	8005dfc <TIM_OC2_SetConfig+0x94>
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	4a16      	ldr	r2, [pc, #88]	@ (8005e50 <TIM_OC2_SetConfig+0xe8>)
 8005df8:	4293      	cmp	r3, r2
 8005dfa:	d113      	bne.n	8005e24 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005dfc:	693b      	ldr	r3, [r7, #16]
 8005dfe:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005e02:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005e04:	693b      	ldr	r3, [r7, #16]
 8005e06:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005e0a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005e0c:	683b      	ldr	r3, [r7, #0]
 8005e0e:	695b      	ldr	r3, [r3, #20]
 8005e10:	009b      	lsls	r3, r3, #2
 8005e12:	693a      	ldr	r2, [r7, #16]
 8005e14:	4313      	orrs	r3, r2
 8005e16:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005e18:	683b      	ldr	r3, [r7, #0]
 8005e1a:	699b      	ldr	r3, [r3, #24]
 8005e1c:	009b      	lsls	r3, r3, #2
 8005e1e:	693a      	ldr	r2, [r7, #16]
 8005e20:	4313      	orrs	r3, r2
 8005e22:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	693a      	ldr	r2, [r7, #16]
 8005e28:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	68fa      	ldr	r2, [r7, #12]
 8005e2e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005e30:	683b      	ldr	r3, [r7, #0]
 8005e32:	685a      	ldr	r2, [r3, #4]
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	697a      	ldr	r2, [r7, #20]
 8005e3c:	621a      	str	r2, [r3, #32]
}
 8005e3e:	bf00      	nop
 8005e40:	371c      	adds	r7, #28
 8005e42:	46bd      	mov	sp, r7
 8005e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e48:	4770      	bx	lr
 8005e4a:	bf00      	nop
 8005e4c:	40010000 	.word	0x40010000
 8005e50:	40010400 	.word	0x40010400

08005e54 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005e54:	b480      	push	{r7}
 8005e56:	b087      	sub	sp, #28
 8005e58:	af00      	add	r7, sp, #0
 8005e5a:	6078      	str	r0, [r7, #4]
 8005e5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	6a1b      	ldr	r3, [r3, #32]
 8005e62:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	6a1b      	ldr	r3, [r3, #32]
 8005e6e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	685b      	ldr	r3, [r3, #4]
 8005e74:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	69db      	ldr	r3, [r3, #28]
 8005e7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005e82:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	f023 0303 	bic.w	r3, r3, #3
 8005e8a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005e8c:	683b      	ldr	r3, [r7, #0]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	68fa      	ldr	r2, [r7, #12]
 8005e92:	4313      	orrs	r3, r2
 8005e94:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005e96:	697b      	ldr	r3, [r7, #20]
 8005e98:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005e9c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005e9e:	683b      	ldr	r3, [r7, #0]
 8005ea0:	689b      	ldr	r3, [r3, #8]
 8005ea2:	021b      	lsls	r3, r3, #8
 8005ea4:	697a      	ldr	r2, [r7, #20]
 8005ea6:	4313      	orrs	r3, r2
 8005ea8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	4a21      	ldr	r2, [pc, #132]	@ (8005f34 <TIM_OC3_SetConfig+0xe0>)
 8005eae:	4293      	cmp	r3, r2
 8005eb0:	d003      	beq.n	8005eba <TIM_OC3_SetConfig+0x66>
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	4a20      	ldr	r2, [pc, #128]	@ (8005f38 <TIM_OC3_SetConfig+0xe4>)
 8005eb6:	4293      	cmp	r3, r2
 8005eb8:	d10d      	bne.n	8005ed6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005eba:	697b      	ldr	r3, [r7, #20]
 8005ebc:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005ec0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005ec2:	683b      	ldr	r3, [r7, #0]
 8005ec4:	68db      	ldr	r3, [r3, #12]
 8005ec6:	021b      	lsls	r3, r3, #8
 8005ec8:	697a      	ldr	r2, [r7, #20]
 8005eca:	4313      	orrs	r3, r2
 8005ecc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005ece:	697b      	ldr	r3, [r7, #20]
 8005ed0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005ed4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	4a16      	ldr	r2, [pc, #88]	@ (8005f34 <TIM_OC3_SetConfig+0xe0>)
 8005eda:	4293      	cmp	r3, r2
 8005edc:	d003      	beq.n	8005ee6 <TIM_OC3_SetConfig+0x92>
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	4a15      	ldr	r2, [pc, #84]	@ (8005f38 <TIM_OC3_SetConfig+0xe4>)
 8005ee2:	4293      	cmp	r3, r2
 8005ee4:	d113      	bne.n	8005f0e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005ee6:	693b      	ldr	r3, [r7, #16]
 8005ee8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005eec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005eee:	693b      	ldr	r3, [r7, #16]
 8005ef0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005ef4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005ef6:	683b      	ldr	r3, [r7, #0]
 8005ef8:	695b      	ldr	r3, [r3, #20]
 8005efa:	011b      	lsls	r3, r3, #4
 8005efc:	693a      	ldr	r2, [r7, #16]
 8005efe:	4313      	orrs	r3, r2
 8005f00:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005f02:	683b      	ldr	r3, [r7, #0]
 8005f04:	699b      	ldr	r3, [r3, #24]
 8005f06:	011b      	lsls	r3, r3, #4
 8005f08:	693a      	ldr	r2, [r7, #16]
 8005f0a:	4313      	orrs	r3, r2
 8005f0c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	693a      	ldr	r2, [r7, #16]
 8005f12:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	68fa      	ldr	r2, [r7, #12]
 8005f18:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005f1a:	683b      	ldr	r3, [r7, #0]
 8005f1c:	685a      	ldr	r2, [r3, #4]
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	697a      	ldr	r2, [r7, #20]
 8005f26:	621a      	str	r2, [r3, #32]
}
 8005f28:	bf00      	nop
 8005f2a:	371c      	adds	r7, #28
 8005f2c:	46bd      	mov	sp, r7
 8005f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f32:	4770      	bx	lr
 8005f34:	40010000 	.word	0x40010000
 8005f38:	40010400 	.word	0x40010400

08005f3c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005f3c:	b480      	push	{r7}
 8005f3e:	b087      	sub	sp, #28
 8005f40:	af00      	add	r7, sp, #0
 8005f42:	6078      	str	r0, [r7, #4]
 8005f44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	6a1b      	ldr	r3, [r3, #32]
 8005f4a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	6a1b      	ldr	r3, [r3, #32]
 8005f56:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	685b      	ldr	r3, [r3, #4]
 8005f5c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	69db      	ldr	r3, [r3, #28]
 8005f62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005f6a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005f72:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005f74:	683b      	ldr	r3, [r7, #0]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	021b      	lsls	r3, r3, #8
 8005f7a:	68fa      	ldr	r2, [r7, #12]
 8005f7c:	4313      	orrs	r3, r2
 8005f7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005f80:	693b      	ldr	r3, [r7, #16]
 8005f82:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005f86:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005f88:	683b      	ldr	r3, [r7, #0]
 8005f8a:	689b      	ldr	r3, [r3, #8]
 8005f8c:	031b      	lsls	r3, r3, #12
 8005f8e:	693a      	ldr	r2, [r7, #16]
 8005f90:	4313      	orrs	r3, r2
 8005f92:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	4a12      	ldr	r2, [pc, #72]	@ (8005fe0 <TIM_OC4_SetConfig+0xa4>)
 8005f98:	4293      	cmp	r3, r2
 8005f9a:	d003      	beq.n	8005fa4 <TIM_OC4_SetConfig+0x68>
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	4a11      	ldr	r2, [pc, #68]	@ (8005fe4 <TIM_OC4_SetConfig+0xa8>)
 8005fa0:	4293      	cmp	r3, r2
 8005fa2:	d109      	bne.n	8005fb8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005fa4:	697b      	ldr	r3, [r7, #20]
 8005fa6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005faa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005fac:	683b      	ldr	r3, [r7, #0]
 8005fae:	695b      	ldr	r3, [r3, #20]
 8005fb0:	019b      	lsls	r3, r3, #6
 8005fb2:	697a      	ldr	r2, [r7, #20]
 8005fb4:	4313      	orrs	r3, r2
 8005fb6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	697a      	ldr	r2, [r7, #20]
 8005fbc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	68fa      	ldr	r2, [r7, #12]
 8005fc2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005fc4:	683b      	ldr	r3, [r7, #0]
 8005fc6:	685a      	ldr	r2, [r3, #4]
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	693a      	ldr	r2, [r7, #16]
 8005fd0:	621a      	str	r2, [r3, #32]
}
 8005fd2:	bf00      	nop
 8005fd4:	371c      	adds	r7, #28
 8005fd6:	46bd      	mov	sp, r7
 8005fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fdc:	4770      	bx	lr
 8005fde:	bf00      	nop
 8005fe0:	40010000 	.word	0x40010000
 8005fe4:	40010400 	.word	0x40010400

08005fe8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005fe8:	b480      	push	{r7}
 8005fea:	b087      	sub	sp, #28
 8005fec:	af00      	add	r7, sp, #0
 8005fee:	60f8      	str	r0, [r7, #12]
 8005ff0:	60b9      	str	r1, [r7, #8]
 8005ff2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	6a1b      	ldr	r3, [r3, #32]
 8005ff8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	6a1b      	ldr	r3, [r3, #32]
 8005ffe:	f023 0201 	bic.w	r2, r3, #1
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	699b      	ldr	r3, [r3, #24]
 800600a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800600c:	693b      	ldr	r3, [r7, #16]
 800600e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006012:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	011b      	lsls	r3, r3, #4
 8006018:	693a      	ldr	r2, [r7, #16]
 800601a:	4313      	orrs	r3, r2
 800601c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800601e:	697b      	ldr	r3, [r7, #20]
 8006020:	f023 030a 	bic.w	r3, r3, #10
 8006024:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006026:	697a      	ldr	r2, [r7, #20]
 8006028:	68bb      	ldr	r3, [r7, #8]
 800602a:	4313      	orrs	r3, r2
 800602c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	693a      	ldr	r2, [r7, #16]
 8006032:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	697a      	ldr	r2, [r7, #20]
 8006038:	621a      	str	r2, [r3, #32]
}
 800603a:	bf00      	nop
 800603c:	371c      	adds	r7, #28
 800603e:	46bd      	mov	sp, r7
 8006040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006044:	4770      	bx	lr

08006046 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006046:	b480      	push	{r7}
 8006048:	b087      	sub	sp, #28
 800604a:	af00      	add	r7, sp, #0
 800604c:	60f8      	str	r0, [r7, #12]
 800604e:	60b9      	str	r1, [r7, #8]
 8006050:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	6a1b      	ldr	r3, [r3, #32]
 8006056:	f023 0210 	bic.w	r2, r3, #16
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	699b      	ldr	r3, [r3, #24]
 8006062:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	6a1b      	ldr	r3, [r3, #32]
 8006068:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800606a:	697b      	ldr	r3, [r7, #20]
 800606c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006070:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	031b      	lsls	r3, r3, #12
 8006076:	697a      	ldr	r2, [r7, #20]
 8006078:	4313      	orrs	r3, r2
 800607a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800607c:	693b      	ldr	r3, [r7, #16]
 800607e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006082:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006084:	68bb      	ldr	r3, [r7, #8]
 8006086:	011b      	lsls	r3, r3, #4
 8006088:	693a      	ldr	r2, [r7, #16]
 800608a:	4313      	orrs	r3, r2
 800608c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	697a      	ldr	r2, [r7, #20]
 8006092:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	693a      	ldr	r2, [r7, #16]
 8006098:	621a      	str	r2, [r3, #32]
}
 800609a:	bf00      	nop
 800609c:	371c      	adds	r7, #28
 800609e:	46bd      	mov	sp, r7
 80060a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a4:	4770      	bx	lr

080060a6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80060a6:	b480      	push	{r7}
 80060a8:	b085      	sub	sp, #20
 80060aa:	af00      	add	r7, sp, #0
 80060ac:	6078      	str	r0, [r7, #4]
 80060ae:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	689b      	ldr	r3, [r3, #8]
 80060b4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80060bc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80060be:	683a      	ldr	r2, [r7, #0]
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	4313      	orrs	r3, r2
 80060c4:	f043 0307 	orr.w	r3, r3, #7
 80060c8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	68fa      	ldr	r2, [r7, #12]
 80060ce:	609a      	str	r2, [r3, #8]
}
 80060d0:	bf00      	nop
 80060d2:	3714      	adds	r7, #20
 80060d4:	46bd      	mov	sp, r7
 80060d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060da:	4770      	bx	lr

080060dc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80060dc:	b480      	push	{r7}
 80060de:	b087      	sub	sp, #28
 80060e0:	af00      	add	r7, sp, #0
 80060e2:	60f8      	str	r0, [r7, #12]
 80060e4:	60b9      	str	r1, [r7, #8]
 80060e6:	607a      	str	r2, [r7, #4]
 80060e8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	689b      	ldr	r3, [r3, #8]
 80060ee:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80060f0:	697b      	ldr	r3, [r7, #20]
 80060f2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80060f6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80060f8:	683b      	ldr	r3, [r7, #0]
 80060fa:	021a      	lsls	r2, r3, #8
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	431a      	orrs	r2, r3
 8006100:	68bb      	ldr	r3, [r7, #8]
 8006102:	4313      	orrs	r3, r2
 8006104:	697a      	ldr	r2, [r7, #20]
 8006106:	4313      	orrs	r3, r2
 8006108:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	697a      	ldr	r2, [r7, #20]
 800610e:	609a      	str	r2, [r3, #8]
}
 8006110:	bf00      	nop
 8006112:	371c      	adds	r7, #28
 8006114:	46bd      	mov	sp, r7
 8006116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800611a:	4770      	bx	lr

0800611c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800611c:	b480      	push	{r7}
 800611e:	b085      	sub	sp, #20
 8006120:	af00      	add	r7, sp, #0
 8006122:	6078      	str	r0, [r7, #4]
 8006124:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800612c:	2b01      	cmp	r3, #1
 800612e:	d101      	bne.n	8006134 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006130:	2302      	movs	r3, #2
 8006132:	e05a      	b.n	80061ea <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	2201      	movs	r2, #1
 8006138:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	2202      	movs	r2, #2
 8006140:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	685b      	ldr	r3, [r3, #4]
 800614a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	689b      	ldr	r3, [r3, #8]
 8006152:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800615a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800615c:	683b      	ldr	r3, [r7, #0]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	68fa      	ldr	r2, [r7, #12]
 8006162:	4313      	orrs	r3, r2
 8006164:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	68fa      	ldr	r2, [r7, #12]
 800616c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	4a21      	ldr	r2, [pc, #132]	@ (80061f8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006174:	4293      	cmp	r3, r2
 8006176:	d022      	beq.n	80061be <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006180:	d01d      	beq.n	80061be <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	4a1d      	ldr	r2, [pc, #116]	@ (80061fc <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006188:	4293      	cmp	r3, r2
 800618a:	d018      	beq.n	80061be <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	4a1b      	ldr	r2, [pc, #108]	@ (8006200 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006192:	4293      	cmp	r3, r2
 8006194:	d013      	beq.n	80061be <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	4a1a      	ldr	r2, [pc, #104]	@ (8006204 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800619c:	4293      	cmp	r3, r2
 800619e:	d00e      	beq.n	80061be <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	4a18      	ldr	r2, [pc, #96]	@ (8006208 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80061a6:	4293      	cmp	r3, r2
 80061a8:	d009      	beq.n	80061be <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	4a17      	ldr	r2, [pc, #92]	@ (800620c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80061b0:	4293      	cmp	r3, r2
 80061b2:	d004      	beq.n	80061be <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	4a15      	ldr	r2, [pc, #84]	@ (8006210 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80061ba:	4293      	cmp	r3, r2
 80061bc:	d10c      	bne.n	80061d8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80061be:	68bb      	ldr	r3, [r7, #8]
 80061c0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80061c4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80061c6:	683b      	ldr	r3, [r7, #0]
 80061c8:	685b      	ldr	r3, [r3, #4]
 80061ca:	68ba      	ldr	r2, [r7, #8]
 80061cc:	4313      	orrs	r3, r2
 80061ce:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	68ba      	ldr	r2, [r7, #8]
 80061d6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	2201      	movs	r2, #1
 80061dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	2200      	movs	r2, #0
 80061e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80061e8:	2300      	movs	r3, #0
}
 80061ea:	4618      	mov	r0, r3
 80061ec:	3714      	adds	r7, #20
 80061ee:	46bd      	mov	sp, r7
 80061f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f4:	4770      	bx	lr
 80061f6:	bf00      	nop
 80061f8:	40010000 	.word	0x40010000
 80061fc:	40000400 	.word	0x40000400
 8006200:	40000800 	.word	0x40000800
 8006204:	40000c00 	.word	0x40000c00
 8006208:	40010400 	.word	0x40010400
 800620c:	40014000 	.word	0x40014000
 8006210:	40001800 	.word	0x40001800

08006214 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006214:	b480      	push	{r7}
 8006216:	b083      	sub	sp, #12
 8006218:	af00      	add	r7, sp, #0
 800621a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800621c:	bf00      	nop
 800621e:	370c      	adds	r7, #12
 8006220:	46bd      	mov	sp, r7
 8006222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006226:	4770      	bx	lr

08006228 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006228:	b480      	push	{r7}
 800622a:	b083      	sub	sp, #12
 800622c:	af00      	add	r7, sp, #0
 800622e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006230:	bf00      	nop
 8006232:	370c      	adds	r7, #12
 8006234:	46bd      	mov	sp, r7
 8006236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800623a:	4770      	bx	lr

0800623c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800623c:	b580      	push	{r7, lr}
 800623e:	b082      	sub	sp, #8
 8006240:	af00      	add	r7, sp, #0
 8006242:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	2b00      	cmp	r3, #0
 8006248:	d101      	bne.n	800624e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800624a:	2301      	movs	r3, #1
 800624c:	e03f      	b.n	80062ce <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006254:	b2db      	uxtb	r3, r3
 8006256:	2b00      	cmp	r3, #0
 8006258:	d106      	bne.n	8006268 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	2200      	movs	r2, #0
 800625e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006262:	6878      	ldr	r0, [r7, #4]
 8006264:	f7fc f82a 	bl	80022bc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	2224      	movs	r2, #36	@ 0x24
 800626c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	68da      	ldr	r2, [r3, #12]
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800627e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006280:	6878      	ldr	r0, [r7, #4]
 8006282:	f000 fddb 	bl	8006e3c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	691a      	ldr	r2, [r3, #16]
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006294:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	695a      	ldr	r2, [r3, #20]
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80062a4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	68da      	ldr	r2, [r3, #12]
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80062b4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	2200      	movs	r2, #0
 80062ba:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->gState = HAL_UART_STATE_READY;
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	2220      	movs	r2, #32
 80062c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	2220      	movs	r2, #32
 80062c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80062cc:	2300      	movs	r3, #0
}
 80062ce:	4618      	mov	r0, r3
 80062d0:	3708      	adds	r7, #8
 80062d2:	46bd      	mov	sp, r7
 80062d4:	bd80      	pop	{r7, pc}

080062d6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80062d6:	b580      	push	{r7, lr}
 80062d8:	b08a      	sub	sp, #40	@ 0x28
 80062da:	af02      	add	r7, sp, #8
 80062dc:	60f8      	str	r0, [r7, #12]
 80062de:	60b9      	str	r1, [r7, #8]
 80062e0:	603b      	str	r3, [r7, #0]
 80062e2:	4613      	mov	r3, r2
 80062e4:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80062e6:	2300      	movs	r3, #0
 80062e8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80062f0:	b2db      	uxtb	r3, r3
 80062f2:	2b20      	cmp	r3, #32
 80062f4:	d17c      	bne.n	80063f0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80062f6:	68bb      	ldr	r3, [r7, #8]
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d002      	beq.n	8006302 <HAL_UART_Transmit+0x2c>
 80062fc:	88fb      	ldrh	r3, [r7, #6]
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d101      	bne.n	8006306 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006302:	2301      	movs	r3, #1
 8006304:	e075      	b.n	80063f2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800630c:	2b01      	cmp	r3, #1
 800630e:	d101      	bne.n	8006314 <HAL_UART_Transmit+0x3e>
 8006310:	2302      	movs	r3, #2
 8006312:	e06e      	b.n	80063f2 <HAL_UART_Transmit+0x11c>
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	2201      	movs	r2, #1
 8006318:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	2200      	movs	r2, #0
 8006320:	641a      	str	r2, [r3, #64]	@ 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	2221      	movs	r2, #33	@ 0x21
 8006326:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800632a:	f7fc f8e3 	bl	80024f4 <HAL_GetTick>
 800632e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	88fa      	ldrh	r2, [r7, #6]
 8006334:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	88fa      	ldrh	r2, [r7, #6]
 800633a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	689b      	ldr	r3, [r3, #8]
 8006340:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006344:	d108      	bne.n	8006358 <HAL_UART_Transmit+0x82>
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	691b      	ldr	r3, [r3, #16]
 800634a:	2b00      	cmp	r3, #0
 800634c:	d104      	bne.n	8006358 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800634e:	2300      	movs	r3, #0
 8006350:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006352:	68bb      	ldr	r3, [r7, #8]
 8006354:	61bb      	str	r3, [r7, #24]
 8006356:	e003      	b.n	8006360 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8006358:	68bb      	ldr	r3, [r7, #8]
 800635a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800635c:	2300      	movs	r3, #0
 800635e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	2200      	movs	r2, #0
 8006364:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    while (huart->TxXferCount > 0U)
 8006368:	e02a      	b.n	80063c0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800636a:	683b      	ldr	r3, [r7, #0]
 800636c:	9300      	str	r3, [sp, #0]
 800636e:	697b      	ldr	r3, [r7, #20]
 8006370:	2200      	movs	r2, #0
 8006372:	2180      	movs	r1, #128	@ 0x80
 8006374:	68f8      	ldr	r0, [r7, #12]
 8006376:	f000 fb1f 	bl	80069b8 <UART_WaitOnFlagUntilTimeout>
 800637a:	4603      	mov	r3, r0
 800637c:	2b00      	cmp	r3, #0
 800637e:	d001      	beq.n	8006384 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8006380:	2303      	movs	r3, #3
 8006382:	e036      	b.n	80063f2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8006384:	69fb      	ldr	r3, [r7, #28]
 8006386:	2b00      	cmp	r3, #0
 8006388:	d10b      	bne.n	80063a2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800638a:	69bb      	ldr	r3, [r7, #24]
 800638c:	881b      	ldrh	r3, [r3, #0]
 800638e:	461a      	mov	r2, r3
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006398:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800639a:	69bb      	ldr	r3, [r7, #24]
 800639c:	3302      	adds	r3, #2
 800639e:	61bb      	str	r3, [r7, #24]
 80063a0:	e007      	b.n	80063b2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80063a2:	69fb      	ldr	r3, [r7, #28]
 80063a4:	781a      	ldrb	r2, [r3, #0]
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80063ac:	69fb      	ldr	r3, [r7, #28]
 80063ae:	3301      	adds	r3, #1
 80063b0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80063b6:	b29b      	uxth	r3, r3
 80063b8:	3b01      	subs	r3, #1
 80063ba:	b29a      	uxth	r2, r3
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80063c4:	b29b      	uxth	r3, r3
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d1cf      	bne.n	800636a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80063ca:	683b      	ldr	r3, [r7, #0]
 80063cc:	9300      	str	r3, [sp, #0]
 80063ce:	697b      	ldr	r3, [r7, #20]
 80063d0:	2200      	movs	r2, #0
 80063d2:	2140      	movs	r1, #64	@ 0x40
 80063d4:	68f8      	ldr	r0, [r7, #12]
 80063d6:	f000 faef 	bl	80069b8 <UART_WaitOnFlagUntilTimeout>
 80063da:	4603      	mov	r3, r0
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d001      	beq.n	80063e4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80063e0:	2303      	movs	r3, #3
 80063e2:	e006      	b.n	80063f2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	2220      	movs	r2, #32
 80063e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 80063ec:	2300      	movs	r3, #0
 80063ee:	e000      	b.n	80063f2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80063f0:	2302      	movs	r3, #2
  }
}
 80063f2:	4618      	mov	r0, r3
 80063f4:	3720      	adds	r7, #32
 80063f6:	46bd      	mov	sp, r7
 80063f8:	bd80      	pop	{r7, pc}

080063fa <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80063fa:	b580      	push	{r7, lr}
 80063fc:	b084      	sub	sp, #16
 80063fe:	af00      	add	r7, sp, #0
 8006400:	60f8      	str	r0, [r7, #12]
 8006402:	60b9      	str	r1, [r7, #8]
 8006404:	4613      	mov	r3, r2
 8006406:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800640e:	b2db      	uxtb	r3, r3
 8006410:	2b20      	cmp	r3, #32
 8006412:	d11d      	bne.n	8006450 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8006414:	68bb      	ldr	r3, [r7, #8]
 8006416:	2b00      	cmp	r3, #0
 8006418:	d002      	beq.n	8006420 <HAL_UART_Receive_IT+0x26>
 800641a:	88fb      	ldrh	r3, [r7, #6]
 800641c:	2b00      	cmp	r3, #0
 800641e:	d101      	bne.n	8006424 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8006420:	2301      	movs	r3, #1
 8006422:	e016      	b.n	8006452 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800642a:	2b01      	cmp	r3, #1
 800642c:	d101      	bne.n	8006432 <HAL_UART_Receive_IT+0x38>
 800642e:	2302      	movs	r3, #2
 8006430:	e00f      	b.n	8006452 <HAL_UART_Receive_IT+0x58>
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	2201      	movs	r2, #1
 8006436:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	2200      	movs	r2, #0
 800643e:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006440:	88fb      	ldrh	r3, [r7, #6]
 8006442:	461a      	mov	r2, r3
 8006444:	68b9      	ldr	r1, [r7, #8]
 8006446:	68f8      	ldr	r0, [r7, #12]
 8006448:	f000 fb24 	bl	8006a94 <UART_Start_Receive_IT>
 800644c:	4603      	mov	r3, r0
 800644e:	e000      	b.n	8006452 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8006450:	2302      	movs	r3, #2
  }
}
 8006452:	4618      	mov	r0, r3
 8006454:	3710      	adds	r7, #16
 8006456:	46bd      	mov	sp, r7
 8006458:	bd80      	pop	{r7, pc}
	...

0800645c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800645c:	b580      	push	{r7, lr}
 800645e:	b0ba      	sub	sp, #232	@ 0xe8
 8006460:	af00      	add	r7, sp, #0
 8006462:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	68db      	ldr	r3, [r3, #12]
 8006474:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	695b      	ldr	r3, [r3, #20]
 800647e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8006482:	2300      	movs	r3, #0
 8006484:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8006488:	2300      	movs	r3, #0
 800648a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800648e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006492:	f003 030f 	and.w	r3, r3, #15
 8006496:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800649a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d10f      	bne.n	80064c2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80064a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80064a6:	f003 0320 	and.w	r3, r3, #32
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d009      	beq.n	80064c2 <HAL_UART_IRQHandler+0x66>
 80064ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80064b2:	f003 0320 	and.w	r3, r3, #32
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d003      	beq.n	80064c2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80064ba:	6878      	ldr	r0, [r7, #4]
 80064bc:	f000 fc03 	bl	8006cc6 <UART_Receive_IT>
      return;
 80064c0:	e256      	b.n	8006970 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80064c2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	f000 80de 	beq.w	8006688 <HAL_UART_IRQHandler+0x22c>
 80064cc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80064d0:	f003 0301 	and.w	r3, r3, #1
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d106      	bne.n	80064e6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80064d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80064dc:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	f000 80d1 	beq.w	8006688 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80064e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80064ea:	f003 0301 	and.w	r3, r3, #1
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d00b      	beq.n	800650a <HAL_UART_IRQHandler+0xae>
 80064f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80064f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d005      	beq.n	800650a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006502:	f043 0201 	orr.w	r2, r3, #1
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800650a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800650e:	f003 0304 	and.w	r3, r3, #4
 8006512:	2b00      	cmp	r3, #0
 8006514:	d00b      	beq.n	800652e <HAL_UART_IRQHandler+0xd2>
 8006516:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800651a:	f003 0301 	and.w	r3, r3, #1
 800651e:	2b00      	cmp	r3, #0
 8006520:	d005      	beq.n	800652e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006526:	f043 0202 	orr.w	r2, r3, #2
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800652e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006532:	f003 0302 	and.w	r3, r3, #2
 8006536:	2b00      	cmp	r3, #0
 8006538:	d00b      	beq.n	8006552 <HAL_UART_IRQHandler+0xf6>
 800653a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800653e:	f003 0301 	and.w	r3, r3, #1
 8006542:	2b00      	cmp	r3, #0
 8006544:	d005      	beq.n	8006552 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800654a:	f043 0204 	orr.w	r2, r3, #4
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8006552:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006556:	f003 0308 	and.w	r3, r3, #8
 800655a:	2b00      	cmp	r3, #0
 800655c:	d011      	beq.n	8006582 <HAL_UART_IRQHandler+0x126>
 800655e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006562:	f003 0320 	and.w	r3, r3, #32
 8006566:	2b00      	cmp	r3, #0
 8006568:	d105      	bne.n	8006576 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800656a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800656e:	f003 0301 	and.w	r3, r3, #1
 8006572:	2b00      	cmp	r3, #0
 8006574:	d005      	beq.n	8006582 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800657a:	f043 0208 	orr.w	r2, r3, #8
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006586:	2b00      	cmp	r3, #0
 8006588:	f000 81ed 	beq.w	8006966 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800658c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006590:	f003 0320 	and.w	r3, r3, #32
 8006594:	2b00      	cmp	r3, #0
 8006596:	d008      	beq.n	80065aa <HAL_UART_IRQHandler+0x14e>
 8006598:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800659c:	f003 0320 	and.w	r3, r3, #32
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d002      	beq.n	80065aa <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80065a4:	6878      	ldr	r0, [r7, #4]
 80065a6:	f000 fb8e 	bl	8006cc6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	695b      	ldr	r3, [r3, #20]
 80065b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80065b4:	2b40      	cmp	r3, #64	@ 0x40
 80065b6:	bf0c      	ite	eq
 80065b8:	2301      	moveq	r3, #1
 80065ba:	2300      	movne	r3, #0
 80065bc:	b2db      	uxtb	r3, r3
 80065be:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065c6:	f003 0308 	and.w	r3, r3, #8
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d103      	bne.n	80065d6 <HAL_UART_IRQHandler+0x17a>
 80065ce:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d04f      	beq.n	8006676 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80065d6:	6878      	ldr	r0, [r7, #4]
 80065d8:	f000 fa96 	bl	8006b08 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	695b      	ldr	r3, [r3, #20]
 80065e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80065e6:	2b40      	cmp	r3, #64	@ 0x40
 80065e8:	d141      	bne.n	800666e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	3314      	adds	r3, #20
 80065f0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065f4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80065f8:	e853 3f00 	ldrex	r3, [r3]
 80065fc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8006600:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006604:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006608:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	3314      	adds	r3, #20
 8006612:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8006616:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800661a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800661e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8006622:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8006626:	e841 2300 	strex	r3, r2, [r1]
 800662a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800662e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006632:	2b00      	cmp	r3, #0
 8006634:	d1d9      	bne.n	80065ea <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800663a:	2b00      	cmp	r3, #0
 800663c:	d013      	beq.n	8006666 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006642:	4a7d      	ldr	r2, [pc, #500]	@ (8006838 <HAL_UART_IRQHandler+0x3dc>)
 8006644:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800664a:	4618      	mov	r0, r3
 800664c:	f7fc fe1c 	bl	8003288 <HAL_DMA_Abort_IT>
 8006650:	4603      	mov	r3, r0
 8006652:	2b00      	cmp	r3, #0
 8006654:	d016      	beq.n	8006684 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800665a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800665c:	687a      	ldr	r2, [r7, #4]
 800665e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8006660:	4610      	mov	r0, r2
 8006662:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006664:	e00e      	b.n	8006684 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006666:	6878      	ldr	r0, [r7, #4]
 8006668:	f000 f990 	bl	800698c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800666c:	e00a      	b.n	8006684 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800666e:	6878      	ldr	r0, [r7, #4]
 8006670:	f000 f98c 	bl	800698c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006674:	e006      	b.n	8006684 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006676:	6878      	ldr	r0, [r7, #4]
 8006678:	f000 f988 	bl	800698c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	2200      	movs	r2, #0
 8006680:	641a      	str	r2, [r3, #64]	@ 0x40
      }
    }
    return;
 8006682:	e170      	b.n	8006966 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006684:	bf00      	nop
    return;
 8006686:	e16e      	b.n	8006966 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800668c:	2b01      	cmp	r3, #1
 800668e:	f040 814a 	bne.w	8006926 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006692:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006696:	f003 0310 	and.w	r3, r3, #16
 800669a:	2b00      	cmp	r3, #0
 800669c:	f000 8143 	beq.w	8006926 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80066a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80066a4:	f003 0310 	and.w	r3, r3, #16
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	f000 813c 	beq.w	8006926 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80066ae:	2300      	movs	r3, #0
 80066b0:	60bb      	str	r3, [r7, #8]
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	60bb      	str	r3, [r7, #8]
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	685b      	ldr	r3, [r3, #4]
 80066c0:	60bb      	str	r3, [r7, #8]
 80066c2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	695b      	ldr	r3, [r3, #20]
 80066ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80066ce:	2b40      	cmp	r3, #64	@ 0x40
 80066d0:	f040 80b4 	bne.w	800683c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	685b      	ldr	r3, [r3, #4]
 80066dc:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80066e0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	f000 8140 	beq.w	800696a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80066ee:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80066f2:	429a      	cmp	r2, r3
 80066f4:	f080 8139 	bcs.w	800696a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80066fe:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006704:	69db      	ldr	r3, [r3, #28]
 8006706:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800670a:	f000 8088 	beq.w	800681e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	330c      	adds	r3, #12
 8006714:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006718:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800671c:	e853 3f00 	ldrex	r3, [r3]
 8006720:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8006724:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006728:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800672c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	330c      	adds	r3, #12
 8006736:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800673a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800673e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006742:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8006746:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800674a:	e841 2300 	strex	r3, r2, [r1]
 800674e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8006752:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006756:	2b00      	cmp	r3, #0
 8006758:	d1d9      	bne.n	800670e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	3314      	adds	r3, #20
 8006760:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006762:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006764:	e853 3f00 	ldrex	r3, [r3]
 8006768:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800676a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800676c:	f023 0301 	bic.w	r3, r3, #1
 8006770:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	3314      	adds	r3, #20
 800677a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800677e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8006782:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006784:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8006786:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800678a:	e841 2300 	strex	r3, r2, [r1]
 800678e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8006790:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006792:	2b00      	cmp	r3, #0
 8006794:	d1e1      	bne.n	800675a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	3314      	adds	r3, #20
 800679c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800679e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80067a0:	e853 3f00 	ldrex	r3, [r3]
 80067a4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80067a6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80067a8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80067ac:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	3314      	adds	r3, #20
 80067b6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80067ba:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80067bc:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067be:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80067c0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80067c2:	e841 2300 	strex	r3, r2, [r1]
 80067c6:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80067c8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d1e3      	bne.n	8006796 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	2220      	movs	r2, #32
 80067d2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	2200      	movs	r2, #0
 80067da:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	330c      	adds	r3, #12
 80067e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067e4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80067e6:	e853 3f00 	ldrex	r3, [r3]
 80067ea:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80067ec:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80067ee:	f023 0310 	bic.w	r3, r3, #16
 80067f2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	330c      	adds	r3, #12
 80067fc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8006800:	65ba      	str	r2, [r7, #88]	@ 0x58
 8006802:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006804:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006806:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006808:	e841 2300 	strex	r3, r2, [r1]
 800680c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800680e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006810:	2b00      	cmp	r3, #0
 8006812:	d1e3      	bne.n	80067dc <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006818:	4618      	mov	r0, r3
 800681a:	f7fc fcc5 	bl	80031a8 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006826:	b29b      	uxth	r3, r3
 8006828:	1ad3      	subs	r3, r2, r3
 800682a:	b29b      	uxth	r3, r3
 800682c:	4619      	mov	r1, r3
 800682e:	6878      	ldr	r0, [r7, #4]
 8006830:	f000 f8b6 	bl	80069a0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006834:	e099      	b.n	800696a <HAL_UART_IRQHandler+0x50e>
 8006836:	bf00      	nop
 8006838:	08006bcf 	.word	0x08006bcf
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006844:	b29b      	uxth	r3, r3
 8006846:	1ad3      	subs	r3, r2, r3
 8006848:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006850:	b29b      	uxth	r3, r3
 8006852:	2b00      	cmp	r3, #0
 8006854:	f000 808b 	beq.w	800696e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8006858:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800685c:	2b00      	cmp	r3, #0
 800685e:	f000 8086 	beq.w	800696e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	330c      	adds	r3, #12
 8006868:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800686a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800686c:	e853 3f00 	ldrex	r3, [r3]
 8006870:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006872:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006874:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006878:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	330c      	adds	r3, #12
 8006882:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8006886:	647a      	str	r2, [r7, #68]	@ 0x44
 8006888:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800688a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800688c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800688e:	e841 2300 	strex	r3, r2, [r1]
 8006892:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006894:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006896:	2b00      	cmp	r3, #0
 8006898:	d1e3      	bne.n	8006862 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	3314      	adds	r3, #20
 80068a0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068a4:	e853 3f00 	ldrex	r3, [r3]
 80068a8:	623b      	str	r3, [r7, #32]
   return(result);
 80068aa:	6a3b      	ldr	r3, [r7, #32]
 80068ac:	f023 0301 	bic.w	r3, r3, #1
 80068b0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	3314      	adds	r3, #20
 80068ba:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80068be:	633a      	str	r2, [r7, #48]	@ 0x30
 80068c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068c2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80068c4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80068c6:	e841 2300 	strex	r3, r2, [r1]
 80068ca:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80068cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d1e3      	bne.n	800689a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	2220      	movs	r2, #32
 80068d6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	2200      	movs	r2, #0
 80068de:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	330c      	adds	r3, #12
 80068e6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068e8:	693b      	ldr	r3, [r7, #16]
 80068ea:	e853 3f00 	ldrex	r3, [r3]
 80068ee:	60fb      	str	r3, [r7, #12]
   return(result);
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	f023 0310 	bic.w	r3, r3, #16
 80068f6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	330c      	adds	r3, #12
 8006900:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8006904:	61fa      	str	r2, [r7, #28]
 8006906:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006908:	69b9      	ldr	r1, [r7, #24]
 800690a:	69fa      	ldr	r2, [r7, #28]
 800690c:	e841 2300 	strex	r3, r2, [r1]
 8006910:	617b      	str	r3, [r7, #20]
   return(result);
 8006912:	697b      	ldr	r3, [r7, #20]
 8006914:	2b00      	cmp	r3, #0
 8006916:	d1e3      	bne.n	80068e0 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006918:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800691c:	4619      	mov	r1, r3
 800691e:	6878      	ldr	r0, [r7, #4]
 8006920:	f000 f83e 	bl	80069a0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006924:	e023      	b.n	800696e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006926:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800692a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800692e:	2b00      	cmp	r3, #0
 8006930:	d009      	beq.n	8006946 <HAL_UART_IRQHandler+0x4ea>
 8006932:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006936:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800693a:	2b00      	cmp	r3, #0
 800693c:	d003      	beq.n	8006946 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800693e:	6878      	ldr	r0, [r7, #4]
 8006940:	f000 f959 	bl	8006bf6 <UART_Transmit_IT>
    return;
 8006944:	e014      	b.n	8006970 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006946:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800694a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800694e:	2b00      	cmp	r3, #0
 8006950:	d00e      	beq.n	8006970 <HAL_UART_IRQHandler+0x514>
 8006952:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006956:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800695a:	2b00      	cmp	r3, #0
 800695c:	d008      	beq.n	8006970 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800695e:	6878      	ldr	r0, [r7, #4]
 8006960:	f000 f999 	bl	8006c96 <UART_EndTransmit_IT>
    return;
 8006964:	e004      	b.n	8006970 <HAL_UART_IRQHandler+0x514>
    return;
 8006966:	bf00      	nop
 8006968:	e002      	b.n	8006970 <HAL_UART_IRQHandler+0x514>
      return;
 800696a:	bf00      	nop
 800696c:	e000      	b.n	8006970 <HAL_UART_IRQHandler+0x514>
      return;
 800696e:	bf00      	nop
  }
}
 8006970:	37e8      	adds	r7, #232	@ 0xe8
 8006972:	46bd      	mov	sp, r7
 8006974:	bd80      	pop	{r7, pc}
 8006976:	bf00      	nop

08006978 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006978:	b480      	push	{r7}
 800697a:	b083      	sub	sp, #12
 800697c:	af00      	add	r7, sp, #0
 800697e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006980:	bf00      	nop
 8006982:	370c      	adds	r7, #12
 8006984:	46bd      	mov	sp, r7
 8006986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800698a:	4770      	bx	lr

0800698c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800698c:	b480      	push	{r7}
 800698e:	b083      	sub	sp, #12
 8006990:	af00      	add	r7, sp, #0
 8006992:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006994:	bf00      	nop
 8006996:	370c      	adds	r7, #12
 8006998:	46bd      	mov	sp, r7
 800699a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800699e:	4770      	bx	lr

080069a0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80069a0:	b480      	push	{r7}
 80069a2:	b083      	sub	sp, #12
 80069a4:	af00      	add	r7, sp, #0
 80069a6:	6078      	str	r0, [r7, #4]
 80069a8:	460b      	mov	r3, r1
 80069aa:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80069ac:	bf00      	nop
 80069ae:	370c      	adds	r7, #12
 80069b0:	46bd      	mov	sp, r7
 80069b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b6:	4770      	bx	lr

080069b8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80069b8:	b580      	push	{r7, lr}
 80069ba:	b090      	sub	sp, #64	@ 0x40
 80069bc:	af00      	add	r7, sp, #0
 80069be:	60f8      	str	r0, [r7, #12]
 80069c0:	60b9      	str	r1, [r7, #8]
 80069c2:	603b      	str	r3, [r7, #0]
 80069c4:	4613      	mov	r3, r2
 80069c6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80069c8:	e050      	b.n	8006a6c <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80069ca:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80069cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069d0:	d04c      	beq.n	8006a6c <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80069d2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d007      	beq.n	80069e8 <UART_WaitOnFlagUntilTimeout+0x30>
 80069d8:	f7fb fd8c 	bl	80024f4 <HAL_GetTick>
 80069dc:	4602      	mov	r2, r0
 80069de:	683b      	ldr	r3, [r7, #0]
 80069e0:	1ad3      	subs	r3, r2, r3
 80069e2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80069e4:	429a      	cmp	r2, r3
 80069e6:	d241      	bcs.n	8006a6c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	330c      	adds	r3, #12
 80069ee:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80069f2:	e853 3f00 	ldrex	r3, [r3]
 80069f6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80069f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069fa:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 80069fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	330c      	adds	r3, #12
 8006a06:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8006a08:	637a      	str	r2, [r7, #52]	@ 0x34
 8006a0a:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a0c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006a0e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006a10:	e841 2300 	strex	r3, r2, [r1]
 8006a14:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8006a16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d1e5      	bne.n	80069e8 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	3314      	adds	r3, #20
 8006a22:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a24:	697b      	ldr	r3, [r7, #20]
 8006a26:	e853 3f00 	ldrex	r3, [r3]
 8006a2a:	613b      	str	r3, [r7, #16]
   return(result);
 8006a2c:	693b      	ldr	r3, [r7, #16]
 8006a2e:	f023 0301 	bic.w	r3, r3, #1
 8006a32:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	3314      	adds	r3, #20
 8006a3a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006a3c:	623a      	str	r2, [r7, #32]
 8006a3e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a40:	69f9      	ldr	r1, [r7, #28]
 8006a42:	6a3a      	ldr	r2, [r7, #32]
 8006a44:	e841 2300 	strex	r3, r2, [r1]
 8006a48:	61bb      	str	r3, [r7, #24]
   return(result);
 8006a4a:	69bb      	ldr	r3, [r7, #24]
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d1e5      	bne.n	8006a1c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	2220      	movs	r2, #32
 8006a54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	2220      	movs	r2, #32
 8006a5c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	2200      	movs	r2, #0
 8006a64:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_TIMEOUT;
 8006a68:	2303      	movs	r3, #3
 8006a6a:	e00f      	b.n	8006a8c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	681a      	ldr	r2, [r3, #0]
 8006a72:	68bb      	ldr	r3, [r7, #8]
 8006a74:	4013      	ands	r3, r2
 8006a76:	68ba      	ldr	r2, [r7, #8]
 8006a78:	429a      	cmp	r2, r3
 8006a7a:	bf0c      	ite	eq
 8006a7c:	2301      	moveq	r3, #1
 8006a7e:	2300      	movne	r3, #0
 8006a80:	b2db      	uxtb	r3, r3
 8006a82:	461a      	mov	r2, r3
 8006a84:	79fb      	ldrb	r3, [r7, #7]
 8006a86:	429a      	cmp	r2, r3
 8006a88:	d09f      	beq.n	80069ca <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006a8a:	2300      	movs	r3, #0
}
 8006a8c:	4618      	mov	r0, r3
 8006a8e:	3740      	adds	r7, #64	@ 0x40
 8006a90:	46bd      	mov	sp, r7
 8006a92:	bd80      	pop	{r7, pc}

08006a94 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006a94:	b480      	push	{r7}
 8006a96:	b085      	sub	sp, #20
 8006a98:	af00      	add	r7, sp, #0
 8006a9a:	60f8      	str	r0, [r7, #12]
 8006a9c:	60b9      	str	r1, [r7, #8]
 8006a9e:	4613      	mov	r3, r2
 8006aa0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	68ba      	ldr	r2, [r7, #8]
 8006aa6:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	88fa      	ldrh	r2, [r7, #6]
 8006aac:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	88fa      	ldrh	r2, [r7, #6]
 8006ab2:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	2200      	movs	r2, #0
 8006ab8:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	2222      	movs	r2, #34	@ 0x22
 8006abe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	2200      	movs	r2, #0
 8006ac6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	68da      	ldr	r2, [r3, #12]
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006ad8:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	695a      	ldr	r2, [r3, #20]
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	f042 0201 	orr.w	r2, r2, #1
 8006ae8:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	68da      	ldr	r2, [r3, #12]
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	f042 0220 	orr.w	r2, r2, #32
 8006af8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006afa:	2300      	movs	r3, #0
}
 8006afc:	4618      	mov	r0, r3
 8006afe:	3714      	adds	r7, #20
 8006b00:	46bd      	mov	sp, r7
 8006b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b06:	4770      	bx	lr

08006b08 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006b08:	b480      	push	{r7}
 8006b0a:	b095      	sub	sp, #84	@ 0x54
 8006b0c:	af00      	add	r7, sp, #0
 8006b0e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	330c      	adds	r3, #12
 8006b16:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b18:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006b1a:	e853 3f00 	ldrex	r3, [r3]
 8006b1e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006b20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b22:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006b26:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	330c      	adds	r3, #12
 8006b2e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006b30:	643a      	str	r2, [r7, #64]	@ 0x40
 8006b32:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b34:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006b36:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006b38:	e841 2300 	strex	r3, r2, [r1]
 8006b3c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006b3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d1e5      	bne.n	8006b10 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	3314      	adds	r3, #20
 8006b4a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b4c:	6a3b      	ldr	r3, [r7, #32]
 8006b4e:	e853 3f00 	ldrex	r3, [r3]
 8006b52:	61fb      	str	r3, [r7, #28]
   return(result);
 8006b54:	69fb      	ldr	r3, [r7, #28]
 8006b56:	f023 0301 	bic.w	r3, r3, #1
 8006b5a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	3314      	adds	r3, #20
 8006b62:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006b64:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006b66:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b68:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006b6a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006b6c:	e841 2300 	strex	r3, r2, [r1]
 8006b70:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006b72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d1e5      	bne.n	8006b44 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b7c:	2b01      	cmp	r3, #1
 8006b7e:	d119      	bne.n	8006bb4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	330c      	adds	r3, #12
 8006b86:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	e853 3f00 	ldrex	r3, [r3]
 8006b8e:	60bb      	str	r3, [r7, #8]
   return(result);
 8006b90:	68bb      	ldr	r3, [r7, #8]
 8006b92:	f023 0310 	bic.w	r3, r3, #16
 8006b96:	647b      	str	r3, [r7, #68]	@ 0x44
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	330c      	adds	r3, #12
 8006b9e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006ba0:	61ba      	str	r2, [r7, #24]
 8006ba2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ba4:	6979      	ldr	r1, [r7, #20]
 8006ba6:	69ba      	ldr	r2, [r7, #24]
 8006ba8:	e841 2300 	strex	r3, r2, [r1]
 8006bac:	613b      	str	r3, [r7, #16]
   return(result);
 8006bae:	693b      	ldr	r3, [r7, #16]
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d1e5      	bne.n	8006b80 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	2220      	movs	r2, #32
 8006bb8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	2200      	movs	r2, #0
 8006bc0:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8006bc2:	bf00      	nop
 8006bc4:	3754      	adds	r7, #84	@ 0x54
 8006bc6:	46bd      	mov	sp, r7
 8006bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bcc:	4770      	bx	lr

08006bce <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006bce:	b580      	push	{r7, lr}
 8006bd0:	b084      	sub	sp, #16
 8006bd2:	af00      	add	r7, sp, #0
 8006bd4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006bda:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	2200      	movs	r2, #0
 8006be0:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	2200      	movs	r2, #0
 8006be6:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006be8:	68f8      	ldr	r0, [r7, #12]
 8006bea:	f7ff fecf 	bl	800698c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006bee:	bf00      	nop
 8006bf0:	3710      	adds	r7, #16
 8006bf2:	46bd      	mov	sp, r7
 8006bf4:	bd80      	pop	{r7, pc}

08006bf6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006bf6:	b480      	push	{r7}
 8006bf8:	b085      	sub	sp, #20
 8006bfa:	af00      	add	r7, sp, #0
 8006bfc:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006c04:	b2db      	uxtb	r3, r3
 8006c06:	2b21      	cmp	r3, #33	@ 0x21
 8006c08:	d13e      	bne.n	8006c88 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	689b      	ldr	r3, [r3, #8]
 8006c0e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006c12:	d114      	bne.n	8006c3e <UART_Transmit_IT+0x48>
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	691b      	ldr	r3, [r3, #16]
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d110      	bne.n	8006c3e <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	6a1b      	ldr	r3, [r3, #32]
 8006c20:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	881b      	ldrh	r3, [r3, #0]
 8006c26:	461a      	mov	r2, r3
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006c30:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	6a1b      	ldr	r3, [r3, #32]
 8006c36:	1c9a      	adds	r2, r3, #2
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	621a      	str	r2, [r3, #32]
 8006c3c:	e008      	b.n	8006c50 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	6a1b      	ldr	r3, [r3, #32]
 8006c42:	1c59      	adds	r1, r3, #1
 8006c44:	687a      	ldr	r2, [r7, #4]
 8006c46:	6211      	str	r1, [r2, #32]
 8006c48:	781a      	ldrb	r2, [r3, #0]
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006c54:	b29b      	uxth	r3, r3
 8006c56:	3b01      	subs	r3, #1
 8006c58:	b29b      	uxth	r3, r3
 8006c5a:	687a      	ldr	r2, [r7, #4]
 8006c5c:	4619      	mov	r1, r3
 8006c5e:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d10f      	bne.n	8006c84 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	68da      	ldr	r2, [r3, #12]
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006c72:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	68da      	ldr	r2, [r3, #12]
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006c82:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006c84:	2300      	movs	r3, #0
 8006c86:	e000      	b.n	8006c8a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006c88:	2302      	movs	r3, #2
  }
}
 8006c8a:	4618      	mov	r0, r3
 8006c8c:	3714      	adds	r7, #20
 8006c8e:	46bd      	mov	sp, r7
 8006c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c94:	4770      	bx	lr

08006c96 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006c96:	b580      	push	{r7, lr}
 8006c98:	b082      	sub	sp, #8
 8006c9a:	af00      	add	r7, sp, #0
 8006c9c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	68da      	ldr	r2, [r3, #12]
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006cac:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	2220      	movs	r2, #32
 8006cb2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006cb6:	6878      	ldr	r0, [r7, #4]
 8006cb8:	f7ff fe5e 	bl	8006978 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006cbc:	2300      	movs	r3, #0
}
 8006cbe:	4618      	mov	r0, r3
 8006cc0:	3708      	adds	r7, #8
 8006cc2:	46bd      	mov	sp, r7
 8006cc4:	bd80      	pop	{r7, pc}

08006cc6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006cc6:	b580      	push	{r7, lr}
 8006cc8:	b08c      	sub	sp, #48	@ 0x30
 8006cca:	af00      	add	r7, sp, #0
 8006ccc:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006cd4:	b2db      	uxtb	r3, r3
 8006cd6:	2b22      	cmp	r3, #34	@ 0x22
 8006cd8:	f040 80ab 	bne.w	8006e32 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	689b      	ldr	r3, [r3, #8]
 8006ce0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006ce4:	d117      	bne.n	8006d16 <UART_Receive_IT+0x50>
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	691b      	ldr	r3, [r3, #16]
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d113      	bne.n	8006d16 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006cee:	2300      	movs	r3, #0
 8006cf0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006cf6:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	685b      	ldr	r3, [r3, #4]
 8006cfe:	b29b      	uxth	r3, r3
 8006d00:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d04:	b29a      	uxth	r2, r3
 8006d06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d08:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d0e:	1c9a      	adds	r2, r3, #2
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	629a      	str	r2, [r3, #40]	@ 0x28
 8006d14:	e026      	b.n	8006d64 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8006d1c:	2300      	movs	r3, #0
 8006d1e:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	689b      	ldr	r3, [r3, #8]
 8006d24:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006d28:	d007      	beq.n	8006d3a <UART_Receive_IT+0x74>
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	689b      	ldr	r3, [r3, #8]
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d10a      	bne.n	8006d48 <UART_Receive_IT+0x82>
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	691b      	ldr	r3, [r3, #16]
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d106      	bne.n	8006d48 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	685b      	ldr	r3, [r3, #4]
 8006d40:	b2da      	uxtb	r2, r3
 8006d42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d44:	701a      	strb	r2, [r3, #0]
 8006d46:	e008      	b.n	8006d5a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	685b      	ldr	r3, [r3, #4]
 8006d4e:	b2db      	uxtb	r3, r3
 8006d50:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006d54:	b2da      	uxtb	r2, r3
 8006d56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d58:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d5e:	1c5a      	adds	r2, r3, #1
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006d68:	b29b      	uxth	r3, r3
 8006d6a:	3b01      	subs	r3, #1
 8006d6c:	b29b      	uxth	r3, r3
 8006d6e:	687a      	ldr	r2, [r7, #4]
 8006d70:	4619      	mov	r1, r3
 8006d72:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d15a      	bne.n	8006e2e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	68da      	ldr	r2, [r3, #12]
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	f022 0220 	bic.w	r2, r2, #32
 8006d86:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	68da      	ldr	r2, [r3, #12]
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006d96:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	695a      	ldr	r2, [r3, #20]
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	f022 0201 	bic.w	r2, r2, #1
 8006da6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	2220      	movs	r2, #32
 8006dac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006db4:	2b01      	cmp	r3, #1
 8006db6:	d135      	bne.n	8006e24 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	2200      	movs	r2, #0
 8006dbc:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	330c      	adds	r3, #12
 8006dc4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dc6:	697b      	ldr	r3, [r7, #20]
 8006dc8:	e853 3f00 	ldrex	r3, [r3]
 8006dcc:	613b      	str	r3, [r7, #16]
   return(result);
 8006dce:	693b      	ldr	r3, [r7, #16]
 8006dd0:	f023 0310 	bic.w	r3, r3, #16
 8006dd4:	627b      	str	r3, [r7, #36]	@ 0x24
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	330c      	adds	r3, #12
 8006ddc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006dde:	623a      	str	r2, [r7, #32]
 8006de0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006de2:	69f9      	ldr	r1, [r7, #28]
 8006de4:	6a3a      	ldr	r2, [r7, #32]
 8006de6:	e841 2300 	strex	r3, r2, [r1]
 8006dea:	61bb      	str	r3, [r7, #24]
   return(result);
 8006dec:	69bb      	ldr	r3, [r7, #24]
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d1e5      	bne.n	8006dbe <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	f003 0310 	and.w	r3, r3, #16
 8006dfc:	2b10      	cmp	r3, #16
 8006dfe:	d10a      	bne.n	8006e16 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006e00:	2300      	movs	r3, #0
 8006e02:	60fb      	str	r3, [r7, #12]
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	60fb      	str	r3, [r7, #12]
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	685b      	ldr	r3, [r3, #4]
 8006e12:	60fb      	str	r3, [r7, #12]
 8006e14:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006e1a:	4619      	mov	r1, r3
 8006e1c:	6878      	ldr	r0, [r7, #4]
 8006e1e:	f7ff fdbf 	bl	80069a0 <HAL_UARTEx_RxEventCallback>
 8006e22:	e002      	b.n	8006e2a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006e24:	6878      	ldr	r0, [r7, #4]
 8006e26:	f7fb f99b 	bl	8002160 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006e2a:	2300      	movs	r3, #0
 8006e2c:	e002      	b.n	8006e34 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8006e2e:	2300      	movs	r3, #0
 8006e30:	e000      	b.n	8006e34 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8006e32:	2302      	movs	r3, #2
  }
}
 8006e34:	4618      	mov	r0, r3
 8006e36:	3730      	adds	r7, #48	@ 0x30
 8006e38:	46bd      	mov	sp, r7
 8006e3a:	bd80      	pop	{r7, pc}

08006e3c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006e3c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006e40:	b0c0      	sub	sp, #256	@ 0x100
 8006e42:	af00      	add	r7, sp, #0
 8006e44:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006e48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	691b      	ldr	r3, [r3, #16]
 8006e50:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8006e54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006e58:	68d9      	ldr	r1, [r3, #12]
 8006e5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006e5e:	681a      	ldr	r2, [r3, #0]
 8006e60:	ea40 0301 	orr.w	r3, r0, r1
 8006e64:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006e66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006e6a:	689a      	ldr	r2, [r3, #8]
 8006e6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006e70:	691b      	ldr	r3, [r3, #16]
 8006e72:	431a      	orrs	r2, r3
 8006e74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006e78:	695b      	ldr	r3, [r3, #20]
 8006e7a:	431a      	orrs	r2, r3
 8006e7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006e80:	69db      	ldr	r3, [r3, #28]
 8006e82:	4313      	orrs	r3, r2
 8006e84:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006e88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	68db      	ldr	r3, [r3, #12]
 8006e90:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8006e94:	f021 010c 	bic.w	r1, r1, #12
 8006e98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006e9c:	681a      	ldr	r2, [r3, #0]
 8006e9e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006ea2:	430b      	orrs	r3, r1
 8006ea4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006ea6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	695b      	ldr	r3, [r3, #20]
 8006eae:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8006eb2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006eb6:	6999      	ldr	r1, [r3, #24]
 8006eb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006ebc:	681a      	ldr	r2, [r3, #0]
 8006ebe:	ea40 0301 	orr.w	r3, r0, r1
 8006ec2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006ec4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006ec8:	681a      	ldr	r2, [r3, #0]
 8006eca:	4b8f      	ldr	r3, [pc, #572]	@ (8007108 <UART_SetConfig+0x2cc>)
 8006ecc:	429a      	cmp	r2, r3
 8006ece:	d005      	beq.n	8006edc <UART_SetConfig+0xa0>
 8006ed0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006ed4:	681a      	ldr	r2, [r3, #0]
 8006ed6:	4b8d      	ldr	r3, [pc, #564]	@ (800710c <UART_SetConfig+0x2d0>)
 8006ed8:	429a      	cmp	r2, r3
 8006eda:	d104      	bne.n	8006ee6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006edc:	f7fd fbf8 	bl	80046d0 <HAL_RCC_GetPCLK2Freq>
 8006ee0:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8006ee4:	e003      	b.n	8006eee <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006ee6:	f7fd fbdf 	bl	80046a8 <HAL_RCC_GetPCLK1Freq>
 8006eea:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006eee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006ef2:	69db      	ldr	r3, [r3, #28]
 8006ef4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006ef8:	f040 810c 	bne.w	8007114 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006efc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006f00:	2200      	movs	r2, #0
 8006f02:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006f06:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8006f0a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8006f0e:	4622      	mov	r2, r4
 8006f10:	462b      	mov	r3, r5
 8006f12:	1891      	adds	r1, r2, r2
 8006f14:	65b9      	str	r1, [r7, #88]	@ 0x58
 8006f16:	415b      	adcs	r3, r3
 8006f18:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006f1a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8006f1e:	4621      	mov	r1, r4
 8006f20:	eb12 0801 	adds.w	r8, r2, r1
 8006f24:	4629      	mov	r1, r5
 8006f26:	eb43 0901 	adc.w	r9, r3, r1
 8006f2a:	f04f 0200 	mov.w	r2, #0
 8006f2e:	f04f 0300 	mov.w	r3, #0
 8006f32:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006f36:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006f3a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006f3e:	4690      	mov	r8, r2
 8006f40:	4699      	mov	r9, r3
 8006f42:	4623      	mov	r3, r4
 8006f44:	eb18 0303 	adds.w	r3, r8, r3
 8006f48:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006f4c:	462b      	mov	r3, r5
 8006f4e:	eb49 0303 	adc.w	r3, r9, r3
 8006f52:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006f56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006f5a:	685b      	ldr	r3, [r3, #4]
 8006f5c:	2200      	movs	r2, #0
 8006f5e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006f62:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8006f66:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8006f6a:	460b      	mov	r3, r1
 8006f6c:	18db      	adds	r3, r3, r3
 8006f6e:	653b      	str	r3, [r7, #80]	@ 0x50
 8006f70:	4613      	mov	r3, r2
 8006f72:	eb42 0303 	adc.w	r3, r2, r3
 8006f76:	657b      	str	r3, [r7, #84]	@ 0x54
 8006f78:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8006f7c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8006f80:	f7f9 f976 	bl	8000270 <__aeabi_uldivmod>
 8006f84:	4602      	mov	r2, r0
 8006f86:	460b      	mov	r3, r1
 8006f88:	4b61      	ldr	r3, [pc, #388]	@ (8007110 <UART_SetConfig+0x2d4>)
 8006f8a:	fba3 2302 	umull	r2, r3, r3, r2
 8006f8e:	095b      	lsrs	r3, r3, #5
 8006f90:	011c      	lsls	r4, r3, #4
 8006f92:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006f96:	2200      	movs	r2, #0
 8006f98:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006f9c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8006fa0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8006fa4:	4642      	mov	r2, r8
 8006fa6:	464b      	mov	r3, r9
 8006fa8:	1891      	adds	r1, r2, r2
 8006faa:	64b9      	str	r1, [r7, #72]	@ 0x48
 8006fac:	415b      	adcs	r3, r3
 8006fae:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006fb0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8006fb4:	4641      	mov	r1, r8
 8006fb6:	eb12 0a01 	adds.w	sl, r2, r1
 8006fba:	4649      	mov	r1, r9
 8006fbc:	eb43 0b01 	adc.w	fp, r3, r1
 8006fc0:	f04f 0200 	mov.w	r2, #0
 8006fc4:	f04f 0300 	mov.w	r3, #0
 8006fc8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006fcc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006fd0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006fd4:	4692      	mov	sl, r2
 8006fd6:	469b      	mov	fp, r3
 8006fd8:	4643      	mov	r3, r8
 8006fda:	eb1a 0303 	adds.w	r3, sl, r3
 8006fde:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006fe2:	464b      	mov	r3, r9
 8006fe4:	eb4b 0303 	adc.w	r3, fp, r3
 8006fe8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006fec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006ff0:	685b      	ldr	r3, [r3, #4]
 8006ff2:	2200      	movs	r2, #0
 8006ff4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006ff8:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8006ffc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8007000:	460b      	mov	r3, r1
 8007002:	18db      	adds	r3, r3, r3
 8007004:	643b      	str	r3, [r7, #64]	@ 0x40
 8007006:	4613      	mov	r3, r2
 8007008:	eb42 0303 	adc.w	r3, r2, r3
 800700c:	647b      	str	r3, [r7, #68]	@ 0x44
 800700e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8007012:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8007016:	f7f9 f92b 	bl	8000270 <__aeabi_uldivmod>
 800701a:	4602      	mov	r2, r0
 800701c:	460b      	mov	r3, r1
 800701e:	4611      	mov	r1, r2
 8007020:	4b3b      	ldr	r3, [pc, #236]	@ (8007110 <UART_SetConfig+0x2d4>)
 8007022:	fba3 2301 	umull	r2, r3, r3, r1
 8007026:	095b      	lsrs	r3, r3, #5
 8007028:	2264      	movs	r2, #100	@ 0x64
 800702a:	fb02 f303 	mul.w	r3, r2, r3
 800702e:	1acb      	subs	r3, r1, r3
 8007030:	00db      	lsls	r3, r3, #3
 8007032:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8007036:	4b36      	ldr	r3, [pc, #216]	@ (8007110 <UART_SetConfig+0x2d4>)
 8007038:	fba3 2302 	umull	r2, r3, r3, r2
 800703c:	095b      	lsrs	r3, r3, #5
 800703e:	005b      	lsls	r3, r3, #1
 8007040:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8007044:	441c      	add	r4, r3
 8007046:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800704a:	2200      	movs	r2, #0
 800704c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007050:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8007054:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8007058:	4642      	mov	r2, r8
 800705a:	464b      	mov	r3, r9
 800705c:	1891      	adds	r1, r2, r2
 800705e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8007060:	415b      	adcs	r3, r3
 8007062:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007064:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8007068:	4641      	mov	r1, r8
 800706a:	1851      	adds	r1, r2, r1
 800706c:	6339      	str	r1, [r7, #48]	@ 0x30
 800706e:	4649      	mov	r1, r9
 8007070:	414b      	adcs	r3, r1
 8007072:	637b      	str	r3, [r7, #52]	@ 0x34
 8007074:	f04f 0200 	mov.w	r2, #0
 8007078:	f04f 0300 	mov.w	r3, #0
 800707c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8007080:	4659      	mov	r1, fp
 8007082:	00cb      	lsls	r3, r1, #3
 8007084:	4651      	mov	r1, sl
 8007086:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800708a:	4651      	mov	r1, sl
 800708c:	00ca      	lsls	r2, r1, #3
 800708e:	4610      	mov	r0, r2
 8007090:	4619      	mov	r1, r3
 8007092:	4603      	mov	r3, r0
 8007094:	4642      	mov	r2, r8
 8007096:	189b      	adds	r3, r3, r2
 8007098:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800709c:	464b      	mov	r3, r9
 800709e:	460a      	mov	r2, r1
 80070a0:	eb42 0303 	adc.w	r3, r2, r3
 80070a4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80070a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80070ac:	685b      	ldr	r3, [r3, #4]
 80070ae:	2200      	movs	r2, #0
 80070b0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80070b4:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80070b8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80070bc:	460b      	mov	r3, r1
 80070be:	18db      	adds	r3, r3, r3
 80070c0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80070c2:	4613      	mov	r3, r2
 80070c4:	eb42 0303 	adc.w	r3, r2, r3
 80070c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80070ca:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80070ce:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80070d2:	f7f9 f8cd 	bl	8000270 <__aeabi_uldivmod>
 80070d6:	4602      	mov	r2, r0
 80070d8:	460b      	mov	r3, r1
 80070da:	4b0d      	ldr	r3, [pc, #52]	@ (8007110 <UART_SetConfig+0x2d4>)
 80070dc:	fba3 1302 	umull	r1, r3, r3, r2
 80070e0:	095b      	lsrs	r3, r3, #5
 80070e2:	2164      	movs	r1, #100	@ 0x64
 80070e4:	fb01 f303 	mul.w	r3, r1, r3
 80070e8:	1ad3      	subs	r3, r2, r3
 80070ea:	00db      	lsls	r3, r3, #3
 80070ec:	3332      	adds	r3, #50	@ 0x32
 80070ee:	4a08      	ldr	r2, [pc, #32]	@ (8007110 <UART_SetConfig+0x2d4>)
 80070f0:	fba2 2303 	umull	r2, r3, r2, r3
 80070f4:	095b      	lsrs	r3, r3, #5
 80070f6:	f003 0207 	and.w	r2, r3, #7
 80070fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	4422      	add	r2, r4
 8007102:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007104:	e106      	b.n	8007314 <UART_SetConfig+0x4d8>
 8007106:	bf00      	nop
 8007108:	40011000 	.word	0x40011000
 800710c:	40011400 	.word	0x40011400
 8007110:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007114:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007118:	2200      	movs	r2, #0
 800711a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800711e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8007122:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8007126:	4642      	mov	r2, r8
 8007128:	464b      	mov	r3, r9
 800712a:	1891      	adds	r1, r2, r2
 800712c:	6239      	str	r1, [r7, #32]
 800712e:	415b      	adcs	r3, r3
 8007130:	627b      	str	r3, [r7, #36]	@ 0x24
 8007132:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007136:	4641      	mov	r1, r8
 8007138:	1854      	adds	r4, r2, r1
 800713a:	4649      	mov	r1, r9
 800713c:	eb43 0501 	adc.w	r5, r3, r1
 8007140:	f04f 0200 	mov.w	r2, #0
 8007144:	f04f 0300 	mov.w	r3, #0
 8007148:	00eb      	lsls	r3, r5, #3
 800714a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800714e:	00e2      	lsls	r2, r4, #3
 8007150:	4614      	mov	r4, r2
 8007152:	461d      	mov	r5, r3
 8007154:	4643      	mov	r3, r8
 8007156:	18e3      	adds	r3, r4, r3
 8007158:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800715c:	464b      	mov	r3, r9
 800715e:	eb45 0303 	adc.w	r3, r5, r3
 8007162:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007166:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800716a:	685b      	ldr	r3, [r3, #4]
 800716c:	2200      	movs	r2, #0
 800716e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007172:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8007176:	f04f 0200 	mov.w	r2, #0
 800717a:	f04f 0300 	mov.w	r3, #0
 800717e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8007182:	4629      	mov	r1, r5
 8007184:	008b      	lsls	r3, r1, #2
 8007186:	4621      	mov	r1, r4
 8007188:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800718c:	4621      	mov	r1, r4
 800718e:	008a      	lsls	r2, r1, #2
 8007190:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8007194:	f7f9 f86c 	bl	8000270 <__aeabi_uldivmod>
 8007198:	4602      	mov	r2, r0
 800719a:	460b      	mov	r3, r1
 800719c:	4b60      	ldr	r3, [pc, #384]	@ (8007320 <UART_SetConfig+0x4e4>)
 800719e:	fba3 2302 	umull	r2, r3, r3, r2
 80071a2:	095b      	lsrs	r3, r3, #5
 80071a4:	011c      	lsls	r4, r3, #4
 80071a6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80071aa:	2200      	movs	r2, #0
 80071ac:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80071b0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80071b4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80071b8:	4642      	mov	r2, r8
 80071ba:	464b      	mov	r3, r9
 80071bc:	1891      	adds	r1, r2, r2
 80071be:	61b9      	str	r1, [r7, #24]
 80071c0:	415b      	adcs	r3, r3
 80071c2:	61fb      	str	r3, [r7, #28]
 80071c4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80071c8:	4641      	mov	r1, r8
 80071ca:	1851      	adds	r1, r2, r1
 80071cc:	6139      	str	r1, [r7, #16]
 80071ce:	4649      	mov	r1, r9
 80071d0:	414b      	adcs	r3, r1
 80071d2:	617b      	str	r3, [r7, #20]
 80071d4:	f04f 0200 	mov.w	r2, #0
 80071d8:	f04f 0300 	mov.w	r3, #0
 80071dc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80071e0:	4659      	mov	r1, fp
 80071e2:	00cb      	lsls	r3, r1, #3
 80071e4:	4651      	mov	r1, sl
 80071e6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80071ea:	4651      	mov	r1, sl
 80071ec:	00ca      	lsls	r2, r1, #3
 80071ee:	4610      	mov	r0, r2
 80071f0:	4619      	mov	r1, r3
 80071f2:	4603      	mov	r3, r0
 80071f4:	4642      	mov	r2, r8
 80071f6:	189b      	adds	r3, r3, r2
 80071f8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80071fc:	464b      	mov	r3, r9
 80071fe:	460a      	mov	r2, r1
 8007200:	eb42 0303 	adc.w	r3, r2, r3
 8007204:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007208:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800720c:	685b      	ldr	r3, [r3, #4]
 800720e:	2200      	movs	r2, #0
 8007210:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007212:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8007214:	f04f 0200 	mov.w	r2, #0
 8007218:	f04f 0300 	mov.w	r3, #0
 800721c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8007220:	4649      	mov	r1, r9
 8007222:	008b      	lsls	r3, r1, #2
 8007224:	4641      	mov	r1, r8
 8007226:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800722a:	4641      	mov	r1, r8
 800722c:	008a      	lsls	r2, r1, #2
 800722e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8007232:	f7f9 f81d 	bl	8000270 <__aeabi_uldivmod>
 8007236:	4602      	mov	r2, r0
 8007238:	460b      	mov	r3, r1
 800723a:	4611      	mov	r1, r2
 800723c:	4b38      	ldr	r3, [pc, #224]	@ (8007320 <UART_SetConfig+0x4e4>)
 800723e:	fba3 2301 	umull	r2, r3, r3, r1
 8007242:	095b      	lsrs	r3, r3, #5
 8007244:	2264      	movs	r2, #100	@ 0x64
 8007246:	fb02 f303 	mul.w	r3, r2, r3
 800724a:	1acb      	subs	r3, r1, r3
 800724c:	011b      	lsls	r3, r3, #4
 800724e:	3332      	adds	r3, #50	@ 0x32
 8007250:	4a33      	ldr	r2, [pc, #204]	@ (8007320 <UART_SetConfig+0x4e4>)
 8007252:	fba2 2303 	umull	r2, r3, r2, r3
 8007256:	095b      	lsrs	r3, r3, #5
 8007258:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800725c:	441c      	add	r4, r3
 800725e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007262:	2200      	movs	r2, #0
 8007264:	673b      	str	r3, [r7, #112]	@ 0x70
 8007266:	677a      	str	r2, [r7, #116]	@ 0x74
 8007268:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800726c:	4642      	mov	r2, r8
 800726e:	464b      	mov	r3, r9
 8007270:	1891      	adds	r1, r2, r2
 8007272:	60b9      	str	r1, [r7, #8]
 8007274:	415b      	adcs	r3, r3
 8007276:	60fb      	str	r3, [r7, #12]
 8007278:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800727c:	4641      	mov	r1, r8
 800727e:	1851      	adds	r1, r2, r1
 8007280:	6039      	str	r1, [r7, #0]
 8007282:	4649      	mov	r1, r9
 8007284:	414b      	adcs	r3, r1
 8007286:	607b      	str	r3, [r7, #4]
 8007288:	f04f 0200 	mov.w	r2, #0
 800728c:	f04f 0300 	mov.w	r3, #0
 8007290:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007294:	4659      	mov	r1, fp
 8007296:	00cb      	lsls	r3, r1, #3
 8007298:	4651      	mov	r1, sl
 800729a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800729e:	4651      	mov	r1, sl
 80072a0:	00ca      	lsls	r2, r1, #3
 80072a2:	4610      	mov	r0, r2
 80072a4:	4619      	mov	r1, r3
 80072a6:	4603      	mov	r3, r0
 80072a8:	4642      	mov	r2, r8
 80072aa:	189b      	adds	r3, r3, r2
 80072ac:	66bb      	str	r3, [r7, #104]	@ 0x68
 80072ae:	464b      	mov	r3, r9
 80072b0:	460a      	mov	r2, r1
 80072b2:	eb42 0303 	adc.w	r3, r2, r3
 80072b6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80072b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80072bc:	685b      	ldr	r3, [r3, #4]
 80072be:	2200      	movs	r2, #0
 80072c0:	663b      	str	r3, [r7, #96]	@ 0x60
 80072c2:	667a      	str	r2, [r7, #100]	@ 0x64
 80072c4:	f04f 0200 	mov.w	r2, #0
 80072c8:	f04f 0300 	mov.w	r3, #0
 80072cc:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80072d0:	4649      	mov	r1, r9
 80072d2:	008b      	lsls	r3, r1, #2
 80072d4:	4641      	mov	r1, r8
 80072d6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80072da:	4641      	mov	r1, r8
 80072dc:	008a      	lsls	r2, r1, #2
 80072de:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80072e2:	f7f8 ffc5 	bl	8000270 <__aeabi_uldivmod>
 80072e6:	4602      	mov	r2, r0
 80072e8:	460b      	mov	r3, r1
 80072ea:	4b0d      	ldr	r3, [pc, #52]	@ (8007320 <UART_SetConfig+0x4e4>)
 80072ec:	fba3 1302 	umull	r1, r3, r3, r2
 80072f0:	095b      	lsrs	r3, r3, #5
 80072f2:	2164      	movs	r1, #100	@ 0x64
 80072f4:	fb01 f303 	mul.w	r3, r1, r3
 80072f8:	1ad3      	subs	r3, r2, r3
 80072fa:	011b      	lsls	r3, r3, #4
 80072fc:	3332      	adds	r3, #50	@ 0x32
 80072fe:	4a08      	ldr	r2, [pc, #32]	@ (8007320 <UART_SetConfig+0x4e4>)
 8007300:	fba2 2303 	umull	r2, r3, r2, r3
 8007304:	095b      	lsrs	r3, r3, #5
 8007306:	f003 020f 	and.w	r2, r3, #15
 800730a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	4422      	add	r2, r4
 8007312:	609a      	str	r2, [r3, #8]
}
 8007314:	bf00      	nop
 8007316:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800731a:	46bd      	mov	sp, r7
 800731c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007320:	51eb851f 	.word	0x51eb851f

08007324 <FSMC_NORSRAM_Init>:
  * @param  Device Pointer to NORSRAM device instance
  * @param  Init Pointer to NORSRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_InitTypeDef* Init)
{ 
 8007324:	b480      	push	{r7}
 8007326:	b085      	sub	sp, #20
 8007328:	af00      	add	r7, sp, #0
 800732a:	6078      	str	r0, [r7, #4]
 800732c:	6039      	str	r1, [r7, #0]
  uint32_t tmpr = 0U;
 800732e:	2300      	movs	r3, #0
 8007330:	60fb      	str	r3, [r7, #12]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
  assert_param(IS_FSMC_CONTINOUS_CLOCK(Init->ContinuousClock));
#endif /* STM32F412Zx || STM32F412Vx || STM32F413xx || STM32F423xx */
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Init->NSBank];
 8007332:	683b      	ldr	r3, [r7, #0]
 8007334:	681a      	ldr	r2, [r3, #0]
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800733c:	60fb      	str	r3, [r7, #12]

#if defined(STM32F405xx) || defined(STM32F415xx) || defined(STM32F407xx) || defined(STM32F417xx)
  /* Clear MBKEN, MUXEN, MTYP, MWID, FACCEN, BURSTEN, WAITPOL, WRAPMOD, WAITCFG, WREN,
           WAITEN, EXTMOD, ASYNCWAIT, CPSIZE and CBURSTRW bits */
  tmpr &= ((uint32_t)~(FSMC_BCR1_MBKEN     | FSMC_BCR1_MUXEN    | FSMC_BCR1_MTYP     | \
 800733e:	68fa      	ldr	r2, [r7, #12]
 8007340:	4b20      	ldr	r3, [pc, #128]	@ (80073c4 <FSMC_NORSRAM_Init+0xa0>)
 8007342:	4013      	ands	r3, r2
 8007344:	60fb      	str	r3, [r7, #12]
                       FSMC_BCR1_MWID      | FSMC_BCR1_FACCEN   | FSMC_BCR1_BURSTEN  | \
                       FSMC_BCR1_WAITPOL   | FSMC_BCR1_WRAPMOD  | FSMC_BCR1_WAITCFG  | \
                       FSMC_BCR1_WREN      | FSMC_BCR1_WAITEN   | FSMC_BCR1_EXTMOD   | \
                       FSMC_BCR1_ASYNCWAIT | FSMC_BCR1_CPSIZE   | FSMC_BCR1_CBURSTRW));
  /* Set NORSRAM device control parameters */
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8007346:	683b      	ldr	r3, [r7, #0]
 8007348:	685a      	ldr	r2, [r3, #4]
                     Init->MemoryType           |\
 800734a:	683b      	ldr	r3, [r7, #0]
 800734c:	689b      	ldr	r3, [r3, #8]
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 800734e:	431a      	orrs	r2, r3
                     Init->MemoryDataWidth      |\
 8007350:	683b      	ldr	r3, [r7, #0]
 8007352:	68db      	ldr	r3, [r3, #12]
                     Init->MemoryType           |\
 8007354:	431a      	orrs	r2, r3
                     Init->BurstAccessMode      |\
 8007356:	683b      	ldr	r3, [r7, #0]
 8007358:	691b      	ldr	r3, [r3, #16]
                     Init->MemoryDataWidth      |\
 800735a:	431a      	orrs	r2, r3
                     Init->WaitSignalPolarity   |\
 800735c:	683b      	ldr	r3, [r7, #0]
 800735e:	695b      	ldr	r3, [r3, #20]
                     Init->BurstAccessMode      |\
 8007360:	431a      	orrs	r2, r3
                     Init->WrapMode             |\
 8007362:	683b      	ldr	r3, [r7, #0]
 8007364:	699b      	ldr	r3, [r3, #24]
                     Init->WaitSignalPolarity   |\
 8007366:	431a      	orrs	r2, r3
                     Init->WaitSignalActive     |\
 8007368:	683b      	ldr	r3, [r7, #0]
 800736a:	69db      	ldr	r3, [r3, #28]
                     Init->WrapMode             |\
 800736c:	431a      	orrs	r2, r3
                     Init->WriteOperation       |\
 800736e:	683b      	ldr	r3, [r7, #0]
 8007370:	6a1b      	ldr	r3, [r3, #32]
                     Init->WaitSignalActive     |\
 8007372:	431a      	orrs	r2, r3
                     Init->WaitSignal           |\
 8007374:	683b      	ldr	r3, [r7, #0]
 8007376:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                     Init->WriteOperation       |\
 8007378:	431a      	orrs	r2, r3
                     Init->ExtendedMode         |\
 800737a:	683b      	ldr	r3, [r7, #0]
 800737c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
                     Init->WaitSignal           |\
 800737e:	431a      	orrs	r2, r3
                     Init->AsynchronousWait     |\
 8007380:	683b      	ldr	r3, [r7, #0]
 8007382:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
                     Init->ExtendedMode         |\
 8007384:	431a      	orrs	r2, r3
                     Init->PageSize             |\
 8007386:	683b      	ldr	r3, [r7, #0]
 8007388:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
                     Init->AsynchronousWait     |\
 800738a:	431a      	orrs	r2, r3
                     Init->WriteBurst
 800738c:	683b      	ldr	r3, [r7, #0]
 800738e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
                     Init->PageSize             |\
 8007390:	4313      	orrs	r3, r2
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8007392:	68fa      	ldr	r2, [r7, #12]
 8007394:	4313      	orrs	r3, r2
 8007396:	60fb      	str	r3, [r7, #12]
                     Init->ContinuousClock      |\
                     Init->PageSize             |\
                     Init->WriteFifo);
#endif /* STM32F405xx || STM32F415xx || STM32F407xx || STM32F417xx */ 
            
  if(Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 8007398:	683b      	ldr	r3, [r7, #0]
 800739a:	689b      	ldr	r3, [r3, #8]
 800739c:	2b08      	cmp	r3, #8
 800739e:	d103      	bne.n	80073a8 <FSMC_NORSRAM_Init+0x84>
  {
    tmpr |= (uint32_t)FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80073a6:	60fb      	str	r3, [r7, #12]
  }

  Device->BTCR[Init->NSBank] = tmpr;
 80073a8:	683b      	ldr	r3, [r7, #0]
 80073aa:	681a      	ldr	r2, [r3, #0]
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	68f9      	ldr	r1, [r7, #12]
 80073b0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  {
    Device->BTCR[FSMC_NORSRAM_BANK1] |= (uint32_t)(Init->WriteFifo);
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 80073b4:	2300      	movs	r3, #0
}
 80073b6:	4618      	mov	r0, r3
 80073b8:	3714      	adds	r7, #20
 80073ba:	46bd      	mov	sp, r7
 80073bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c0:	4770      	bx	lr
 80073c2:	bf00      	nop
 80073c4:	fff00080 	.word	0xfff00080

080073c8 <FSMC_NORSRAM_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 80073c8:	b480      	push	{r7}
 80073ca:	b087      	sub	sp, #28
 80073cc:	af00      	add	r7, sp, #0
 80073ce:	60f8      	str	r0, [r7, #12]
 80073d0:	60b9      	str	r1, [r7, #8]
 80073d2:	607a      	str	r2, [r7, #4]
  uint32_t tmpr = 0U;
 80073d4:	2300      	movs	r3, #0
 80073d6:	617b      	str	r3, [r7, #20]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Bank + 1U];
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	1c5a      	adds	r2, r3, #1
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80073e2:	617b      	str	r3, [r7, #20]

  /* Clear ADDSET, ADDHLD, DATAST, BUSTURN, CLKDIV, DATLAT and ACCMOD bits */
  tmpr &= ((uint32_t)~(FSMC_BTR1_ADDSET  | FSMC_BTR1_ADDHLD | FSMC_BTR1_DATAST | \
 80073e4:	697b      	ldr	r3, [r7, #20]
 80073e6:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 80073ea:	617b      	str	r3, [r7, #20]
                       FSMC_BTR1_BUSTURN | FSMC_BTR1_CLKDIV | FSMC_BTR1_DATLAT | \
                       FSMC_BTR1_ACCMOD));
  
  /* Set FSMC_NORSRAM device timing parameters */  
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 80073ec:	68bb      	ldr	r3, [r7, #8]
 80073ee:	681a      	ldr	r2, [r3, #0]
                    ((Timing->AddressHoldTime) << 4U)          |\
 80073f0:	68bb      	ldr	r3, [r7, #8]
 80073f2:	685b      	ldr	r3, [r3, #4]
 80073f4:	011b      	lsls	r3, r3, #4
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 80073f6:	431a      	orrs	r2, r3
                    ((Timing->DataSetupTime) << 8U)            |\
 80073f8:	68bb      	ldr	r3, [r7, #8]
 80073fa:	689b      	ldr	r3, [r3, #8]
 80073fc:	021b      	lsls	r3, r3, #8
                    ((Timing->AddressHoldTime) << 4U)          |\
 80073fe:	431a      	orrs	r2, r3
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 8007400:	68bb      	ldr	r3, [r7, #8]
 8007402:	68db      	ldr	r3, [r3, #12]
 8007404:	041b      	lsls	r3, r3, #16
                    ((Timing->DataSetupTime) << 8U)            |\
 8007406:	431a      	orrs	r2, r3
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 8007408:	68bb      	ldr	r3, [r7, #8]
 800740a:	691b      	ldr	r3, [r3, #16]
 800740c:	3b01      	subs	r3, #1
 800740e:	051b      	lsls	r3, r3, #20
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 8007410:	431a      	orrs	r2, r3
                    (((Timing->DataLatency)-2U) << 24U)        |\
 8007412:	68bb      	ldr	r3, [r7, #8]
 8007414:	695b      	ldr	r3, [r3, #20]
 8007416:	3b02      	subs	r3, #2
 8007418:	061b      	lsls	r3, r3, #24
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 800741a:	431a      	orrs	r2, r3
                    (Timing->AccessMode));
 800741c:	68bb      	ldr	r3, [r7, #8]
 800741e:	699b      	ldr	r3, [r3, #24]
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8007420:	4313      	orrs	r3, r2
 8007422:	697a      	ldr	r2, [r7, #20]
 8007424:	4313      	orrs	r3, r2
 8007426:	617b      	str	r3, [r7, #20]
  
  Device->BTCR[Bank + 1] = tmpr; 
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	1c5a      	adds	r2, r3, #1
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	6979      	ldr	r1, [r7, #20]
 8007430:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    tmpr |= (uint32_t)(((Timing->CLKDivision)-1U) << 20U);
    Device->BTCR[FSMC_NORSRAM_BANK1 + 1U] = tmpr;
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 8007434:	2300      	movs	r3, #0
}
 8007436:	4618      	mov	r0, r3
 8007438:	371c      	adds	r7, #28
 800743a:	46bd      	mov	sp, r7
 800743c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007440:	4770      	bx	lr
	...

08007444 <FSMC_NORSRAM_Extended_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank, uint32_t ExtendedMode)
{
 8007444:	b480      	push	{r7}
 8007446:	b087      	sub	sp, #28
 8007448:	af00      	add	r7, sp, #0
 800744a:	60f8      	str	r0, [r7, #12]
 800744c:	60b9      	str	r1, [r7, #8]
 800744e:	607a      	str	r2, [r7, #4]
 8007450:	603b      	str	r3, [r7, #0]
  uint32_t tmpr = 0U;
 8007452:	2300      	movs	r3, #0
 8007454:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if(ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 8007456:	683b      	ldr	r3, [r7, #0]
 8007458:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800745c:	d122      	bne.n	80074a4 <FSMC_NORSRAM_Extended_Timing_Init+0x60>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
    /* Get the BWTR register value */
    tmpr = Device->BWTR[Bank];
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	687a      	ldr	r2, [r7, #4]
 8007462:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007466:	617b      	str	r3, [r7, #20]
    
    /* Clear ADDSET, ADDHLD, DATAST, BUSTURN and ACCMOD bits */
    tmpr &= ((uint32_t)~(FSMC_BWTR1_ADDSET  | FSMC_BWTR1_ADDHLD | FSMC_BWTR1_DATAST | \
 8007468:	697a      	ldr	r2, [r7, #20]
 800746a:	4b15      	ldr	r3, [pc, #84]	@ (80074c0 <FSMC_NORSRAM_Extended_Timing_Init+0x7c>)
 800746c:	4013      	ands	r3, r2
 800746e:	617b      	str	r3, [r7, #20]
                         FSMC_BWTR1_BUSTURN | FSMC_BWTR1_ACCMOD));

    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8007470:	68bb      	ldr	r3, [r7, #8]
 8007472:	681a      	ldr	r2, [r3, #0]
                      ((Timing->AddressHoldTime) << 4U)          |\
 8007474:	68bb      	ldr	r3, [r7, #8]
 8007476:	685b      	ldr	r3, [r3, #4]
 8007478:	011b      	lsls	r3, r3, #4
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800747a:	431a      	orrs	r2, r3
                      ((Timing->DataSetupTime) << 8U)            |\
 800747c:	68bb      	ldr	r3, [r7, #8]
 800747e:	689b      	ldr	r3, [r3, #8]
 8007480:	021b      	lsls	r3, r3, #8
                      ((Timing->AddressHoldTime) << 4U)          |\
 8007482:	431a      	orrs	r2, r3
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 8007484:	68bb      	ldr	r3, [r7, #8]
 8007486:	68db      	ldr	r3, [r3, #12]
 8007488:	041b      	lsls	r3, r3, #16
                      ((Timing->DataSetupTime) << 8U)            |\
 800748a:	431a      	orrs	r2, r3
                      (Timing->AccessMode));
 800748c:	68bb      	ldr	r3, [r7, #8]
 800748e:	699b      	ldr	r3, [r3, #24]
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 8007490:	4313      	orrs	r3, r2
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8007492:	697a      	ldr	r2, [r7, #20]
 8007494:	4313      	orrs	r3, r2
 8007496:	617b      	str	r3, [r7, #20]
    
    Device->BWTR[Bank] = tmpr;
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	687a      	ldr	r2, [r7, #4]
 800749c:	6979      	ldr	r1, [r7, #20]
 800749e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80074a2:	e005      	b.n	80074b0 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>
  }
  else                                        
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	687a      	ldr	r2, [r7, #4]
 80074a8:	f06f 4170 	mvn.w	r1, #4026531840	@ 0xf0000000
 80074ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }   
  
  return HAL_OK;  
 80074b0:	2300      	movs	r3, #0
}
 80074b2:	4618      	mov	r0, r3
 80074b4:	371c      	adds	r7, #28
 80074b6:	46bd      	mov	sp, r7
 80074b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074bc:	4770      	bx	lr
 80074be:	bf00      	nop
 80074c0:	cff00000 	.word	0xcff00000

080074c4 <siprintf>:
 80074c4:	b40e      	push	{r1, r2, r3}
 80074c6:	b500      	push	{lr}
 80074c8:	b09c      	sub	sp, #112	@ 0x70
 80074ca:	ab1d      	add	r3, sp, #116	@ 0x74
 80074cc:	9002      	str	r0, [sp, #8]
 80074ce:	9006      	str	r0, [sp, #24]
 80074d0:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80074d4:	4809      	ldr	r0, [pc, #36]	@ (80074fc <siprintf+0x38>)
 80074d6:	9107      	str	r1, [sp, #28]
 80074d8:	9104      	str	r1, [sp, #16]
 80074da:	4909      	ldr	r1, [pc, #36]	@ (8007500 <siprintf+0x3c>)
 80074dc:	f853 2b04 	ldr.w	r2, [r3], #4
 80074e0:	9105      	str	r1, [sp, #20]
 80074e2:	6800      	ldr	r0, [r0, #0]
 80074e4:	9301      	str	r3, [sp, #4]
 80074e6:	a902      	add	r1, sp, #8
 80074e8:	f000 f994 	bl	8007814 <_svfiprintf_r>
 80074ec:	9b02      	ldr	r3, [sp, #8]
 80074ee:	2200      	movs	r2, #0
 80074f0:	701a      	strb	r2, [r3, #0]
 80074f2:	b01c      	add	sp, #112	@ 0x70
 80074f4:	f85d eb04 	ldr.w	lr, [sp], #4
 80074f8:	b003      	add	sp, #12
 80074fa:	4770      	bx	lr
 80074fc:	20000014 	.word	0x20000014
 8007500:	ffff0208 	.word	0xffff0208

08007504 <memset>:
 8007504:	4402      	add	r2, r0
 8007506:	4603      	mov	r3, r0
 8007508:	4293      	cmp	r3, r2
 800750a:	d100      	bne.n	800750e <memset+0xa>
 800750c:	4770      	bx	lr
 800750e:	f803 1b01 	strb.w	r1, [r3], #1
 8007512:	e7f9      	b.n	8007508 <memset+0x4>

08007514 <__errno>:
 8007514:	4b01      	ldr	r3, [pc, #4]	@ (800751c <__errno+0x8>)
 8007516:	6818      	ldr	r0, [r3, #0]
 8007518:	4770      	bx	lr
 800751a:	bf00      	nop
 800751c:	20000014 	.word	0x20000014

08007520 <__libc_init_array>:
 8007520:	b570      	push	{r4, r5, r6, lr}
 8007522:	4d0d      	ldr	r5, [pc, #52]	@ (8007558 <__libc_init_array+0x38>)
 8007524:	4c0d      	ldr	r4, [pc, #52]	@ (800755c <__libc_init_array+0x3c>)
 8007526:	1b64      	subs	r4, r4, r5
 8007528:	10a4      	asrs	r4, r4, #2
 800752a:	2600      	movs	r6, #0
 800752c:	42a6      	cmp	r6, r4
 800752e:	d109      	bne.n	8007544 <__libc_init_array+0x24>
 8007530:	4d0b      	ldr	r5, [pc, #44]	@ (8007560 <__libc_init_array+0x40>)
 8007532:	4c0c      	ldr	r4, [pc, #48]	@ (8007564 <__libc_init_array+0x44>)
 8007534:	f000 fc66 	bl	8007e04 <_init>
 8007538:	1b64      	subs	r4, r4, r5
 800753a:	10a4      	asrs	r4, r4, #2
 800753c:	2600      	movs	r6, #0
 800753e:	42a6      	cmp	r6, r4
 8007540:	d105      	bne.n	800754e <__libc_init_array+0x2e>
 8007542:	bd70      	pop	{r4, r5, r6, pc}
 8007544:	f855 3b04 	ldr.w	r3, [r5], #4
 8007548:	4798      	blx	r3
 800754a:	3601      	adds	r6, #1
 800754c:	e7ee      	b.n	800752c <__libc_init_array+0xc>
 800754e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007552:	4798      	blx	r3
 8007554:	3601      	adds	r6, #1
 8007556:	e7f2      	b.n	800753e <__libc_init_array+0x1e>
 8007558:	0800ae34 	.word	0x0800ae34
 800755c:	0800ae34 	.word	0x0800ae34
 8007560:	0800ae34 	.word	0x0800ae34
 8007564:	0800ae38 	.word	0x0800ae38

08007568 <__retarget_lock_acquire_recursive>:
 8007568:	4770      	bx	lr

0800756a <__retarget_lock_release_recursive>:
 800756a:	4770      	bx	lr

0800756c <_free_r>:
 800756c:	b538      	push	{r3, r4, r5, lr}
 800756e:	4605      	mov	r5, r0
 8007570:	2900      	cmp	r1, #0
 8007572:	d041      	beq.n	80075f8 <_free_r+0x8c>
 8007574:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007578:	1f0c      	subs	r4, r1, #4
 800757a:	2b00      	cmp	r3, #0
 800757c:	bfb8      	it	lt
 800757e:	18e4      	addlt	r4, r4, r3
 8007580:	f000 f8e0 	bl	8007744 <__malloc_lock>
 8007584:	4a1d      	ldr	r2, [pc, #116]	@ (80075fc <_free_r+0x90>)
 8007586:	6813      	ldr	r3, [r2, #0]
 8007588:	b933      	cbnz	r3, 8007598 <_free_r+0x2c>
 800758a:	6063      	str	r3, [r4, #4]
 800758c:	6014      	str	r4, [r2, #0]
 800758e:	4628      	mov	r0, r5
 8007590:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007594:	f000 b8dc 	b.w	8007750 <__malloc_unlock>
 8007598:	42a3      	cmp	r3, r4
 800759a:	d908      	bls.n	80075ae <_free_r+0x42>
 800759c:	6820      	ldr	r0, [r4, #0]
 800759e:	1821      	adds	r1, r4, r0
 80075a0:	428b      	cmp	r3, r1
 80075a2:	bf01      	itttt	eq
 80075a4:	6819      	ldreq	r1, [r3, #0]
 80075a6:	685b      	ldreq	r3, [r3, #4]
 80075a8:	1809      	addeq	r1, r1, r0
 80075aa:	6021      	streq	r1, [r4, #0]
 80075ac:	e7ed      	b.n	800758a <_free_r+0x1e>
 80075ae:	461a      	mov	r2, r3
 80075b0:	685b      	ldr	r3, [r3, #4]
 80075b2:	b10b      	cbz	r3, 80075b8 <_free_r+0x4c>
 80075b4:	42a3      	cmp	r3, r4
 80075b6:	d9fa      	bls.n	80075ae <_free_r+0x42>
 80075b8:	6811      	ldr	r1, [r2, #0]
 80075ba:	1850      	adds	r0, r2, r1
 80075bc:	42a0      	cmp	r0, r4
 80075be:	d10b      	bne.n	80075d8 <_free_r+0x6c>
 80075c0:	6820      	ldr	r0, [r4, #0]
 80075c2:	4401      	add	r1, r0
 80075c4:	1850      	adds	r0, r2, r1
 80075c6:	4283      	cmp	r3, r0
 80075c8:	6011      	str	r1, [r2, #0]
 80075ca:	d1e0      	bne.n	800758e <_free_r+0x22>
 80075cc:	6818      	ldr	r0, [r3, #0]
 80075ce:	685b      	ldr	r3, [r3, #4]
 80075d0:	6053      	str	r3, [r2, #4]
 80075d2:	4408      	add	r0, r1
 80075d4:	6010      	str	r0, [r2, #0]
 80075d6:	e7da      	b.n	800758e <_free_r+0x22>
 80075d8:	d902      	bls.n	80075e0 <_free_r+0x74>
 80075da:	230c      	movs	r3, #12
 80075dc:	602b      	str	r3, [r5, #0]
 80075de:	e7d6      	b.n	800758e <_free_r+0x22>
 80075e0:	6820      	ldr	r0, [r4, #0]
 80075e2:	1821      	adds	r1, r4, r0
 80075e4:	428b      	cmp	r3, r1
 80075e6:	bf04      	itt	eq
 80075e8:	6819      	ldreq	r1, [r3, #0]
 80075ea:	685b      	ldreq	r3, [r3, #4]
 80075ec:	6063      	str	r3, [r4, #4]
 80075ee:	bf04      	itt	eq
 80075f0:	1809      	addeq	r1, r1, r0
 80075f2:	6021      	streq	r1, [r4, #0]
 80075f4:	6054      	str	r4, [r2, #4]
 80075f6:	e7ca      	b.n	800758e <_free_r+0x22>
 80075f8:	bd38      	pop	{r3, r4, r5, pc}
 80075fa:	bf00      	nop
 80075fc:	20000580 	.word	0x20000580

08007600 <sbrk_aligned>:
 8007600:	b570      	push	{r4, r5, r6, lr}
 8007602:	4e0f      	ldr	r6, [pc, #60]	@ (8007640 <sbrk_aligned+0x40>)
 8007604:	460c      	mov	r4, r1
 8007606:	6831      	ldr	r1, [r6, #0]
 8007608:	4605      	mov	r5, r0
 800760a:	b911      	cbnz	r1, 8007612 <sbrk_aligned+0x12>
 800760c:	f000 fba6 	bl	8007d5c <_sbrk_r>
 8007610:	6030      	str	r0, [r6, #0]
 8007612:	4621      	mov	r1, r4
 8007614:	4628      	mov	r0, r5
 8007616:	f000 fba1 	bl	8007d5c <_sbrk_r>
 800761a:	1c43      	adds	r3, r0, #1
 800761c:	d103      	bne.n	8007626 <sbrk_aligned+0x26>
 800761e:	f04f 34ff 	mov.w	r4, #4294967295
 8007622:	4620      	mov	r0, r4
 8007624:	bd70      	pop	{r4, r5, r6, pc}
 8007626:	1cc4      	adds	r4, r0, #3
 8007628:	f024 0403 	bic.w	r4, r4, #3
 800762c:	42a0      	cmp	r0, r4
 800762e:	d0f8      	beq.n	8007622 <sbrk_aligned+0x22>
 8007630:	1a21      	subs	r1, r4, r0
 8007632:	4628      	mov	r0, r5
 8007634:	f000 fb92 	bl	8007d5c <_sbrk_r>
 8007638:	3001      	adds	r0, #1
 800763a:	d1f2      	bne.n	8007622 <sbrk_aligned+0x22>
 800763c:	e7ef      	b.n	800761e <sbrk_aligned+0x1e>
 800763e:	bf00      	nop
 8007640:	2000057c 	.word	0x2000057c

08007644 <_malloc_r>:
 8007644:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007648:	1ccd      	adds	r5, r1, #3
 800764a:	f025 0503 	bic.w	r5, r5, #3
 800764e:	3508      	adds	r5, #8
 8007650:	2d0c      	cmp	r5, #12
 8007652:	bf38      	it	cc
 8007654:	250c      	movcc	r5, #12
 8007656:	2d00      	cmp	r5, #0
 8007658:	4606      	mov	r6, r0
 800765a:	db01      	blt.n	8007660 <_malloc_r+0x1c>
 800765c:	42a9      	cmp	r1, r5
 800765e:	d904      	bls.n	800766a <_malloc_r+0x26>
 8007660:	230c      	movs	r3, #12
 8007662:	6033      	str	r3, [r6, #0]
 8007664:	2000      	movs	r0, #0
 8007666:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800766a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007740 <_malloc_r+0xfc>
 800766e:	f000 f869 	bl	8007744 <__malloc_lock>
 8007672:	f8d8 3000 	ldr.w	r3, [r8]
 8007676:	461c      	mov	r4, r3
 8007678:	bb44      	cbnz	r4, 80076cc <_malloc_r+0x88>
 800767a:	4629      	mov	r1, r5
 800767c:	4630      	mov	r0, r6
 800767e:	f7ff ffbf 	bl	8007600 <sbrk_aligned>
 8007682:	1c43      	adds	r3, r0, #1
 8007684:	4604      	mov	r4, r0
 8007686:	d158      	bne.n	800773a <_malloc_r+0xf6>
 8007688:	f8d8 4000 	ldr.w	r4, [r8]
 800768c:	4627      	mov	r7, r4
 800768e:	2f00      	cmp	r7, #0
 8007690:	d143      	bne.n	800771a <_malloc_r+0xd6>
 8007692:	2c00      	cmp	r4, #0
 8007694:	d04b      	beq.n	800772e <_malloc_r+0xea>
 8007696:	6823      	ldr	r3, [r4, #0]
 8007698:	4639      	mov	r1, r7
 800769a:	4630      	mov	r0, r6
 800769c:	eb04 0903 	add.w	r9, r4, r3
 80076a0:	f000 fb5c 	bl	8007d5c <_sbrk_r>
 80076a4:	4581      	cmp	r9, r0
 80076a6:	d142      	bne.n	800772e <_malloc_r+0xea>
 80076a8:	6821      	ldr	r1, [r4, #0]
 80076aa:	1a6d      	subs	r5, r5, r1
 80076ac:	4629      	mov	r1, r5
 80076ae:	4630      	mov	r0, r6
 80076b0:	f7ff ffa6 	bl	8007600 <sbrk_aligned>
 80076b4:	3001      	adds	r0, #1
 80076b6:	d03a      	beq.n	800772e <_malloc_r+0xea>
 80076b8:	6823      	ldr	r3, [r4, #0]
 80076ba:	442b      	add	r3, r5
 80076bc:	6023      	str	r3, [r4, #0]
 80076be:	f8d8 3000 	ldr.w	r3, [r8]
 80076c2:	685a      	ldr	r2, [r3, #4]
 80076c4:	bb62      	cbnz	r2, 8007720 <_malloc_r+0xdc>
 80076c6:	f8c8 7000 	str.w	r7, [r8]
 80076ca:	e00f      	b.n	80076ec <_malloc_r+0xa8>
 80076cc:	6822      	ldr	r2, [r4, #0]
 80076ce:	1b52      	subs	r2, r2, r5
 80076d0:	d420      	bmi.n	8007714 <_malloc_r+0xd0>
 80076d2:	2a0b      	cmp	r2, #11
 80076d4:	d917      	bls.n	8007706 <_malloc_r+0xc2>
 80076d6:	1961      	adds	r1, r4, r5
 80076d8:	42a3      	cmp	r3, r4
 80076da:	6025      	str	r5, [r4, #0]
 80076dc:	bf18      	it	ne
 80076de:	6059      	strne	r1, [r3, #4]
 80076e0:	6863      	ldr	r3, [r4, #4]
 80076e2:	bf08      	it	eq
 80076e4:	f8c8 1000 	streq.w	r1, [r8]
 80076e8:	5162      	str	r2, [r4, r5]
 80076ea:	604b      	str	r3, [r1, #4]
 80076ec:	4630      	mov	r0, r6
 80076ee:	f000 f82f 	bl	8007750 <__malloc_unlock>
 80076f2:	f104 000b 	add.w	r0, r4, #11
 80076f6:	1d23      	adds	r3, r4, #4
 80076f8:	f020 0007 	bic.w	r0, r0, #7
 80076fc:	1ac2      	subs	r2, r0, r3
 80076fe:	bf1c      	itt	ne
 8007700:	1a1b      	subne	r3, r3, r0
 8007702:	50a3      	strne	r3, [r4, r2]
 8007704:	e7af      	b.n	8007666 <_malloc_r+0x22>
 8007706:	6862      	ldr	r2, [r4, #4]
 8007708:	42a3      	cmp	r3, r4
 800770a:	bf0c      	ite	eq
 800770c:	f8c8 2000 	streq.w	r2, [r8]
 8007710:	605a      	strne	r2, [r3, #4]
 8007712:	e7eb      	b.n	80076ec <_malloc_r+0xa8>
 8007714:	4623      	mov	r3, r4
 8007716:	6864      	ldr	r4, [r4, #4]
 8007718:	e7ae      	b.n	8007678 <_malloc_r+0x34>
 800771a:	463c      	mov	r4, r7
 800771c:	687f      	ldr	r7, [r7, #4]
 800771e:	e7b6      	b.n	800768e <_malloc_r+0x4a>
 8007720:	461a      	mov	r2, r3
 8007722:	685b      	ldr	r3, [r3, #4]
 8007724:	42a3      	cmp	r3, r4
 8007726:	d1fb      	bne.n	8007720 <_malloc_r+0xdc>
 8007728:	2300      	movs	r3, #0
 800772a:	6053      	str	r3, [r2, #4]
 800772c:	e7de      	b.n	80076ec <_malloc_r+0xa8>
 800772e:	230c      	movs	r3, #12
 8007730:	6033      	str	r3, [r6, #0]
 8007732:	4630      	mov	r0, r6
 8007734:	f000 f80c 	bl	8007750 <__malloc_unlock>
 8007738:	e794      	b.n	8007664 <_malloc_r+0x20>
 800773a:	6005      	str	r5, [r0, #0]
 800773c:	e7d6      	b.n	80076ec <_malloc_r+0xa8>
 800773e:	bf00      	nop
 8007740:	20000580 	.word	0x20000580

08007744 <__malloc_lock>:
 8007744:	4801      	ldr	r0, [pc, #4]	@ (800774c <__malloc_lock+0x8>)
 8007746:	f7ff bf0f 	b.w	8007568 <__retarget_lock_acquire_recursive>
 800774a:	bf00      	nop
 800774c:	20000578 	.word	0x20000578

08007750 <__malloc_unlock>:
 8007750:	4801      	ldr	r0, [pc, #4]	@ (8007758 <__malloc_unlock+0x8>)
 8007752:	f7ff bf0a 	b.w	800756a <__retarget_lock_release_recursive>
 8007756:	bf00      	nop
 8007758:	20000578 	.word	0x20000578

0800775c <__ssputs_r>:
 800775c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007760:	688e      	ldr	r6, [r1, #8]
 8007762:	461f      	mov	r7, r3
 8007764:	42be      	cmp	r6, r7
 8007766:	680b      	ldr	r3, [r1, #0]
 8007768:	4682      	mov	sl, r0
 800776a:	460c      	mov	r4, r1
 800776c:	4690      	mov	r8, r2
 800776e:	d82d      	bhi.n	80077cc <__ssputs_r+0x70>
 8007770:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007774:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8007778:	d026      	beq.n	80077c8 <__ssputs_r+0x6c>
 800777a:	6965      	ldr	r5, [r4, #20]
 800777c:	6909      	ldr	r1, [r1, #16]
 800777e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007782:	eba3 0901 	sub.w	r9, r3, r1
 8007786:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800778a:	1c7b      	adds	r3, r7, #1
 800778c:	444b      	add	r3, r9
 800778e:	106d      	asrs	r5, r5, #1
 8007790:	429d      	cmp	r5, r3
 8007792:	bf38      	it	cc
 8007794:	461d      	movcc	r5, r3
 8007796:	0553      	lsls	r3, r2, #21
 8007798:	d527      	bpl.n	80077ea <__ssputs_r+0x8e>
 800779a:	4629      	mov	r1, r5
 800779c:	f7ff ff52 	bl	8007644 <_malloc_r>
 80077a0:	4606      	mov	r6, r0
 80077a2:	b360      	cbz	r0, 80077fe <__ssputs_r+0xa2>
 80077a4:	6921      	ldr	r1, [r4, #16]
 80077a6:	464a      	mov	r2, r9
 80077a8:	f000 fae8 	bl	8007d7c <memcpy>
 80077ac:	89a3      	ldrh	r3, [r4, #12]
 80077ae:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80077b2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80077b6:	81a3      	strh	r3, [r4, #12]
 80077b8:	6126      	str	r6, [r4, #16]
 80077ba:	6165      	str	r5, [r4, #20]
 80077bc:	444e      	add	r6, r9
 80077be:	eba5 0509 	sub.w	r5, r5, r9
 80077c2:	6026      	str	r6, [r4, #0]
 80077c4:	60a5      	str	r5, [r4, #8]
 80077c6:	463e      	mov	r6, r7
 80077c8:	42be      	cmp	r6, r7
 80077ca:	d900      	bls.n	80077ce <__ssputs_r+0x72>
 80077cc:	463e      	mov	r6, r7
 80077ce:	6820      	ldr	r0, [r4, #0]
 80077d0:	4632      	mov	r2, r6
 80077d2:	4641      	mov	r1, r8
 80077d4:	f000 faa8 	bl	8007d28 <memmove>
 80077d8:	68a3      	ldr	r3, [r4, #8]
 80077da:	1b9b      	subs	r3, r3, r6
 80077dc:	60a3      	str	r3, [r4, #8]
 80077de:	6823      	ldr	r3, [r4, #0]
 80077e0:	4433      	add	r3, r6
 80077e2:	6023      	str	r3, [r4, #0]
 80077e4:	2000      	movs	r0, #0
 80077e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80077ea:	462a      	mov	r2, r5
 80077ec:	f000 fad4 	bl	8007d98 <_realloc_r>
 80077f0:	4606      	mov	r6, r0
 80077f2:	2800      	cmp	r0, #0
 80077f4:	d1e0      	bne.n	80077b8 <__ssputs_r+0x5c>
 80077f6:	6921      	ldr	r1, [r4, #16]
 80077f8:	4650      	mov	r0, sl
 80077fa:	f7ff feb7 	bl	800756c <_free_r>
 80077fe:	230c      	movs	r3, #12
 8007800:	f8ca 3000 	str.w	r3, [sl]
 8007804:	89a3      	ldrh	r3, [r4, #12]
 8007806:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800780a:	81a3      	strh	r3, [r4, #12]
 800780c:	f04f 30ff 	mov.w	r0, #4294967295
 8007810:	e7e9      	b.n	80077e6 <__ssputs_r+0x8a>
	...

08007814 <_svfiprintf_r>:
 8007814:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007818:	4698      	mov	r8, r3
 800781a:	898b      	ldrh	r3, [r1, #12]
 800781c:	061b      	lsls	r3, r3, #24
 800781e:	b09d      	sub	sp, #116	@ 0x74
 8007820:	4607      	mov	r7, r0
 8007822:	460d      	mov	r5, r1
 8007824:	4614      	mov	r4, r2
 8007826:	d510      	bpl.n	800784a <_svfiprintf_r+0x36>
 8007828:	690b      	ldr	r3, [r1, #16]
 800782a:	b973      	cbnz	r3, 800784a <_svfiprintf_r+0x36>
 800782c:	2140      	movs	r1, #64	@ 0x40
 800782e:	f7ff ff09 	bl	8007644 <_malloc_r>
 8007832:	6028      	str	r0, [r5, #0]
 8007834:	6128      	str	r0, [r5, #16]
 8007836:	b930      	cbnz	r0, 8007846 <_svfiprintf_r+0x32>
 8007838:	230c      	movs	r3, #12
 800783a:	603b      	str	r3, [r7, #0]
 800783c:	f04f 30ff 	mov.w	r0, #4294967295
 8007840:	b01d      	add	sp, #116	@ 0x74
 8007842:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007846:	2340      	movs	r3, #64	@ 0x40
 8007848:	616b      	str	r3, [r5, #20]
 800784a:	2300      	movs	r3, #0
 800784c:	9309      	str	r3, [sp, #36]	@ 0x24
 800784e:	2320      	movs	r3, #32
 8007850:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007854:	f8cd 800c 	str.w	r8, [sp, #12]
 8007858:	2330      	movs	r3, #48	@ 0x30
 800785a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80079f8 <_svfiprintf_r+0x1e4>
 800785e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007862:	f04f 0901 	mov.w	r9, #1
 8007866:	4623      	mov	r3, r4
 8007868:	469a      	mov	sl, r3
 800786a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800786e:	b10a      	cbz	r2, 8007874 <_svfiprintf_r+0x60>
 8007870:	2a25      	cmp	r2, #37	@ 0x25
 8007872:	d1f9      	bne.n	8007868 <_svfiprintf_r+0x54>
 8007874:	ebba 0b04 	subs.w	fp, sl, r4
 8007878:	d00b      	beq.n	8007892 <_svfiprintf_r+0x7e>
 800787a:	465b      	mov	r3, fp
 800787c:	4622      	mov	r2, r4
 800787e:	4629      	mov	r1, r5
 8007880:	4638      	mov	r0, r7
 8007882:	f7ff ff6b 	bl	800775c <__ssputs_r>
 8007886:	3001      	adds	r0, #1
 8007888:	f000 80a7 	beq.w	80079da <_svfiprintf_r+0x1c6>
 800788c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800788e:	445a      	add	r2, fp
 8007890:	9209      	str	r2, [sp, #36]	@ 0x24
 8007892:	f89a 3000 	ldrb.w	r3, [sl]
 8007896:	2b00      	cmp	r3, #0
 8007898:	f000 809f 	beq.w	80079da <_svfiprintf_r+0x1c6>
 800789c:	2300      	movs	r3, #0
 800789e:	f04f 32ff 	mov.w	r2, #4294967295
 80078a2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80078a6:	f10a 0a01 	add.w	sl, sl, #1
 80078aa:	9304      	str	r3, [sp, #16]
 80078ac:	9307      	str	r3, [sp, #28]
 80078ae:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80078b2:	931a      	str	r3, [sp, #104]	@ 0x68
 80078b4:	4654      	mov	r4, sl
 80078b6:	2205      	movs	r2, #5
 80078b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80078bc:	484e      	ldr	r0, [pc, #312]	@ (80079f8 <_svfiprintf_r+0x1e4>)
 80078be:	f7f8 fc87 	bl	80001d0 <memchr>
 80078c2:	9a04      	ldr	r2, [sp, #16]
 80078c4:	b9d8      	cbnz	r0, 80078fe <_svfiprintf_r+0xea>
 80078c6:	06d0      	lsls	r0, r2, #27
 80078c8:	bf44      	itt	mi
 80078ca:	2320      	movmi	r3, #32
 80078cc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80078d0:	0711      	lsls	r1, r2, #28
 80078d2:	bf44      	itt	mi
 80078d4:	232b      	movmi	r3, #43	@ 0x2b
 80078d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80078da:	f89a 3000 	ldrb.w	r3, [sl]
 80078de:	2b2a      	cmp	r3, #42	@ 0x2a
 80078e0:	d015      	beq.n	800790e <_svfiprintf_r+0xfa>
 80078e2:	9a07      	ldr	r2, [sp, #28]
 80078e4:	4654      	mov	r4, sl
 80078e6:	2000      	movs	r0, #0
 80078e8:	f04f 0c0a 	mov.w	ip, #10
 80078ec:	4621      	mov	r1, r4
 80078ee:	f811 3b01 	ldrb.w	r3, [r1], #1
 80078f2:	3b30      	subs	r3, #48	@ 0x30
 80078f4:	2b09      	cmp	r3, #9
 80078f6:	d94b      	bls.n	8007990 <_svfiprintf_r+0x17c>
 80078f8:	b1b0      	cbz	r0, 8007928 <_svfiprintf_r+0x114>
 80078fa:	9207      	str	r2, [sp, #28]
 80078fc:	e014      	b.n	8007928 <_svfiprintf_r+0x114>
 80078fe:	eba0 0308 	sub.w	r3, r0, r8
 8007902:	fa09 f303 	lsl.w	r3, r9, r3
 8007906:	4313      	orrs	r3, r2
 8007908:	9304      	str	r3, [sp, #16]
 800790a:	46a2      	mov	sl, r4
 800790c:	e7d2      	b.n	80078b4 <_svfiprintf_r+0xa0>
 800790e:	9b03      	ldr	r3, [sp, #12]
 8007910:	1d19      	adds	r1, r3, #4
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	9103      	str	r1, [sp, #12]
 8007916:	2b00      	cmp	r3, #0
 8007918:	bfbb      	ittet	lt
 800791a:	425b      	neglt	r3, r3
 800791c:	f042 0202 	orrlt.w	r2, r2, #2
 8007920:	9307      	strge	r3, [sp, #28]
 8007922:	9307      	strlt	r3, [sp, #28]
 8007924:	bfb8      	it	lt
 8007926:	9204      	strlt	r2, [sp, #16]
 8007928:	7823      	ldrb	r3, [r4, #0]
 800792a:	2b2e      	cmp	r3, #46	@ 0x2e
 800792c:	d10a      	bne.n	8007944 <_svfiprintf_r+0x130>
 800792e:	7863      	ldrb	r3, [r4, #1]
 8007930:	2b2a      	cmp	r3, #42	@ 0x2a
 8007932:	d132      	bne.n	800799a <_svfiprintf_r+0x186>
 8007934:	9b03      	ldr	r3, [sp, #12]
 8007936:	1d1a      	adds	r2, r3, #4
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	9203      	str	r2, [sp, #12]
 800793c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007940:	3402      	adds	r4, #2
 8007942:	9305      	str	r3, [sp, #20]
 8007944:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8007a08 <_svfiprintf_r+0x1f4>
 8007948:	7821      	ldrb	r1, [r4, #0]
 800794a:	2203      	movs	r2, #3
 800794c:	4650      	mov	r0, sl
 800794e:	f7f8 fc3f 	bl	80001d0 <memchr>
 8007952:	b138      	cbz	r0, 8007964 <_svfiprintf_r+0x150>
 8007954:	9b04      	ldr	r3, [sp, #16]
 8007956:	eba0 000a 	sub.w	r0, r0, sl
 800795a:	2240      	movs	r2, #64	@ 0x40
 800795c:	4082      	lsls	r2, r0
 800795e:	4313      	orrs	r3, r2
 8007960:	3401      	adds	r4, #1
 8007962:	9304      	str	r3, [sp, #16]
 8007964:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007968:	4824      	ldr	r0, [pc, #144]	@ (80079fc <_svfiprintf_r+0x1e8>)
 800796a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800796e:	2206      	movs	r2, #6
 8007970:	f7f8 fc2e 	bl	80001d0 <memchr>
 8007974:	2800      	cmp	r0, #0
 8007976:	d036      	beq.n	80079e6 <_svfiprintf_r+0x1d2>
 8007978:	4b21      	ldr	r3, [pc, #132]	@ (8007a00 <_svfiprintf_r+0x1ec>)
 800797a:	bb1b      	cbnz	r3, 80079c4 <_svfiprintf_r+0x1b0>
 800797c:	9b03      	ldr	r3, [sp, #12]
 800797e:	3307      	adds	r3, #7
 8007980:	f023 0307 	bic.w	r3, r3, #7
 8007984:	3308      	adds	r3, #8
 8007986:	9303      	str	r3, [sp, #12]
 8007988:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800798a:	4433      	add	r3, r6
 800798c:	9309      	str	r3, [sp, #36]	@ 0x24
 800798e:	e76a      	b.n	8007866 <_svfiprintf_r+0x52>
 8007990:	fb0c 3202 	mla	r2, ip, r2, r3
 8007994:	460c      	mov	r4, r1
 8007996:	2001      	movs	r0, #1
 8007998:	e7a8      	b.n	80078ec <_svfiprintf_r+0xd8>
 800799a:	2300      	movs	r3, #0
 800799c:	3401      	adds	r4, #1
 800799e:	9305      	str	r3, [sp, #20]
 80079a0:	4619      	mov	r1, r3
 80079a2:	f04f 0c0a 	mov.w	ip, #10
 80079a6:	4620      	mov	r0, r4
 80079a8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80079ac:	3a30      	subs	r2, #48	@ 0x30
 80079ae:	2a09      	cmp	r2, #9
 80079b0:	d903      	bls.n	80079ba <_svfiprintf_r+0x1a6>
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d0c6      	beq.n	8007944 <_svfiprintf_r+0x130>
 80079b6:	9105      	str	r1, [sp, #20]
 80079b8:	e7c4      	b.n	8007944 <_svfiprintf_r+0x130>
 80079ba:	fb0c 2101 	mla	r1, ip, r1, r2
 80079be:	4604      	mov	r4, r0
 80079c0:	2301      	movs	r3, #1
 80079c2:	e7f0      	b.n	80079a6 <_svfiprintf_r+0x192>
 80079c4:	ab03      	add	r3, sp, #12
 80079c6:	9300      	str	r3, [sp, #0]
 80079c8:	462a      	mov	r2, r5
 80079ca:	4b0e      	ldr	r3, [pc, #56]	@ (8007a04 <_svfiprintf_r+0x1f0>)
 80079cc:	a904      	add	r1, sp, #16
 80079ce:	4638      	mov	r0, r7
 80079d0:	f3af 8000 	nop.w
 80079d4:	1c42      	adds	r2, r0, #1
 80079d6:	4606      	mov	r6, r0
 80079d8:	d1d6      	bne.n	8007988 <_svfiprintf_r+0x174>
 80079da:	89ab      	ldrh	r3, [r5, #12]
 80079dc:	065b      	lsls	r3, r3, #25
 80079de:	f53f af2d 	bmi.w	800783c <_svfiprintf_r+0x28>
 80079e2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80079e4:	e72c      	b.n	8007840 <_svfiprintf_r+0x2c>
 80079e6:	ab03      	add	r3, sp, #12
 80079e8:	9300      	str	r3, [sp, #0]
 80079ea:	462a      	mov	r2, r5
 80079ec:	4b05      	ldr	r3, [pc, #20]	@ (8007a04 <_svfiprintf_r+0x1f0>)
 80079ee:	a904      	add	r1, sp, #16
 80079f0:	4638      	mov	r0, r7
 80079f2:	f000 f879 	bl	8007ae8 <_printf_i>
 80079f6:	e7ed      	b.n	80079d4 <_svfiprintf_r+0x1c0>
 80079f8:	0800adf8 	.word	0x0800adf8
 80079fc:	0800ae02 	.word	0x0800ae02
 8007a00:	00000000 	.word	0x00000000
 8007a04:	0800775d 	.word	0x0800775d
 8007a08:	0800adfe 	.word	0x0800adfe

08007a0c <_printf_common>:
 8007a0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007a10:	4616      	mov	r6, r2
 8007a12:	4698      	mov	r8, r3
 8007a14:	688a      	ldr	r2, [r1, #8]
 8007a16:	690b      	ldr	r3, [r1, #16]
 8007a18:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007a1c:	4293      	cmp	r3, r2
 8007a1e:	bfb8      	it	lt
 8007a20:	4613      	movlt	r3, r2
 8007a22:	6033      	str	r3, [r6, #0]
 8007a24:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007a28:	4607      	mov	r7, r0
 8007a2a:	460c      	mov	r4, r1
 8007a2c:	b10a      	cbz	r2, 8007a32 <_printf_common+0x26>
 8007a2e:	3301      	adds	r3, #1
 8007a30:	6033      	str	r3, [r6, #0]
 8007a32:	6823      	ldr	r3, [r4, #0]
 8007a34:	0699      	lsls	r1, r3, #26
 8007a36:	bf42      	ittt	mi
 8007a38:	6833      	ldrmi	r3, [r6, #0]
 8007a3a:	3302      	addmi	r3, #2
 8007a3c:	6033      	strmi	r3, [r6, #0]
 8007a3e:	6825      	ldr	r5, [r4, #0]
 8007a40:	f015 0506 	ands.w	r5, r5, #6
 8007a44:	d106      	bne.n	8007a54 <_printf_common+0x48>
 8007a46:	f104 0a19 	add.w	sl, r4, #25
 8007a4a:	68e3      	ldr	r3, [r4, #12]
 8007a4c:	6832      	ldr	r2, [r6, #0]
 8007a4e:	1a9b      	subs	r3, r3, r2
 8007a50:	42ab      	cmp	r3, r5
 8007a52:	dc26      	bgt.n	8007aa2 <_printf_common+0x96>
 8007a54:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007a58:	6822      	ldr	r2, [r4, #0]
 8007a5a:	3b00      	subs	r3, #0
 8007a5c:	bf18      	it	ne
 8007a5e:	2301      	movne	r3, #1
 8007a60:	0692      	lsls	r2, r2, #26
 8007a62:	d42b      	bmi.n	8007abc <_printf_common+0xb0>
 8007a64:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007a68:	4641      	mov	r1, r8
 8007a6a:	4638      	mov	r0, r7
 8007a6c:	47c8      	blx	r9
 8007a6e:	3001      	adds	r0, #1
 8007a70:	d01e      	beq.n	8007ab0 <_printf_common+0xa4>
 8007a72:	6823      	ldr	r3, [r4, #0]
 8007a74:	6922      	ldr	r2, [r4, #16]
 8007a76:	f003 0306 	and.w	r3, r3, #6
 8007a7a:	2b04      	cmp	r3, #4
 8007a7c:	bf02      	ittt	eq
 8007a7e:	68e5      	ldreq	r5, [r4, #12]
 8007a80:	6833      	ldreq	r3, [r6, #0]
 8007a82:	1aed      	subeq	r5, r5, r3
 8007a84:	68a3      	ldr	r3, [r4, #8]
 8007a86:	bf0c      	ite	eq
 8007a88:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007a8c:	2500      	movne	r5, #0
 8007a8e:	4293      	cmp	r3, r2
 8007a90:	bfc4      	itt	gt
 8007a92:	1a9b      	subgt	r3, r3, r2
 8007a94:	18ed      	addgt	r5, r5, r3
 8007a96:	2600      	movs	r6, #0
 8007a98:	341a      	adds	r4, #26
 8007a9a:	42b5      	cmp	r5, r6
 8007a9c:	d11a      	bne.n	8007ad4 <_printf_common+0xc8>
 8007a9e:	2000      	movs	r0, #0
 8007aa0:	e008      	b.n	8007ab4 <_printf_common+0xa8>
 8007aa2:	2301      	movs	r3, #1
 8007aa4:	4652      	mov	r2, sl
 8007aa6:	4641      	mov	r1, r8
 8007aa8:	4638      	mov	r0, r7
 8007aaa:	47c8      	blx	r9
 8007aac:	3001      	adds	r0, #1
 8007aae:	d103      	bne.n	8007ab8 <_printf_common+0xac>
 8007ab0:	f04f 30ff 	mov.w	r0, #4294967295
 8007ab4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007ab8:	3501      	adds	r5, #1
 8007aba:	e7c6      	b.n	8007a4a <_printf_common+0x3e>
 8007abc:	18e1      	adds	r1, r4, r3
 8007abe:	1c5a      	adds	r2, r3, #1
 8007ac0:	2030      	movs	r0, #48	@ 0x30
 8007ac2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007ac6:	4422      	add	r2, r4
 8007ac8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007acc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007ad0:	3302      	adds	r3, #2
 8007ad2:	e7c7      	b.n	8007a64 <_printf_common+0x58>
 8007ad4:	2301      	movs	r3, #1
 8007ad6:	4622      	mov	r2, r4
 8007ad8:	4641      	mov	r1, r8
 8007ada:	4638      	mov	r0, r7
 8007adc:	47c8      	blx	r9
 8007ade:	3001      	adds	r0, #1
 8007ae0:	d0e6      	beq.n	8007ab0 <_printf_common+0xa4>
 8007ae2:	3601      	adds	r6, #1
 8007ae4:	e7d9      	b.n	8007a9a <_printf_common+0x8e>
	...

08007ae8 <_printf_i>:
 8007ae8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007aec:	7e0f      	ldrb	r7, [r1, #24]
 8007aee:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007af0:	2f78      	cmp	r7, #120	@ 0x78
 8007af2:	4691      	mov	r9, r2
 8007af4:	4680      	mov	r8, r0
 8007af6:	460c      	mov	r4, r1
 8007af8:	469a      	mov	sl, r3
 8007afa:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007afe:	d807      	bhi.n	8007b10 <_printf_i+0x28>
 8007b00:	2f62      	cmp	r7, #98	@ 0x62
 8007b02:	d80a      	bhi.n	8007b1a <_printf_i+0x32>
 8007b04:	2f00      	cmp	r7, #0
 8007b06:	f000 80d2 	beq.w	8007cae <_printf_i+0x1c6>
 8007b0a:	2f58      	cmp	r7, #88	@ 0x58
 8007b0c:	f000 80b9 	beq.w	8007c82 <_printf_i+0x19a>
 8007b10:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007b14:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007b18:	e03a      	b.n	8007b90 <_printf_i+0xa8>
 8007b1a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007b1e:	2b15      	cmp	r3, #21
 8007b20:	d8f6      	bhi.n	8007b10 <_printf_i+0x28>
 8007b22:	a101      	add	r1, pc, #4	@ (adr r1, 8007b28 <_printf_i+0x40>)
 8007b24:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007b28:	08007b81 	.word	0x08007b81
 8007b2c:	08007b95 	.word	0x08007b95
 8007b30:	08007b11 	.word	0x08007b11
 8007b34:	08007b11 	.word	0x08007b11
 8007b38:	08007b11 	.word	0x08007b11
 8007b3c:	08007b11 	.word	0x08007b11
 8007b40:	08007b95 	.word	0x08007b95
 8007b44:	08007b11 	.word	0x08007b11
 8007b48:	08007b11 	.word	0x08007b11
 8007b4c:	08007b11 	.word	0x08007b11
 8007b50:	08007b11 	.word	0x08007b11
 8007b54:	08007c95 	.word	0x08007c95
 8007b58:	08007bbf 	.word	0x08007bbf
 8007b5c:	08007c4f 	.word	0x08007c4f
 8007b60:	08007b11 	.word	0x08007b11
 8007b64:	08007b11 	.word	0x08007b11
 8007b68:	08007cb7 	.word	0x08007cb7
 8007b6c:	08007b11 	.word	0x08007b11
 8007b70:	08007bbf 	.word	0x08007bbf
 8007b74:	08007b11 	.word	0x08007b11
 8007b78:	08007b11 	.word	0x08007b11
 8007b7c:	08007c57 	.word	0x08007c57
 8007b80:	6833      	ldr	r3, [r6, #0]
 8007b82:	1d1a      	adds	r2, r3, #4
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	6032      	str	r2, [r6, #0]
 8007b88:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007b8c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007b90:	2301      	movs	r3, #1
 8007b92:	e09d      	b.n	8007cd0 <_printf_i+0x1e8>
 8007b94:	6833      	ldr	r3, [r6, #0]
 8007b96:	6820      	ldr	r0, [r4, #0]
 8007b98:	1d19      	adds	r1, r3, #4
 8007b9a:	6031      	str	r1, [r6, #0]
 8007b9c:	0606      	lsls	r6, r0, #24
 8007b9e:	d501      	bpl.n	8007ba4 <_printf_i+0xbc>
 8007ba0:	681d      	ldr	r5, [r3, #0]
 8007ba2:	e003      	b.n	8007bac <_printf_i+0xc4>
 8007ba4:	0645      	lsls	r5, r0, #25
 8007ba6:	d5fb      	bpl.n	8007ba0 <_printf_i+0xb8>
 8007ba8:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007bac:	2d00      	cmp	r5, #0
 8007bae:	da03      	bge.n	8007bb8 <_printf_i+0xd0>
 8007bb0:	232d      	movs	r3, #45	@ 0x2d
 8007bb2:	426d      	negs	r5, r5
 8007bb4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007bb8:	4859      	ldr	r0, [pc, #356]	@ (8007d20 <_printf_i+0x238>)
 8007bba:	230a      	movs	r3, #10
 8007bbc:	e011      	b.n	8007be2 <_printf_i+0xfa>
 8007bbe:	6821      	ldr	r1, [r4, #0]
 8007bc0:	6833      	ldr	r3, [r6, #0]
 8007bc2:	0608      	lsls	r0, r1, #24
 8007bc4:	f853 5b04 	ldr.w	r5, [r3], #4
 8007bc8:	d402      	bmi.n	8007bd0 <_printf_i+0xe8>
 8007bca:	0649      	lsls	r1, r1, #25
 8007bcc:	bf48      	it	mi
 8007bce:	b2ad      	uxthmi	r5, r5
 8007bd0:	2f6f      	cmp	r7, #111	@ 0x6f
 8007bd2:	4853      	ldr	r0, [pc, #332]	@ (8007d20 <_printf_i+0x238>)
 8007bd4:	6033      	str	r3, [r6, #0]
 8007bd6:	bf14      	ite	ne
 8007bd8:	230a      	movne	r3, #10
 8007bda:	2308      	moveq	r3, #8
 8007bdc:	2100      	movs	r1, #0
 8007bde:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007be2:	6866      	ldr	r6, [r4, #4]
 8007be4:	60a6      	str	r6, [r4, #8]
 8007be6:	2e00      	cmp	r6, #0
 8007be8:	bfa2      	ittt	ge
 8007bea:	6821      	ldrge	r1, [r4, #0]
 8007bec:	f021 0104 	bicge.w	r1, r1, #4
 8007bf0:	6021      	strge	r1, [r4, #0]
 8007bf2:	b90d      	cbnz	r5, 8007bf8 <_printf_i+0x110>
 8007bf4:	2e00      	cmp	r6, #0
 8007bf6:	d04b      	beq.n	8007c90 <_printf_i+0x1a8>
 8007bf8:	4616      	mov	r6, r2
 8007bfa:	fbb5 f1f3 	udiv	r1, r5, r3
 8007bfe:	fb03 5711 	mls	r7, r3, r1, r5
 8007c02:	5dc7      	ldrb	r7, [r0, r7]
 8007c04:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007c08:	462f      	mov	r7, r5
 8007c0a:	42bb      	cmp	r3, r7
 8007c0c:	460d      	mov	r5, r1
 8007c0e:	d9f4      	bls.n	8007bfa <_printf_i+0x112>
 8007c10:	2b08      	cmp	r3, #8
 8007c12:	d10b      	bne.n	8007c2c <_printf_i+0x144>
 8007c14:	6823      	ldr	r3, [r4, #0]
 8007c16:	07df      	lsls	r7, r3, #31
 8007c18:	d508      	bpl.n	8007c2c <_printf_i+0x144>
 8007c1a:	6923      	ldr	r3, [r4, #16]
 8007c1c:	6861      	ldr	r1, [r4, #4]
 8007c1e:	4299      	cmp	r1, r3
 8007c20:	bfde      	ittt	le
 8007c22:	2330      	movle	r3, #48	@ 0x30
 8007c24:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007c28:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007c2c:	1b92      	subs	r2, r2, r6
 8007c2e:	6122      	str	r2, [r4, #16]
 8007c30:	f8cd a000 	str.w	sl, [sp]
 8007c34:	464b      	mov	r3, r9
 8007c36:	aa03      	add	r2, sp, #12
 8007c38:	4621      	mov	r1, r4
 8007c3a:	4640      	mov	r0, r8
 8007c3c:	f7ff fee6 	bl	8007a0c <_printf_common>
 8007c40:	3001      	adds	r0, #1
 8007c42:	d14a      	bne.n	8007cda <_printf_i+0x1f2>
 8007c44:	f04f 30ff 	mov.w	r0, #4294967295
 8007c48:	b004      	add	sp, #16
 8007c4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007c4e:	6823      	ldr	r3, [r4, #0]
 8007c50:	f043 0320 	orr.w	r3, r3, #32
 8007c54:	6023      	str	r3, [r4, #0]
 8007c56:	4833      	ldr	r0, [pc, #204]	@ (8007d24 <_printf_i+0x23c>)
 8007c58:	2778      	movs	r7, #120	@ 0x78
 8007c5a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007c5e:	6823      	ldr	r3, [r4, #0]
 8007c60:	6831      	ldr	r1, [r6, #0]
 8007c62:	061f      	lsls	r7, r3, #24
 8007c64:	f851 5b04 	ldr.w	r5, [r1], #4
 8007c68:	d402      	bmi.n	8007c70 <_printf_i+0x188>
 8007c6a:	065f      	lsls	r7, r3, #25
 8007c6c:	bf48      	it	mi
 8007c6e:	b2ad      	uxthmi	r5, r5
 8007c70:	6031      	str	r1, [r6, #0]
 8007c72:	07d9      	lsls	r1, r3, #31
 8007c74:	bf44      	itt	mi
 8007c76:	f043 0320 	orrmi.w	r3, r3, #32
 8007c7a:	6023      	strmi	r3, [r4, #0]
 8007c7c:	b11d      	cbz	r5, 8007c86 <_printf_i+0x19e>
 8007c7e:	2310      	movs	r3, #16
 8007c80:	e7ac      	b.n	8007bdc <_printf_i+0xf4>
 8007c82:	4827      	ldr	r0, [pc, #156]	@ (8007d20 <_printf_i+0x238>)
 8007c84:	e7e9      	b.n	8007c5a <_printf_i+0x172>
 8007c86:	6823      	ldr	r3, [r4, #0]
 8007c88:	f023 0320 	bic.w	r3, r3, #32
 8007c8c:	6023      	str	r3, [r4, #0]
 8007c8e:	e7f6      	b.n	8007c7e <_printf_i+0x196>
 8007c90:	4616      	mov	r6, r2
 8007c92:	e7bd      	b.n	8007c10 <_printf_i+0x128>
 8007c94:	6833      	ldr	r3, [r6, #0]
 8007c96:	6825      	ldr	r5, [r4, #0]
 8007c98:	6961      	ldr	r1, [r4, #20]
 8007c9a:	1d18      	adds	r0, r3, #4
 8007c9c:	6030      	str	r0, [r6, #0]
 8007c9e:	062e      	lsls	r6, r5, #24
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	d501      	bpl.n	8007ca8 <_printf_i+0x1c0>
 8007ca4:	6019      	str	r1, [r3, #0]
 8007ca6:	e002      	b.n	8007cae <_printf_i+0x1c6>
 8007ca8:	0668      	lsls	r0, r5, #25
 8007caa:	d5fb      	bpl.n	8007ca4 <_printf_i+0x1bc>
 8007cac:	8019      	strh	r1, [r3, #0]
 8007cae:	2300      	movs	r3, #0
 8007cb0:	6123      	str	r3, [r4, #16]
 8007cb2:	4616      	mov	r6, r2
 8007cb4:	e7bc      	b.n	8007c30 <_printf_i+0x148>
 8007cb6:	6833      	ldr	r3, [r6, #0]
 8007cb8:	1d1a      	adds	r2, r3, #4
 8007cba:	6032      	str	r2, [r6, #0]
 8007cbc:	681e      	ldr	r6, [r3, #0]
 8007cbe:	6862      	ldr	r2, [r4, #4]
 8007cc0:	2100      	movs	r1, #0
 8007cc2:	4630      	mov	r0, r6
 8007cc4:	f7f8 fa84 	bl	80001d0 <memchr>
 8007cc8:	b108      	cbz	r0, 8007cce <_printf_i+0x1e6>
 8007cca:	1b80      	subs	r0, r0, r6
 8007ccc:	6060      	str	r0, [r4, #4]
 8007cce:	6863      	ldr	r3, [r4, #4]
 8007cd0:	6123      	str	r3, [r4, #16]
 8007cd2:	2300      	movs	r3, #0
 8007cd4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007cd8:	e7aa      	b.n	8007c30 <_printf_i+0x148>
 8007cda:	6923      	ldr	r3, [r4, #16]
 8007cdc:	4632      	mov	r2, r6
 8007cde:	4649      	mov	r1, r9
 8007ce0:	4640      	mov	r0, r8
 8007ce2:	47d0      	blx	sl
 8007ce4:	3001      	adds	r0, #1
 8007ce6:	d0ad      	beq.n	8007c44 <_printf_i+0x15c>
 8007ce8:	6823      	ldr	r3, [r4, #0]
 8007cea:	079b      	lsls	r3, r3, #30
 8007cec:	d413      	bmi.n	8007d16 <_printf_i+0x22e>
 8007cee:	68e0      	ldr	r0, [r4, #12]
 8007cf0:	9b03      	ldr	r3, [sp, #12]
 8007cf2:	4298      	cmp	r0, r3
 8007cf4:	bfb8      	it	lt
 8007cf6:	4618      	movlt	r0, r3
 8007cf8:	e7a6      	b.n	8007c48 <_printf_i+0x160>
 8007cfa:	2301      	movs	r3, #1
 8007cfc:	4632      	mov	r2, r6
 8007cfe:	4649      	mov	r1, r9
 8007d00:	4640      	mov	r0, r8
 8007d02:	47d0      	blx	sl
 8007d04:	3001      	adds	r0, #1
 8007d06:	d09d      	beq.n	8007c44 <_printf_i+0x15c>
 8007d08:	3501      	adds	r5, #1
 8007d0a:	68e3      	ldr	r3, [r4, #12]
 8007d0c:	9903      	ldr	r1, [sp, #12]
 8007d0e:	1a5b      	subs	r3, r3, r1
 8007d10:	42ab      	cmp	r3, r5
 8007d12:	dcf2      	bgt.n	8007cfa <_printf_i+0x212>
 8007d14:	e7eb      	b.n	8007cee <_printf_i+0x206>
 8007d16:	2500      	movs	r5, #0
 8007d18:	f104 0619 	add.w	r6, r4, #25
 8007d1c:	e7f5      	b.n	8007d0a <_printf_i+0x222>
 8007d1e:	bf00      	nop
 8007d20:	0800ae09 	.word	0x0800ae09
 8007d24:	0800ae1a 	.word	0x0800ae1a

08007d28 <memmove>:
 8007d28:	4288      	cmp	r0, r1
 8007d2a:	b510      	push	{r4, lr}
 8007d2c:	eb01 0402 	add.w	r4, r1, r2
 8007d30:	d902      	bls.n	8007d38 <memmove+0x10>
 8007d32:	4284      	cmp	r4, r0
 8007d34:	4623      	mov	r3, r4
 8007d36:	d807      	bhi.n	8007d48 <memmove+0x20>
 8007d38:	1e43      	subs	r3, r0, #1
 8007d3a:	42a1      	cmp	r1, r4
 8007d3c:	d008      	beq.n	8007d50 <memmove+0x28>
 8007d3e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007d42:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007d46:	e7f8      	b.n	8007d3a <memmove+0x12>
 8007d48:	4402      	add	r2, r0
 8007d4a:	4601      	mov	r1, r0
 8007d4c:	428a      	cmp	r2, r1
 8007d4e:	d100      	bne.n	8007d52 <memmove+0x2a>
 8007d50:	bd10      	pop	{r4, pc}
 8007d52:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007d56:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007d5a:	e7f7      	b.n	8007d4c <memmove+0x24>

08007d5c <_sbrk_r>:
 8007d5c:	b538      	push	{r3, r4, r5, lr}
 8007d5e:	4d06      	ldr	r5, [pc, #24]	@ (8007d78 <_sbrk_r+0x1c>)
 8007d60:	2300      	movs	r3, #0
 8007d62:	4604      	mov	r4, r0
 8007d64:	4608      	mov	r0, r1
 8007d66:	602b      	str	r3, [r5, #0]
 8007d68:	f7f9 ffc2 	bl	8001cf0 <_sbrk>
 8007d6c:	1c43      	adds	r3, r0, #1
 8007d6e:	d102      	bne.n	8007d76 <_sbrk_r+0x1a>
 8007d70:	682b      	ldr	r3, [r5, #0]
 8007d72:	b103      	cbz	r3, 8007d76 <_sbrk_r+0x1a>
 8007d74:	6023      	str	r3, [r4, #0]
 8007d76:	bd38      	pop	{r3, r4, r5, pc}
 8007d78:	20000574 	.word	0x20000574

08007d7c <memcpy>:
 8007d7c:	440a      	add	r2, r1
 8007d7e:	4291      	cmp	r1, r2
 8007d80:	f100 33ff 	add.w	r3, r0, #4294967295
 8007d84:	d100      	bne.n	8007d88 <memcpy+0xc>
 8007d86:	4770      	bx	lr
 8007d88:	b510      	push	{r4, lr}
 8007d8a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007d8e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007d92:	4291      	cmp	r1, r2
 8007d94:	d1f9      	bne.n	8007d8a <memcpy+0xe>
 8007d96:	bd10      	pop	{r4, pc}

08007d98 <_realloc_r>:
 8007d98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007d9c:	4680      	mov	r8, r0
 8007d9e:	4615      	mov	r5, r2
 8007da0:	460c      	mov	r4, r1
 8007da2:	b921      	cbnz	r1, 8007dae <_realloc_r+0x16>
 8007da4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007da8:	4611      	mov	r1, r2
 8007daa:	f7ff bc4b 	b.w	8007644 <_malloc_r>
 8007dae:	b92a      	cbnz	r2, 8007dbc <_realloc_r+0x24>
 8007db0:	f7ff fbdc 	bl	800756c <_free_r>
 8007db4:	2400      	movs	r4, #0
 8007db6:	4620      	mov	r0, r4
 8007db8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007dbc:	f000 f81a 	bl	8007df4 <_malloc_usable_size_r>
 8007dc0:	4285      	cmp	r5, r0
 8007dc2:	4606      	mov	r6, r0
 8007dc4:	d802      	bhi.n	8007dcc <_realloc_r+0x34>
 8007dc6:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8007dca:	d8f4      	bhi.n	8007db6 <_realloc_r+0x1e>
 8007dcc:	4629      	mov	r1, r5
 8007dce:	4640      	mov	r0, r8
 8007dd0:	f7ff fc38 	bl	8007644 <_malloc_r>
 8007dd4:	4607      	mov	r7, r0
 8007dd6:	2800      	cmp	r0, #0
 8007dd8:	d0ec      	beq.n	8007db4 <_realloc_r+0x1c>
 8007dda:	42b5      	cmp	r5, r6
 8007ddc:	462a      	mov	r2, r5
 8007dde:	4621      	mov	r1, r4
 8007de0:	bf28      	it	cs
 8007de2:	4632      	movcs	r2, r6
 8007de4:	f7ff ffca 	bl	8007d7c <memcpy>
 8007de8:	4621      	mov	r1, r4
 8007dea:	4640      	mov	r0, r8
 8007dec:	f7ff fbbe 	bl	800756c <_free_r>
 8007df0:	463c      	mov	r4, r7
 8007df2:	e7e0      	b.n	8007db6 <_realloc_r+0x1e>

08007df4 <_malloc_usable_size_r>:
 8007df4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007df8:	1f18      	subs	r0, r3, #4
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	bfbc      	itt	lt
 8007dfe:	580b      	ldrlt	r3, [r1, r0]
 8007e00:	18c0      	addlt	r0, r0, r3
 8007e02:	4770      	bx	lr

08007e04 <_init>:
 8007e04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e06:	bf00      	nop
 8007e08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007e0a:	bc08      	pop	{r3}
 8007e0c:	469e      	mov	lr, r3
 8007e0e:	4770      	bx	lr

08007e10 <_fini>:
 8007e10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e12:	bf00      	nop
 8007e14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007e16:	bc08      	pop	{r3}
 8007e18:	469e      	mov	lr, r3
 8007e1a:	4770      	bx	lr
