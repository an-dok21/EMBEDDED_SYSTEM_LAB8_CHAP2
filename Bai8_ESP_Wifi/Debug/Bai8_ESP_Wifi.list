
Bai8_ESP_Wifi.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006ad4  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002fb0  08006c5c  08006c5c  00007c5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009c0c  08009c0c  0000b014  2**0
                  CONTENTS
  4 .ARM          00000008  08009c0c  08009c0c  0000ac0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009c14  08009c14  0000b014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009c14  08009c14  0000ac14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009c18  08009c18  0000ac18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08009c1c  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000b014  2**0
                  CONTENTS
 10 .bss          00000364  20000014  20000014  0000b014  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000378  20000378  0000b014  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000b014  2**0
                  CONTENTS, READONLY
 13 .debug_info   00018974  00000000  00000000  0000b044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004060  00000000  00000000  000239b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001620  00000000  00000000  00027a18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001145  00000000  00000000  00029038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025fb1  00000000  00000000  0002a17d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001f820  00000000  00000000  0005012e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000df287  00000000  00000000  0006f94e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0014ebd5  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005b2c  00000000  00000000  0014ec18  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000081  00000000  00000000  00154744  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000014 	.word	0x20000014
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08006c44 	.word	0x08006c44

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000018 	.word	0x20000018
 80001c4:	08006c44 	.word	0x08006c44

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96a 	b.w	80004b4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	460c      	mov	r4, r1
 8000200:	2b00      	cmp	r3, #0
 8000202:	d14e      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000204:	4694      	mov	ip, r2
 8000206:	458c      	cmp	ip, r1
 8000208:	4686      	mov	lr, r0
 800020a:	fab2 f282 	clz	r2, r2
 800020e:	d962      	bls.n	80002d6 <__udivmoddi4+0xde>
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0320 	rsb	r3, r2, #32
 8000216:	4091      	lsls	r1, r2
 8000218:	fa20 f303 	lsr.w	r3, r0, r3
 800021c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000220:	4319      	orrs	r1, r3
 8000222:	fa00 fe02 	lsl.w	lr, r0, r2
 8000226:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800022a:	fa1f f68c 	uxth.w	r6, ip
 800022e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000232:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000236:	fb07 1114 	mls	r1, r7, r4, r1
 800023a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023e:	fb04 f106 	mul.w	r1, r4, r6
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f104 30ff 	add.w	r0, r4, #4294967295
 800024e:	f080 8112 	bcs.w	8000476 <__udivmoddi4+0x27e>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 810f 	bls.w	8000476 <__udivmoddi4+0x27e>
 8000258:	3c02      	subs	r4, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a59      	subs	r1, r3, r1
 800025e:	fa1f f38e 	uxth.w	r3, lr
 8000262:	fbb1 f0f7 	udiv	r0, r1, r7
 8000266:	fb07 1110 	mls	r1, r7, r0, r1
 800026a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800026e:	fb00 f606 	mul.w	r6, r0, r6
 8000272:	429e      	cmp	r6, r3
 8000274:	d90a      	bls.n	800028c <__udivmoddi4+0x94>
 8000276:	eb1c 0303 	adds.w	r3, ip, r3
 800027a:	f100 31ff 	add.w	r1, r0, #4294967295
 800027e:	f080 80fc 	bcs.w	800047a <__udivmoddi4+0x282>
 8000282:	429e      	cmp	r6, r3
 8000284:	f240 80f9 	bls.w	800047a <__udivmoddi4+0x282>
 8000288:	4463      	add	r3, ip
 800028a:	3802      	subs	r0, #2
 800028c:	1b9b      	subs	r3, r3, r6
 800028e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000292:	2100      	movs	r1, #0
 8000294:	b11d      	cbz	r5, 800029e <__udivmoddi4+0xa6>
 8000296:	40d3      	lsrs	r3, r2
 8000298:	2200      	movs	r2, #0
 800029a:	e9c5 3200 	strd	r3, r2, [r5]
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d905      	bls.n	80002b2 <__udivmoddi4+0xba>
 80002a6:	b10d      	cbz	r5, 80002ac <__udivmoddi4+0xb4>
 80002a8:	e9c5 0100 	strd	r0, r1, [r5]
 80002ac:	2100      	movs	r1, #0
 80002ae:	4608      	mov	r0, r1
 80002b0:	e7f5      	b.n	800029e <__udivmoddi4+0xa6>
 80002b2:	fab3 f183 	clz	r1, r3
 80002b6:	2900      	cmp	r1, #0
 80002b8:	d146      	bne.n	8000348 <__udivmoddi4+0x150>
 80002ba:	42a3      	cmp	r3, r4
 80002bc:	d302      	bcc.n	80002c4 <__udivmoddi4+0xcc>
 80002be:	4290      	cmp	r0, r2
 80002c0:	f0c0 80f0 	bcc.w	80004a4 <__udivmoddi4+0x2ac>
 80002c4:	1a86      	subs	r6, r0, r2
 80002c6:	eb64 0303 	sbc.w	r3, r4, r3
 80002ca:	2001      	movs	r0, #1
 80002cc:	2d00      	cmp	r5, #0
 80002ce:	d0e6      	beq.n	800029e <__udivmoddi4+0xa6>
 80002d0:	e9c5 6300 	strd	r6, r3, [r5]
 80002d4:	e7e3      	b.n	800029e <__udivmoddi4+0xa6>
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	f040 8090 	bne.w	80003fc <__udivmoddi4+0x204>
 80002dc:	eba1 040c 	sub.w	r4, r1, ip
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	fa1f f78c 	uxth.w	r7, ip
 80002e8:	2101      	movs	r1, #1
 80002ea:	fbb4 f6f8 	udiv	r6, r4, r8
 80002ee:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002f2:	fb08 4416 	mls	r4, r8, r6, r4
 80002f6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002fa:	fb07 f006 	mul.w	r0, r7, r6
 80002fe:	4298      	cmp	r0, r3
 8000300:	d908      	bls.n	8000314 <__udivmoddi4+0x11c>
 8000302:	eb1c 0303 	adds.w	r3, ip, r3
 8000306:	f106 34ff 	add.w	r4, r6, #4294967295
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x11a>
 800030c:	4298      	cmp	r0, r3
 800030e:	f200 80cd 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 8000312:	4626      	mov	r6, r4
 8000314:	1a1c      	subs	r4, r3, r0
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb4 f0f8 	udiv	r0, r4, r8
 800031e:	fb08 4410 	mls	r4, r8, r0, r4
 8000322:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000326:	fb00 f707 	mul.w	r7, r0, r7
 800032a:	429f      	cmp	r7, r3
 800032c:	d908      	bls.n	8000340 <__udivmoddi4+0x148>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 34ff 	add.w	r4, r0, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x146>
 8000338:	429f      	cmp	r7, r3
 800033a:	f200 80b0 	bhi.w	800049e <__udivmoddi4+0x2a6>
 800033e:	4620      	mov	r0, r4
 8000340:	1bdb      	subs	r3, r3, r7
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	e7a5      	b.n	8000294 <__udivmoddi4+0x9c>
 8000348:	f1c1 0620 	rsb	r6, r1, #32
 800034c:	408b      	lsls	r3, r1
 800034e:	fa22 f706 	lsr.w	r7, r2, r6
 8000352:	431f      	orrs	r7, r3
 8000354:	fa20 fc06 	lsr.w	ip, r0, r6
 8000358:	fa04 f301 	lsl.w	r3, r4, r1
 800035c:	ea43 030c 	orr.w	r3, r3, ip
 8000360:	40f4      	lsrs	r4, r6
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	0c38      	lsrs	r0, r7, #16
 8000368:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800036c:	fbb4 fef0 	udiv	lr, r4, r0
 8000370:	fa1f fc87 	uxth.w	ip, r7
 8000374:	fb00 441e 	mls	r4, r0, lr, r4
 8000378:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800037c:	fb0e f90c 	mul.w	r9, lr, ip
 8000380:	45a1      	cmp	r9, r4
 8000382:	fa02 f201 	lsl.w	r2, r2, r1
 8000386:	d90a      	bls.n	800039e <__udivmoddi4+0x1a6>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800038e:	f080 8084 	bcs.w	800049a <__udivmoddi4+0x2a2>
 8000392:	45a1      	cmp	r9, r4
 8000394:	f240 8081 	bls.w	800049a <__udivmoddi4+0x2a2>
 8000398:	f1ae 0e02 	sub.w	lr, lr, #2
 800039c:	443c      	add	r4, r7
 800039e:	eba4 0409 	sub.w	r4, r4, r9
 80003a2:	fa1f f983 	uxth.w	r9, r3
 80003a6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003aa:	fb00 4413 	mls	r4, r0, r3, r4
 80003ae:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b6:	45a4      	cmp	ip, r4
 80003b8:	d907      	bls.n	80003ca <__udivmoddi4+0x1d2>
 80003ba:	193c      	adds	r4, r7, r4
 80003bc:	f103 30ff 	add.w	r0, r3, #4294967295
 80003c0:	d267      	bcs.n	8000492 <__udivmoddi4+0x29a>
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	d965      	bls.n	8000492 <__udivmoddi4+0x29a>
 80003c6:	3b02      	subs	r3, #2
 80003c8:	443c      	add	r4, r7
 80003ca:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003ce:	fba0 9302 	umull	r9, r3, r0, r2
 80003d2:	eba4 040c 	sub.w	r4, r4, ip
 80003d6:	429c      	cmp	r4, r3
 80003d8:	46ce      	mov	lr, r9
 80003da:	469c      	mov	ip, r3
 80003dc:	d351      	bcc.n	8000482 <__udivmoddi4+0x28a>
 80003de:	d04e      	beq.n	800047e <__udivmoddi4+0x286>
 80003e0:	b155      	cbz	r5, 80003f8 <__udivmoddi4+0x200>
 80003e2:	ebb8 030e 	subs.w	r3, r8, lr
 80003e6:	eb64 040c 	sbc.w	r4, r4, ip
 80003ea:	fa04 f606 	lsl.w	r6, r4, r6
 80003ee:	40cb      	lsrs	r3, r1
 80003f0:	431e      	orrs	r6, r3
 80003f2:	40cc      	lsrs	r4, r1
 80003f4:	e9c5 6400 	strd	r6, r4, [r5]
 80003f8:	2100      	movs	r1, #0
 80003fa:	e750      	b.n	800029e <__udivmoddi4+0xa6>
 80003fc:	f1c2 0320 	rsb	r3, r2, #32
 8000400:	fa20 f103 	lsr.w	r1, r0, r3
 8000404:	fa0c fc02 	lsl.w	ip, ip, r2
 8000408:	fa24 f303 	lsr.w	r3, r4, r3
 800040c:	4094      	lsls	r4, r2
 800040e:	430c      	orrs	r4, r1
 8000410:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000414:	fa00 fe02 	lsl.w	lr, r0, r2
 8000418:	fa1f f78c 	uxth.w	r7, ip
 800041c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000420:	fb08 3110 	mls	r1, r8, r0, r3
 8000424:	0c23      	lsrs	r3, r4, #16
 8000426:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042a:	fb00 f107 	mul.w	r1, r0, r7
 800042e:	4299      	cmp	r1, r3
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x24c>
 8000432:	eb1c 0303 	adds.w	r3, ip, r3
 8000436:	f100 36ff 	add.w	r6, r0, #4294967295
 800043a:	d22c      	bcs.n	8000496 <__udivmoddi4+0x29e>
 800043c:	4299      	cmp	r1, r3
 800043e:	d92a      	bls.n	8000496 <__udivmoddi4+0x29e>
 8000440:	3802      	subs	r0, #2
 8000442:	4463      	add	r3, ip
 8000444:	1a5b      	subs	r3, r3, r1
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb3 f1f8 	udiv	r1, r3, r8
 800044c:	fb08 3311 	mls	r3, r8, r1, r3
 8000450:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000454:	fb01 f307 	mul.w	r3, r1, r7
 8000458:	42a3      	cmp	r3, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x276>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f101 36ff 	add.w	r6, r1, #4294967295
 8000464:	d213      	bcs.n	800048e <__udivmoddi4+0x296>
 8000466:	42a3      	cmp	r3, r4
 8000468:	d911      	bls.n	800048e <__udivmoddi4+0x296>
 800046a:	3902      	subs	r1, #2
 800046c:	4464      	add	r4, ip
 800046e:	1ae4      	subs	r4, r4, r3
 8000470:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000474:	e739      	b.n	80002ea <__udivmoddi4+0xf2>
 8000476:	4604      	mov	r4, r0
 8000478:	e6f0      	b.n	800025c <__udivmoddi4+0x64>
 800047a:	4608      	mov	r0, r1
 800047c:	e706      	b.n	800028c <__udivmoddi4+0x94>
 800047e:	45c8      	cmp	r8, r9
 8000480:	d2ae      	bcs.n	80003e0 <__udivmoddi4+0x1e8>
 8000482:	ebb9 0e02 	subs.w	lr, r9, r2
 8000486:	eb63 0c07 	sbc.w	ip, r3, r7
 800048a:	3801      	subs	r0, #1
 800048c:	e7a8      	b.n	80003e0 <__udivmoddi4+0x1e8>
 800048e:	4631      	mov	r1, r6
 8000490:	e7ed      	b.n	800046e <__udivmoddi4+0x276>
 8000492:	4603      	mov	r3, r0
 8000494:	e799      	b.n	80003ca <__udivmoddi4+0x1d2>
 8000496:	4630      	mov	r0, r6
 8000498:	e7d4      	b.n	8000444 <__udivmoddi4+0x24c>
 800049a:	46d6      	mov	lr, sl
 800049c:	e77f      	b.n	800039e <__udivmoddi4+0x1a6>
 800049e:	4463      	add	r3, ip
 80004a0:	3802      	subs	r0, #2
 80004a2:	e74d      	b.n	8000340 <__udivmoddi4+0x148>
 80004a4:	4606      	mov	r6, r0
 80004a6:	4623      	mov	r3, r4
 80004a8:	4608      	mov	r0, r1
 80004aa:	e70f      	b.n	80002cc <__udivmoddi4+0xd4>
 80004ac:	3e02      	subs	r6, #2
 80004ae:	4463      	add	r3, ip
 80004b0:	e730      	b.n	8000314 <__udivmoddi4+0x11c>
 80004b2:	bf00      	nop

080004b4 <__aeabi_idiv0>:
 80004b4:	4770      	bx	lr
 80004b6:	bf00      	nop

080004b8 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	b084      	sub	sp, #16
 80004bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80004be:	463b      	mov	r3, r7
 80004c0:	2200      	movs	r2, #0
 80004c2:	601a      	str	r2, [r3, #0]
 80004c4:	605a      	str	r2, [r3, #4]
 80004c6:	609a      	str	r2, [r3, #8]
 80004c8:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80004ca:	4b3d      	ldr	r3, [pc, #244]	@ (80005c0 <MX_ADC1_Init+0x108>)
 80004cc:	4a3d      	ldr	r2, [pc, #244]	@ (80005c4 <MX_ADC1_Init+0x10c>)
 80004ce:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80004d0:	4b3b      	ldr	r3, [pc, #236]	@ (80005c0 <MX_ADC1_Init+0x108>)
 80004d2:	2200      	movs	r2, #0
 80004d4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80004d6:	4b3a      	ldr	r3, [pc, #232]	@ (80005c0 <MX_ADC1_Init+0x108>)
 80004d8:	2200      	movs	r2, #0
 80004da:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80004dc:	4b38      	ldr	r3, [pc, #224]	@ (80005c0 <MX_ADC1_Init+0x108>)
 80004de:	2201      	movs	r2, #1
 80004e0:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80004e2:	4b37      	ldr	r3, [pc, #220]	@ (80005c0 <MX_ADC1_Init+0x108>)
 80004e4:	2200      	movs	r2, #0
 80004e6:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80004e8:	4b35      	ldr	r3, [pc, #212]	@ (80005c0 <MX_ADC1_Init+0x108>)
 80004ea:	2200      	movs	r2, #0
 80004ec:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80004f0:	4b33      	ldr	r3, [pc, #204]	@ (80005c0 <MX_ADC1_Init+0x108>)
 80004f2:	2200      	movs	r2, #0
 80004f4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80004f6:	4b32      	ldr	r3, [pc, #200]	@ (80005c0 <MX_ADC1_Init+0x108>)
 80004f8:	4a33      	ldr	r2, [pc, #204]	@ (80005c8 <MX_ADC1_Init+0x110>)
 80004fa:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80004fc:	4b30      	ldr	r3, [pc, #192]	@ (80005c0 <MX_ADC1_Init+0x108>)
 80004fe:	2200      	movs	r2, #0
 8000500:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 5;
 8000502:	4b2f      	ldr	r3, [pc, #188]	@ (80005c0 <MX_ADC1_Init+0x108>)
 8000504:	2205      	movs	r2, #5
 8000506:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000508:	4b2d      	ldr	r3, [pc, #180]	@ (80005c0 <MX_ADC1_Init+0x108>)
 800050a:	2200      	movs	r2, #0
 800050c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000510:	4b2b      	ldr	r3, [pc, #172]	@ (80005c0 <MX_ADC1_Init+0x108>)
 8000512:	2201      	movs	r2, #1
 8000514:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000516:	482a      	ldr	r0, [pc, #168]	@ (80005c0 <MX_ADC1_Init+0x108>)
 8000518:	f001 fde6 	bl	80020e8 <HAL_ADC_Init>
 800051c:	4603      	mov	r3, r0
 800051e:	2b00      	cmp	r3, #0
 8000520:	d001      	beq.n	8000526 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000522:	f001 f901 	bl	8001728 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000526:	2308      	movs	r3, #8
 8000528:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800052a:	2301      	movs	r3, #1
 800052c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800052e:	2300      	movs	r3, #0
 8000530:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000532:	463b      	mov	r3, r7
 8000534:	4619      	mov	r1, r3
 8000536:	4822      	ldr	r0, [pc, #136]	@ (80005c0 <MX_ADC1_Init+0x108>)
 8000538:	f001 fe1a 	bl	8002170 <HAL_ADC_ConfigChannel>
 800053c:	4603      	mov	r3, r0
 800053e:	2b00      	cmp	r3, #0
 8000540:	d001      	beq.n	8000546 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000542:	f001 f8f1 	bl	8001728 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000546:	2309      	movs	r3, #9
 8000548:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 800054a:	2302      	movs	r3, #2
 800054c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800054e:	463b      	mov	r3, r7
 8000550:	4619      	mov	r1, r3
 8000552:	481b      	ldr	r0, [pc, #108]	@ (80005c0 <MX_ADC1_Init+0x108>)
 8000554:	f001 fe0c 	bl	8002170 <HAL_ADC_ConfigChannel>
 8000558:	4603      	mov	r3, r0
 800055a:	2b00      	cmp	r3, #0
 800055c:	d001      	beq.n	8000562 <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 800055e:	f001 f8e3 	bl	8001728 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000562:	230a      	movs	r3, #10
 8000564:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8000566:	2303      	movs	r3, #3
 8000568:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800056a:	463b      	mov	r3, r7
 800056c:	4619      	mov	r1, r3
 800056e:	4814      	ldr	r0, [pc, #80]	@ (80005c0 <MX_ADC1_Init+0x108>)
 8000570:	f001 fdfe 	bl	8002170 <HAL_ADC_ConfigChannel>
 8000574:	4603      	mov	r3, r0
 8000576:	2b00      	cmp	r3, #0
 8000578:	d001      	beq.n	800057e <MX_ADC1_Init+0xc6>
  {
    Error_Handler();
 800057a:	f001 f8d5 	bl	8001728 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 800057e:	230b      	movs	r3, #11
 8000580:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8000582:	2304      	movs	r3, #4
 8000584:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000586:	463b      	mov	r3, r7
 8000588:	4619      	mov	r1, r3
 800058a:	480d      	ldr	r0, [pc, #52]	@ (80005c0 <MX_ADC1_Init+0x108>)
 800058c:	f001 fdf0 	bl	8002170 <HAL_ADC_ConfigChannel>
 8000590:	4603      	mov	r3, r0
 8000592:	2b00      	cmp	r3, #0
 8000594:	d001      	beq.n	800059a <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 8000596:	f001 f8c7 	bl	8001728 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 800059a:	230c      	movs	r3, #12
 800059c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 800059e:	2305      	movs	r3, #5
 80005a0:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005a2:	463b      	mov	r3, r7
 80005a4:	4619      	mov	r1, r3
 80005a6:	4806      	ldr	r0, [pc, #24]	@ (80005c0 <MX_ADC1_Init+0x108>)
 80005a8:	f001 fde2 	bl	8002170 <HAL_ADC_ConfigChannel>
 80005ac:	4603      	mov	r3, r0
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	d001      	beq.n	80005b6 <MX_ADC1_Init+0xfe>
  {
    Error_Handler();
 80005b2:	f001 f8b9 	bl	8001728 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80005b6:	bf00      	nop
 80005b8:	3710      	adds	r7, #16
 80005ba:	46bd      	mov	sp, r7
 80005bc:	bd80      	pop	{r7, pc}
 80005be:	bf00      	nop
 80005c0:	20000030 	.word	0x20000030
 80005c4:	40012000 	.word	0x40012000
 80005c8:	0f000001 	.word	0x0f000001

080005cc <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b08a      	sub	sp, #40	@ 0x28
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005d4:	f107 0314 	add.w	r3, r7, #20
 80005d8:	2200      	movs	r2, #0
 80005da:	601a      	str	r2, [r3, #0]
 80005dc:	605a      	str	r2, [r3, #4]
 80005de:	609a      	str	r2, [r3, #8]
 80005e0:	60da      	str	r2, [r3, #12]
 80005e2:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	4a3c      	ldr	r2, [pc, #240]	@ (80006dc <HAL_ADC_MspInit+0x110>)
 80005ea:	4293      	cmp	r3, r2
 80005ec:	d171      	bne.n	80006d2 <HAL_ADC_MspInit+0x106>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80005ee:	2300      	movs	r3, #0
 80005f0:	613b      	str	r3, [r7, #16]
 80005f2:	4b3b      	ldr	r3, [pc, #236]	@ (80006e0 <HAL_ADC_MspInit+0x114>)
 80005f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80005f6:	4a3a      	ldr	r2, [pc, #232]	@ (80006e0 <HAL_ADC_MspInit+0x114>)
 80005f8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80005fc:	6453      	str	r3, [r2, #68]	@ 0x44
 80005fe:	4b38      	ldr	r3, [pc, #224]	@ (80006e0 <HAL_ADC_MspInit+0x114>)
 8000600:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000602:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000606:	613b      	str	r3, [r7, #16]
 8000608:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800060a:	2300      	movs	r3, #0
 800060c:	60fb      	str	r3, [r7, #12]
 800060e:	4b34      	ldr	r3, [pc, #208]	@ (80006e0 <HAL_ADC_MspInit+0x114>)
 8000610:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000612:	4a33      	ldr	r2, [pc, #204]	@ (80006e0 <HAL_ADC_MspInit+0x114>)
 8000614:	f043 0304 	orr.w	r3, r3, #4
 8000618:	6313      	str	r3, [r2, #48]	@ 0x30
 800061a:	4b31      	ldr	r3, [pc, #196]	@ (80006e0 <HAL_ADC_MspInit+0x114>)
 800061c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800061e:	f003 0304 	and.w	r3, r3, #4
 8000622:	60fb      	str	r3, [r7, #12]
 8000624:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000626:	2300      	movs	r3, #0
 8000628:	60bb      	str	r3, [r7, #8]
 800062a:	4b2d      	ldr	r3, [pc, #180]	@ (80006e0 <HAL_ADC_MspInit+0x114>)
 800062c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800062e:	4a2c      	ldr	r2, [pc, #176]	@ (80006e0 <HAL_ADC_MspInit+0x114>)
 8000630:	f043 0302 	orr.w	r3, r3, #2
 8000634:	6313      	str	r3, [r2, #48]	@ 0x30
 8000636:	4b2a      	ldr	r3, [pc, #168]	@ (80006e0 <HAL_ADC_MspInit+0x114>)
 8000638:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800063a:	f003 0302 	and.w	r3, r3, #2
 800063e:	60bb      	str	r3, [r7, #8]
 8000640:	68bb      	ldr	r3, [r7, #8]
    PC1     ------> ADC1_IN11
    PC2     ------> ADC1_IN12
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8000642:	2307      	movs	r3, #7
 8000644:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000646:	2303      	movs	r3, #3
 8000648:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800064a:	2300      	movs	r3, #0
 800064c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800064e:	f107 0314 	add.w	r3, r7, #20
 8000652:	4619      	mov	r1, r3
 8000654:	4823      	ldr	r0, [pc, #140]	@ (80006e4 <HAL_ADC_MspInit+0x118>)
 8000656:	f002 fc37 	bl	8002ec8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800065a:	2303      	movs	r3, #3
 800065c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800065e:	2303      	movs	r3, #3
 8000660:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000662:	2300      	movs	r3, #0
 8000664:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000666:	f107 0314 	add.w	r3, r7, #20
 800066a:	4619      	mov	r1, r3
 800066c:	481e      	ldr	r0, [pc, #120]	@ (80006e8 <HAL_ADC_MspInit+0x11c>)
 800066e:	f002 fc2b 	bl	8002ec8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000672:	4b1e      	ldr	r3, [pc, #120]	@ (80006ec <HAL_ADC_MspInit+0x120>)
 8000674:	4a1e      	ldr	r2, [pc, #120]	@ (80006f0 <HAL_ADC_MspInit+0x124>)
 8000676:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000678:	4b1c      	ldr	r3, [pc, #112]	@ (80006ec <HAL_ADC_MspInit+0x120>)
 800067a:	2200      	movs	r2, #0
 800067c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800067e:	4b1b      	ldr	r3, [pc, #108]	@ (80006ec <HAL_ADC_MspInit+0x120>)
 8000680:	2200      	movs	r2, #0
 8000682:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000684:	4b19      	ldr	r3, [pc, #100]	@ (80006ec <HAL_ADC_MspInit+0x120>)
 8000686:	2200      	movs	r2, #0
 8000688:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800068a:	4b18      	ldr	r3, [pc, #96]	@ (80006ec <HAL_ADC_MspInit+0x120>)
 800068c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000690:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000692:	4b16      	ldr	r3, [pc, #88]	@ (80006ec <HAL_ADC_MspInit+0x120>)
 8000694:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000698:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800069a:	4b14      	ldr	r3, [pc, #80]	@ (80006ec <HAL_ADC_MspInit+0x120>)
 800069c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80006a0:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80006a2:	4b12      	ldr	r3, [pc, #72]	@ (80006ec <HAL_ADC_MspInit+0x120>)
 80006a4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80006a8:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80006aa:	4b10      	ldr	r3, [pc, #64]	@ (80006ec <HAL_ADC_MspInit+0x120>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80006b0:	4b0e      	ldr	r3, [pc, #56]	@ (80006ec <HAL_ADC_MspInit+0x120>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80006b6:	480d      	ldr	r0, [pc, #52]	@ (80006ec <HAL_ADC_MspInit+0x120>)
 80006b8:	f002 f88a 	bl	80027d0 <HAL_DMA_Init>
 80006bc:	4603      	mov	r3, r0
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d001      	beq.n	80006c6 <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 80006c2:	f001 f831 	bl	8001728 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	4a08      	ldr	r2, [pc, #32]	@ (80006ec <HAL_ADC_MspInit+0x120>)
 80006ca:	639a      	str	r2, [r3, #56]	@ 0x38
 80006cc:	4a07      	ldr	r2, [pc, #28]	@ (80006ec <HAL_ADC_MspInit+0x120>)
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80006d2:	bf00      	nop
 80006d4:	3728      	adds	r7, #40	@ 0x28
 80006d6:	46bd      	mov	sp, r7
 80006d8:	bd80      	pop	{r7, pc}
 80006da:	bf00      	nop
 80006dc:	40012000 	.word	0x40012000
 80006e0:	40023800 	.word	0x40023800
 80006e4:	40020800 	.word	0x40020800
 80006e8:	40020400 	.word	0x40020400
 80006ec:	20000078 	.word	0x20000078
 80006f0:	40026410 	.word	0x40026410

080006f4 <button_init>:
#include "button.h"

uint16_t button_count[16];
uint16_t spi_button = 0x0000;

void button_init(){
 80006f4:	b580      	push	{r7, lr}
 80006f6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 1);
 80006f8:	2201      	movs	r2, #1
 80006fa:	2108      	movs	r1, #8
 80006fc:	4802      	ldr	r0, [pc, #8]	@ (8000708 <button_init+0x14>)
 80006fe:	f002 fd7f 	bl	8003200 <HAL_GPIO_WritePin>
}
 8000702:	bf00      	nop
 8000704:	bd80      	pop	{r7, pc}
 8000706:	bf00      	nop
 8000708:	40020c00 	.word	0x40020c00

0800070c <button_Scan>:

void button_Scan(){
 800070c:	b580      	push	{r7, lr}
 800070e:	b084      	sub	sp, #16
 8000710:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 0);
 8000712:	2200      	movs	r2, #0
 8000714:	2108      	movs	r1, #8
 8000716:	482f      	ldr	r0, [pc, #188]	@ (80007d4 <button_Scan+0xc8>)
 8000718:	f002 fd72 	bl	8003200 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 1);
 800071c:	2201      	movs	r2, #1
 800071e:	2108      	movs	r1, #8
 8000720:	482c      	ldr	r0, [pc, #176]	@ (80007d4 <button_Scan+0xc8>)
 8000722:	f002 fd6d 	bl	8003200 <HAL_GPIO_WritePin>
	  HAL_SPI_Receive(&hspi1, (void*)&spi_button, 2, 10);
 8000726:	230a      	movs	r3, #10
 8000728:	2202      	movs	r2, #2
 800072a:	492b      	ldr	r1, [pc, #172]	@ (80007d8 <button_Scan+0xcc>)
 800072c:	482b      	ldr	r0, [pc, #172]	@ (80007dc <button_Scan+0xd0>)
 800072e:	f003 fd3c 	bl	80041aa <HAL_SPI_Receive>
	  int button_index = 0;
 8000732:	2300      	movs	r3, #0
 8000734:	60fb      	str	r3, [r7, #12]
	  uint16_t mask = 0x8000;
 8000736:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800073a:	817b      	strh	r3, [r7, #10]
	  for(int i = 0; i < 16; i++){
 800073c:	2300      	movs	r3, #0
 800073e:	607b      	str	r3, [r7, #4]
 8000740:	e03f      	b.n	80007c2 <button_Scan+0xb6>
		  if(i >= 0 && i <= 3){
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	2b00      	cmp	r3, #0
 8000746:	db06      	blt.n	8000756 <button_Scan+0x4a>
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	2b03      	cmp	r3, #3
 800074c:	dc03      	bgt.n	8000756 <button_Scan+0x4a>
			  button_index = i + 4; // do theo schematic thì spi gửi ko giống như button trên mạch
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	3304      	adds	r3, #4
 8000752:	60fb      	str	r3, [r7, #12]
 8000754:	e018      	b.n	8000788 <button_Scan+0x7c>
		  } else if (i >= 4 && i <= 7){  //-> cần convert lại cho nó đúng với thứ tự mình mún
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	2b03      	cmp	r3, #3
 800075a:	dd07      	ble.n	800076c <button_Scan+0x60>
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	2b07      	cmp	r3, #7
 8000760:	dc04      	bgt.n	800076c <button_Scan+0x60>
			  button_index = 7 - i;
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	f1c3 0307 	rsb	r3, r3, #7
 8000768:	60fb      	str	r3, [r7, #12]
 800076a:	e00d      	b.n	8000788 <button_Scan+0x7c>
		  } else if (i >= 8 && i <= 11){
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	2b07      	cmp	r3, #7
 8000770:	dd06      	ble.n	8000780 <button_Scan+0x74>
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	2b0b      	cmp	r3, #11
 8000776:	dc03      	bgt.n	8000780 <button_Scan+0x74>
			  button_index = i + 4;
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	3304      	adds	r3, #4
 800077c:	60fb      	str	r3, [r7, #12]
 800077e:	e003      	b.n	8000788 <button_Scan+0x7c>
		  } else {
			  button_index = 23 - i;
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	f1c3 0317 	rsb	r3, r3, #23
 8000786:	60fb      	str	r3, [r7, #12]
		  }
		  if(spi_button & mask) button_count[button_index] = 0;
 8000788:	4b13      	ldr	r3, [pc, #76]	@ (80007d8 <button_Scan+0xcc>)
 800078a:	881a      	ldrh	r2, [r3, #0]
 800078c:	897b      	ldrh	r3, [r7, #10]
 800078e:	4013      	ands	r3, r2
 8000790:	b29b      	uxth	r3, r3
 8000792:	2b00      	cmp	r3, #0
 8000794:	d005      	beq.n	80007a2 <button_Scan+0x96>
 8000796:	4a12      	ldr	r2, [pc, #72]	@ (80007e0 <button_Scan+0xd4>)
 8000798:	68fb      	ldr	r3, [r7, #12]
 800079a:	2100      	movs	r1, #0
 800079c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 80007a0:	e009      	b.n	80007b6 <button_Scan+0xaa>
		  else button_count[button_index]++;
 80007a2:	4a0f      	ldr	r2, [pc, #60]	@ (80007e0 <button_Scan+0xd4>)
 80007a4:	68fb      	ldr	r3, [r7, #12]
 80007a6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80007aa:	3301      	adds	r3, #1
 80007ac:	b299      	uxth	r1, r3
 80007ae:	4a0c      	ldr	r2, [pc, #48]	@ (80007e0 <button_Scan+0xd4>)
 80007b0:	68fb      	ldr	r3, [r7, #12]
 80007b2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
//		  if(spi_button & mask) button_count[i] = 0;
//		  else button_count[i]++;
		  mask = mask >> 1;
 80007b6:	897b      	ldrh	r3, [r7, #10]
 80007b8:	085b      	lsrs	r3, r3, #1
 80007ba:	817b      	strh	r3, [r7, #10]
	  for(int i = 0; i < 16; i++){
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	3301      	adds	r3, #1
 80007c0:	607b      	str	r3, [r7, #4]
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	2b0f      	cmp	r3, #15
 80007c6:	ddbc      	ble.n	8000742 <button_Scan+0x36>
	  }
}
 80007c8:	bf00      	nop
 80007ca:	bf00      	nop
 80007cc:	3710      	adds	r7, #16
 80007ce:	46bd      	mov	sp, r7
 80007d0:	bd80      	pop	{r7, pc}
 80007d2:	bf00      	nop
 80007d4:	40020c00 	.word	0x40020c00
 80007d8:	200000f8 	.word	0x200000f8
 80007dc:	200001b8 	.word	0x200001b8
 80007e0:	200000d8 	.word	0x200000d8

080007e4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b082      	sub	sp, #8
 80007e8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80007ea:	2300      	movs	r3, #0
 80007ec:	607b      	str	r3, [r7, #4]
 80007ee:	4b0c      	ldr	r3, [pc, #48]	@ (8000820 <MX_DMA_Init+0x3c>)
 80007f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007f2:	4a0b      	ldr	r2, [pc, #44]	@ (8000820 <MX_DMA_Init+0x3c>)
 80007f4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80007f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80007fa:	4b09      	ldr	r3, [pc, #36]	@ (8000820 <MX_DMA_Init+0x3c>)
 80007fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007fe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000802:	607b      	str	r3, [r7, #4]
 8000804:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000806:	2200      	movs	r2, #0
 8000808:	2100      	movs	r1, #0
 800080a:	2038      	movs	r0, #56	@ 0x38
 800080c:	f001 ffa9 	bl	8002762 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000810:	2038      	movs	r0, #56	@ 0x38
 8000812:	f001 ffc2 	bl	800279a <HAL_NVIC_EnableIRQ>

}
 8000816:	bf00      	nop
 8000818:	3708      	adds	r7, #8
 800081a:	46bd      	mov	sp, r7
 800081c:	bd80      	pop	{r7, pc}
 800081e:	bf00      	nop
 8000820:	40023800 	.word	0x40023800

08000824 <MX_FSMC_Init>:

SRAM_HandleTypeDef hsram1;

/* FSMC initialization function */
void MX_FSMC_Init(void)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b08e      	sub	sp, #56	@ 0x38
 8000828:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 800082a:	f107 031c 	add.w	r3, r7, #28
 800082e:	2200      	movs	r2, #0
 8000830:	601a      	str	r2, [r3, #0]
 8000832:	605a      	str	r2, [r3, #4]
 8000834:	609a      	str	r2, [r3, #8]
 8000836:	60da      	str	r2, [r3, #12]
 8000838:	611a      	str	r2, [r3, #16]
 800083a:	615a      	str	r2, [r3, #20]
 800083c:	619a      	str	r2, [r3, #24]
  FSMC_NORSRAM_TimingTypeDef ExtTiming = {0};
 800083e:	463b      	mov	r3, r7
 8000840:	2200      	movs	r2, #0
 8000842:	601a      	str	r2, [r3, #0]
 8000844:	605a      	str	r2, [r3, #4]
 8000846:	609a      	str	r2, [r3, #8]
 8000848:	60da      	str	r2, [r3, #12]
 800084a:	611a      	str	r2, [r3, #16]
 800084c:	615a      	str	r2, [r3, #20]
 800084e:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 8000850:	4b2f      	ldr	r3, [pc, #188]	@ (8000910 <MX_FSMC_Init+0xec>)
 8000852:	f04f 4220 	mov.w	r2, #2684354560	@ 0xa0000000
 8000856:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8000858:	4b2d      	ldr	r3, [pc, #180]	@ (8000910 <MX_FSMC_Init+0xec>)
 800085a:	4a2e      	ldr	r2, [pc, #184]	@ (8000914 <MX_FSMC_Init+0xf0>)
 800085c:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 800085e:	4b2c      	ldr	r3, [pc, #176]	@ (8000910 <MX_FSMC_Init+0xec>)
 8000860:	2200      	movs	r2, #0
 8000862:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8000864:	4b2a      	ldr	r3, [pc, #168]	@ (8000910 <MX_FSMC_Init+0xec>)
 8000866:	2200      	movs	r2, #0
 8000868:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 800086a:	4b29      	ldr	r3, [pc, #164]	@ (8000910 <MX_FSMC_Init+0xec>)
 800086c:	2200      	movs	r2, #0
 800086e:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8000870:	4b27      	ldr	r3, [pc, #156]	@ (8000910 <MX_FSMC_Init+0xec>)
 8000872:	2210      	movs	r2, #16
 8000874:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 8000876:	4b26      	ldr	r3, [pc, #152]	@ (8000910 <MX_FSMC_Init+0xec>)
 8000878:	2200      	movs	r2, #0
 800087a:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 800087c:	4b24      	ldr	r3, [pc, #144]	@ (8000910 <MX_FSMC_Init+0xec>)
 800087e:	2200      	movs	r2, #0
 8000880:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 8000882:	4b23      	ldr	r3, [pc, #140]	@ (8000910 <MX_FSMC_Init+0xec>)
 8000884:	2200      	movs	r2, #0
 8000886:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8000888:	4b21      	ldr	r3, [pc, #132]	@ (8000910 <MX_FSMC_Init+0xec>)
 800088a:	2200      	movs	r2, #0
 800088c:	625a      	str	r2, [r3, #36]	@ 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 800088e:	4b20      	ldr	r3, [pc, #128]	@ (8000910 <MX_FSMC_Init+0xec>)
 8000890:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000894:	629a      	str	r2, [r3, #40]	@ 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 8000896:	4b1e      	ldr	r3, [pc, #120]	@ (8000910 <MX_FSMC_Init+0xec>)
 8000898:	2200      	movs	r2, #0
 800089a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_ENABLE;
 800089c:	4b1c      	ldr	r3, [pc, #112]	@ (8000910 <MX_FSMC_Init+0xec>)
 800089e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80008a2:	631a      	str	r2, [r3, #48]	@ 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 80008a4:	4b1a      	ldr	r3, [pc, #104]	@ (8000910 <MX_FSMC_Init+0xec>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	635a      	str	r2, [r3, #52]	@ 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 80008aa:	4b19      	ldr	r3, [pc, #100]	@ (8000910 <MX_FSMC_Init+0xec>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	639a      	str	r2, [r3, #56]	@ 0x38
  hsram1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 80008b0:	4b17      	ldr	r3, [pc, #92]	@ (8000910 <MX_FSMC_Init+0xec>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Timing */
  Timing.AddressSetupTime = 0xf;
 80008b6:	230f      	movs	r3, #15
 80008b8:	61fb      	str	r3, [r7, #28]
  Timing.AddressHoldTime = 15;
 80008ba:	230f      	movs	r3, #15
 80008bc:	623b      	str	r3, [r7, #32]
  Timing.DataSetupTime = 60;
 80008be:	233c      	movs	r3, #60	@ 0x3c
 80008c0:	627b      	str	r3, [r7, #36]	@ 0x24
  Timing.BusTurnAroundDuration = 0;
 80008c2:	2300      	movs	r3, #0
 80008c4:	62bb      	str	r3, [r7, #40]	@ 0x28
  Timing.CLKDivision = 16;
 80008c6:	2310      	movs	r3, #16
 80008c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  Timing.DataLatency = 17;
 80008ca:	2311      	movs	r3, #17
 80008cc:	633b      	str	r3, [r7, #48]	@ 0x30
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 80008ce:	2300      	movs	r3, #0
 80008d0:	637b      	str	r3, [r7, #52]	@ 0x34
  /* ExtTiming */
  ExtTiming.AddressSetupTime = 8;
 80008d2:	2308      	movs	r3, #8
 80008d4:	603b      	str	r3, [r7, #0]
  ExtTiming.AddressHoldTime = 15;
 80008d6:	230f      	movs	r3, #15
 80008d8:	607b      	str	r3, [r7, #4]
  ExtTiming.DataSetupTime = 9;
 80008da:	2309      	movs	r3, #9
 80008dc:	60bb      	str	r3, [r7, #8]
  ExtTiming.BusTurnAroundDuration = 0;
 80008de:	2300      	movs	r3, #0
 80008e0:	60fb      	str	r3, [r7, #12]
  ExtTiming.CLKDivision = 16;
 80008e2:	2310      	movs	r3, #16
 80008e4:	613b      	str	r3, [r7, #16]
  ExtTiming.DataLatency = 17;
 80008e6:	2311      	movs	r3, #17
 80008e8:	617b      	str	r3, [r7, #20]
  ExtTiming.AccessMode = FSMC_ACCESS_MODE_A;
 80008ea:	2300      	movs	r3, #0
 80008ec:	61bb      	str	r3, [r7, #24]

  if (HAL_SRAM_Init(&hsram1, &Timing, &ExtTiming) != HAL_OK)
 80008ee:	463a      	mov	r2, r7
 80008f0:	f107 031c 	add.w	r3, r7, #28
 80008f4:	4619      	mov	r1, r3
 80008f6:	4806      	ldr	r0, [pc, #24]	@ (8000910 <MX_FSMC_Init+0xec>)
 80008f8:	f004 f83a 	bl	8004970 <HAL_SRAM_Init>
 80008fc:	4603      	mov	r3, r0
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d001      	beq.n	8000906 <MX_FSMC_Init+0xe2>
  {
    Error_Handler( );
 8000902:	f000 ff11 	bl	8001728 <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 8000906:	bf00      	nop
 8000908:	3738      	adds	r7, #56	@ 0x38
 800090a:	46bd      	mov	sp, r7
 800090c:	bd80      	pop	{r7, pc}
 800090e:	bf00      	nop
 8000910:	200000fc 	.word	0x200000fc
 8000914:	a0000104 	.word	0xa0000104

08000918 <HAL_FSMC_MspInit>:

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 8000918:	b580      	push	{r7, lr}
 800091a:	b086      	sub	sp, #24
 800091c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800091e:	1d3b      	adds	r3, r7, #4
 8000920:	2200      	movs	r2, #0
 8000922:	601a      	str	r2, [r3, #0]
 8000924:	605a      	str	r2, [r3, #4]
 8000926:	609a      	str	r2, [r3, #8]
 8000928:	60da      	str	r2, [r3, #12]
 800092a:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 800092c:	4b1c      	ldr	r3, [pc, #112]	@ (80009a0 <HAL_FSMC_MspInit+0x88>)
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	2b00      	cmp	r3, #0
 8000932:	d131      	bne.n	8000998 <HAL_FSMC_MspInit+0x80>
    return;
  }
  FSMC_Initialized = 1;
 8000934:	4b1a      	ldr	r3, [pc, #104]	@ (80009a0 <HAL_FSMC_MspInit+0x88>)
 8000936:	2201      	movs	r2, #1
 8000938:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 800093a:	2300      	movs	r3, #0
 800093c:	603b      	str	r3, [r7, #0]
 800093e:	4b19      	ldr	r3, [pc, #100]	@ (80009a4 <HAL_FSMC_MspInit+0x8c>)
 8000940:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000942:	4a18      	ldr	r2, [pc, #96]	@ (80009a4 <HAL_FSMC_MspInit+0x8c>)
 8000944:	f043 0301 	orr.w	r3, r3, #1
 8000948:	6393      	str	r3, [r2, #56]	@ 0x38
 800094a:	4b16      	ldr	r3, [pc, #88]	@ (80009a4 <HAL_FSMC_MspInit+0x8c>)
 800094c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800094e:	f003 0301 	and.w	r3, r3, #1
 8000952:	603b      	str	r3, [r7, #0]
 8000954:	683b      	ldr	r3, [r7, #0]
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 8000956:	f64f 7388 	movw	r3, #65416	@ 0xff88
 800095a:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800095c:	2302      	movs	r3, #2
 800095e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000960:	2300      	movs	r3, #0
 8000962:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000964:	2303      	movs	r3, #3
 8000966:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8000968:	230c      	movs	r3, #12
 800096a:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800096c:	1d3b      	adds	r3, r7, #4
 800096e:	4619      	mov	r1, r3
 8000970:	480d      	ldr	r0, [pc, #52]	@ (80009a8 <HAL_FSMC_MspInit+0x90>)
 8000972:	f002 faa9 	bl	8002ec8 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 8000976:	f24c 73b3 	movw	r3, #51123	@ 0xc7b3
 800097a:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800097c:	2302      	movs	r3, #2
 800097e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000980:	2300      	movs	r3, #0
 8000982:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000984:	2303      	movs	r3, #3
 8000986:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8000988:	230c      	movs	r3, #12
 800098a:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800098c:	1d3b      	adds	r3, r7, #4
 800098e:	4619      	mov	r1, r3
 8000990:	4806      	ldr	r0, [pc, #24]	@ (80009ac <HAL_FSMC_MspInit+0x94>)
 8000992:	f002 fa99 	bl	8002ec8 <HAL_GPIO_Init>
 8000996:	e000      	b.n	800099a <HAL_FSMC_MspInit+0x82>
    return;
 8000998:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 800099a:	3718      	adds	r7, #24
 800099c:	46bd      	mov	sp, r7
 800099e:	bd80      	pop	{r7, pc}
 80009a0:	2000014c 	.word	0x2000014c
 80009a4:	40023800 	.word	0x40023800
 80009a8:	40021000 	.word	0x40021000
 80009ac:	40020c00 	.word	0x40020c00

080009b0 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* sramHandle){
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b082      	sub	sp, #8
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 80009b8:	f7ff ffae 	bl	8000918 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 80009bc:	bf00      	nop
 80009be:	3708      	adds	r7, #8
 80009c0:	46bd      	mov	sp, r7
 80009c2:	bd80      	pop	{r7, pc}

080009c4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b08e      	sub	sp, #56	@ 0x38
 80009c8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009ca:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80009ce:	2200      	movs	r2, #0
 80009d0:	601a      	str	r2, [r3, #0]
 80009d2:	605a      	str	r2, [r3, #4]
 80009d4:	609a      	str	r2, [r3, #8]
 80009d6:	60da      	str	r2, [r3, #12]
 80009d8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80009da:	2300      	movs	r3, #0
 80009dc:	623b      	str	r3, [r7, #32]
 80009de:	4b8f      	ldr	r3, [pc, #572]	@ (8000c1c <MX_GPIO_Init+0x258>)
 80009e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009e2:	4a8e      	ldr	r2, [pc, #568]	@ (8000c1c <MX_GPIO_Init+0x258>)
 80009e4:	f043 0310 	orr.w	r3, r3, #16
 80009e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80009ea:	4b8c      	ldr	r3, [pc, #560]	@ (8000c1c <MX_GPIO_Init+0x258>)
 80009ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009ee:	f003 0310 	and.w	r3, r3, #16
 80009f2:	623b      	str	r3, [r7, #32]
 80009f4:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009f6:	2300      	movs	r3, #0
 80009f8:	61fb      	str	r3, [r7, #28]
 80009fa:	4b88      	ldr	r3, [pc, #544]	@ (8000c1c <MX_GPIO_Init+0x258>)
 80009fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009fe:	4a87      	ldr	r2, [pc, #540]	@ (8000c1c <MX_GPIO_Init+0x258>)
 8000a00:	f043 0304 	orr.w	r3, r3, #4
 8000a04:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a06:	4b85      	ldr	r3, [pc, #532]	@ (8000c1c <MX_GPIO_Init+0x258>)
 8000a08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a0a:	f003 0304 	and.w	r3, r3, #4
 8000a0e:	61fb      	str	r3, [r7, #28]
 8000a10:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000a12:	2300      	movs	r3, #0
 8000a14:	61bb      	str	r3, [r7, #24]
 8000a16:	4b81      	ldr	r3, [pc, #516]	@ (8000c1c <MX_GPIO_Init+0x258>)
 8000a18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a1a:	4a80      	ldr	r2, [pc, #512]	@ (8000c1c <MX_GPIO_Init+0x258>)
 8000a1c:	f043 0320 	orr.w	r3, r3, #32
 8000a20:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a22:	4b7e      	ldr	r3, [pc, #504]	@ (8000c1c <MX_GPIO_Init+0x258>)
 8000a24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a26:	f003 0320 	and.w	r3, r3, #32
 8000a2a:	61bb      	str	r3, [r7, #24]
 8000a2c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a2e:	2300      	movs	r3, #0
 8000a30:	617b      	str	r3, [r7, #20]
 8000a32:	4b7a      	ldr	r3, [pc, #488]	@ (8000c1c <MX_GPIO_Init+0x258>)
 8000a34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a36:	4a79      	ldr	r2, [pc, #484]	@ (8000c1c <MX_GPIO_Init+0x258>)
 8000a38:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000a3c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a3e:	4b77      	ldr	r3, [pc, #476]	@ (8000c1c <MX_GPIO_Init+0x258>)
 8000a40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a42:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000a46:	617b      	str	r3, [r7, #20]
 8000a48:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	613b      	str	r3, [r7, #16]
 8000a4e:	4b73      	ldr	r3, [pc, #460]	@ (8000c1c <MX_GPIO_Init+0x258>)
 8000a50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a52:	4a72      	ldr	r2, [pc, #456]	@ (8000c1c <MX_GPIO_Init+0x258>)
 8000a54:	f043 0301 	orr.w	r3, r3, #1
 8000a58:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a5a:	4b70      	ldr	r3, [pc, #448]	@ (8000c1c <MX_GPIO_Init+0x258>)
 8000a5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a5e:	f003 0301 	and.w	r3, r3, #1
 8000a62:	613b      	str	r3, [r7, #16]
 8000a64:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a66:	2300      	movs	r3, #0
 8000a68:	60fb      	str	r3, [r7, #12]
 8000a6a:	4b6c      	ldr	r3, [pc, #432]	@ (8000c1c <MX_GPIO_Init+0x258>)
 8000a6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a6e:	4a6b      	ldr	r2, [pc, #428]	@ (8000c1c <MX_GPIO_Init+0x258>)
 8000a70:	f043 0302 	orr.w	r3, r3, #2
 8000a74:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a76:	4b69      	ldr	r3, [pc, #420]	@ (8000c1c <MX_GPIO_Init+0x258>)
 8000a78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a7a:	f003 0302 	and.w	r3, r3, #2
 8000a7e:	60fb      	str	r3, [r7, #12]
 8000a80:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a82:	2300      	movs	r3, #0
 8000a84:	60bb      	str	r3, [r7, #8]
 8000a86:	4b65      	ldr	r3, [pc, #404]	@ (8000c1c <MX_GPIO_Init+0x258>)
 8000a88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a8a:	4a64      	ldr	r2, [pc, #400]	@ (8000c1c <MX_GPIO_Init+0x258>)
 8000a8c:	f043 0308 	orr.w	r3, r3, #8
 8000a90:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a92:	4b62      	ldr	r3, [pc, #392]	@ (8000c1c <MX_GPIO_Init+0x258>)
 8000a94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a96:	f003 0308 	and.w	r3, r3, #8
 8000a9a:	60bb      	str	r3, [r7, #8]
 8000a9c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	607b      	str	r3, [r7, #4]
 8000aa2:	4b5e      	ldr	r3, [pc, #376]	@ (8000c1c <MX_GPIO_Init+0x258>)
 8000aa4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aa6:	4a5d      	ldr	r2, [pc, #372]	@ (8000c1c <MX_GPIO_Init+0x258>)
 8000aa8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000aac:	6313      	str	r3, [r2, #48]	@ 0x30
 8000aae:	4b5b      	ldr	r3, [pc, #364]	@ (8000c1c <MX_GPIO_Init+0x258>)
 8000ab0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ab2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000ab6:	607b      	str	r3, [r7, #4]
 8000ab8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DEBUG_LED_Pin|OUTPUT_Y0_Pin|OUTPUT_Y1_Pin, GPIO_PIN_RESET);
 8000aba:	2200      	movs	r2, #0
 8000abc:	2170      	movs	r1, #112	@ 0x70
 8000abe:	4858      	ldr	r0, [pc, #352]	@ (8000c20 <MX_GPIO_Init+0x25c>)
 8000ac0:	f002 fb9e 	bl	8003200 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, FSMC_RES_Pin|T_MOSI_Pin, GPIO_PIN_RESET);
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	f44f 5108 	mov.w	r1, #8704	@ 0x2200
 8000aca:	4856      	ldr	r0, [pc, #344]	@ (8000c24 <MX_GPIO_Init+0x260>)
 8000acc:	f002 fb98 	bl	8003200 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ESP12_PWR_GPIO_Port, ESP12_PWR_Pin, GPIO_PIN_RESET);
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000ad6:	4854      	ldr	r0, [pc, #336]	@ (8000c28 <MX_GPIO_Init+0x264>)
 8000ad8:	f002 fb92 	bl	8003200 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD_LATCH_Pin|T_CS_Pin|T_CLK_Pin, GPIO_PIN_RESET);
 8000adc:	2200      	movs	r2, #0
 8000ade:	f44f 71e0 	mov.w	r1, #448	@ 0x1c0
 8000ae2:	4852      	ldr	r0, [pc, #328]	@ (8000c2c <MX_GPIO_Init+0x268>)
 8000ae4:	f002 fb8c 	bl	8003200 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FSMC_BLK_GPIO_Port, FSMC_BLK_Pin, GPIO_PIN_RESET);
 8000ae8:	2200      	movs	r2, #0
 8000aea:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000aee:	4850      	ldr	r0, [pc, #320]	@ (8000c30 <MX_GPIO_Init+0x26c>)
 8000af0:	f002 fb86 	bl	8003200 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, GPIO_PIN_RESET);
 8000af4:	2200      	movs	r2, #0
 8000af6:	2108      	movs	r1, #8
 8000af8:	484e      	ldr	r0, [pc, #312]	@ (8000c34 <MX_GPIO_Init+0x270>)
 8000afa:	f002 fb81 	bl	8003200 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = DEBUG_LED_Pin|OUTPUT_Y0_Pin|OUTPUT_Y1_Pin;
 8000afe:	2370      	movs	r3, #112	@ 0x70
 8000b00:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b02:	2301      	movs	r3, #1
 8000b04:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b06:	2300      	movs	r3, #0
 8000b08:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000b0e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b12:	4619      	mov	r1, r3
 8000b14:	4842      	ldr	r0, [pc, #264]	@ (8000c20 <MX_GPIO_Init+0x25c>)
 8000b16:	f002 f9d7 	bl	8002ec8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = FSMC_RES_Pin|T_MOSI_Pin;
 8000b1a:	f44f 5308 	mov.w	r3, #8704	@ 0x2200
 8000b1e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b20:	2301      	movs	r3, #1
 8000b22:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b24:	2300      	movs	r3, #0
 8000b26:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b2c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b30:	4619      	mov	r1, r3
 8000b32:	483c      	ldr	r0, [pc, #240]	@ (8000c24 <MX_GPIO_Init+0x260>)
 8000b34:	f002 f9c8 	bl	8002ec8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ESP12_BUSY_Pin;
 8000b38:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000b3c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b42:	2300      	movs	r3, #0
 8000b44:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(ESP12_BUSY_GPIO_Port, &GPIO_InitStruct);
 8000b46:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b4a:	4619      	mov	r1, r3
 8000b4c:	4836      	ldr	r0, [pc, #216]	@ (8000c28 <MX_GPIO_Init+0x264>)
 8000b4e:	f002 f9bb 	bl	8002ec8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ESP12_PWR_Pin;
 8000b52:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000b56:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b58:	2301      	movs	r3, #1
 8000b5a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b60:	2300      	movs	r3, #0
 8000b62:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(ESP12_PWR_GPIO_Port, &GPIO_InitStruct);
 8000b64:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b68:	4619      	mov	r1, r3
 8000b6a:	482f      	ldr	r0, [pc, #188]	@ (8000c28 <MX_GPIO_Init+0x264>)
 8000b6c:	f002 f9ac 	bl	8002ec8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = INPUT_X0_Pin|INPUT_X1_Pin;
 8000b70:	23c0      	movs	r3, #192	@ 0xc0
 8000b72:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b74:	2300      	movs	r3, #0
 8000b76:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b78:	2300      	movs	r3, #0
 8000b7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b7c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b80:	4619      	mov	r1, r3
 8000b82:	482b      	ldr	r0, [pc, #172]	@ (8000c30 <MX_GPIO_Init+0x26c>)
 8000b84:	f002 f9a0 	bl	8002ec8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = INPUT_X2_Pin|INPUT_X3_Pin;
 8000b88:	2330      	movs	r3, #48	@ 0x30
 8000b8a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b90:	2300      	movs	r3, #0
 8000b92:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b94:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b98:	4619      	mov	r1, r3
 8000b9a:	4822      	ldr	r0, [pc, #136]	@ (8000c24 <MX_GPIO_Init+0x260>)
 8000b9c:	f002 f994 	bl	8002ec8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = LD_LATCH_Pin|T_CS_Pin|T_CLK_Pin;
 8000ba0:	f44f 73e0 	mov.w	r3, #448	@ 0x1c0
 8000ba4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ba6:	2301      	movs	r3, #1
 8000ba8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000baa:	2300      	movs	r3, #0
 8000bac:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000bb2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000bb6:	4619      	mov	r1, r3
 8000bb8:	481c      	ldr	r0, [pc, #112]	@ (8000c2c <MX_GPIO_Init+0x268>)
 8000bba:	f002 f985 	bl	8002ec8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = T_PEN_Pin|T_MISO_Pin;
 8000bbe:	f44f 5388 	mov.w	r3, #4352	@ 0x1100
 8000bc2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000bc8:	2301      	movs	r3, #1
 8000bca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bcc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000bd0:	4619      	mov	r1, r3
 8000bd2:	4814      	ldr	r0, [pc, #80]	@ (8000c24 <MX_GPIO_Init+0x260>)
 8000bd4:	f002 f978 	bl	8002ec8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FSMC_BLK_Pin;
 8000bd8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000bdc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bde:	2301      	movs	r3, #1
 8000be0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be2:	2300      	movs	r3, #0
 8000be4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000be6:	2300      	movs	r3, #0
 8000be8:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(FSMC_BLK_GPIO_Port, &GPIO_InitStruct);
 8000bea:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000bee:	4619      	mov	r1, r3
 8000bf0:	480f      	ldr	r0, [pc, #60]	@ (8000c30 <MX_GPIO_Init+0x26c>)
 8000bf2:	f002 f969 	bl	8002ec8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BTN_LOAD_Pin;
 8000bf6:	2308      	movs	r3, #8
 8000bf8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bfa:	2301      	movs	r3, #1
 8000bfc:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c02:	2300      	movs	r3, #0
 8000c04:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(BTN_LOAD_GPIO_Port, &GPIO_InitStruct);
 8000c06:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c0a:	4619      	mov	r1, r3
 8000c0c:	4809      	ldr	r0, [pc, #36]	@ (8000c34 <MX_GPIO_Init+0x270>)
 8000c0e:	f002 f95b 	bl	8002ec8 <HAL_GPIO_Init>

}
 8000c12:	bf00      	nop
 8000c14:	3738      	adds	r7, #56	@ 0x38
 8000c16:	46bd      	mov	sp, r7
 8000c18:	bd80      	pop	{r7, pc}
 8000c1a:	bf00      	nop
 8000c1c:	40023800 	.word	0x40023800
 8000c20:	40021000 	.word	0x40021000
 8000c24:	40020800 	.word	0x40020800
 8000c28:	40021400 	.word	0x40021400
 8000c2c:	40021800 	.word	0x40021800
 8000c30:	40020000 	.word	0x40020000
 8000c34:	40020c00 	.word	0x40020c00

08000c38 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000c3c:	4b12      	ldr	r3, [pc, #72]	@ (8000c88 <MX_I2C1_Init+0x50>)
 8000c3e:	4a13      	ldr	r2, [pc, #76]	@ (8000c8c <MX_I2C1_Init+0x54>)
 8000c40:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000c42:	4b11      	ldr	r3, [pc, #68]	@ (8000c88 <MX_I2C1_Init+0x50>)
 8000c44:	4a12      	ldr	r2, [pc, #72]	@ (8000c90 <MX_I2C1_Init+0x58>)
 8000c46:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000c48:	4b0f      	ldr	r3, [pc, #60]	@ (8000c88 <MX_I2C1_Init+0x50>)
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000c4e:	4b0e      	ldr	r3, [pc, #56]	@ (8000c88 <MX_I2C1_Init+0x50>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000c54:	4b0c      	ldr	r3, [pc, #48]	@ (8000c88 <MX_I2C1_Init+0x50>)
 8000c56:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000c5a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000c5c:	4b0a      	ldr	r3, [pc, #40]	@ (8000c88 <MX_I2C1_Init+0x50>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000c62:	4b09      	ldr	r3, [pc, #36]	@ (8000c88 <MX_I2C1_Init+0x50>)
 8000c64:	2200      	movs	r2, #0
 8000c66:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000c68:	4b07      	ldr	r3, [pc, #28]	@ (8000c88 <MX_I2C1_Init+0x50>)
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000c6e:	4b06      	ldr	r3, [pc, #24]	@ (8000c88 <MX_I2C1_Init+0x50>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000c74:	4804      	ldr	r0, [pc, #16]	@ (8000c88 <MX_I2C1_Init+0x50>)
 8000c76:	f002 faf7 	bl	8003268 <HAL_I2C_Init>
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d001      	beq.n	8000c84 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000c80:	f000 fd52 	bl	8001728 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000c84:	bf00      	nop
 8000c86:	bd80      	pop	{r7, pc}
 8000c88:	20000150 	.word	0x20000150
 8000c8c:	40005400 	.word	0x40005400
 8000c90:	000186a0 	.word	0x000186a0

08000c94 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b08a      	sub	sp, #40	@ 0x28
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c9c:	f107 0314 	add.w	r3, r7, #20
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	601a      	str	r2, [r3, #0]
 8000ca4:	605a      	str	r2, [r3, #4]
 8000ca6:	609a      	str	r2, [r3, #8]
 8000ca8:	60da      	str	r2, [r3, #12]
 8000caa:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	4a19      	ldr	r2, [pc, #100]	@ (8000d18 <HAL_I2C_MspInit+0x84>)
 8000cb2:	4293      	cmp	r3, r2
 8000cb4:	d12b      	bne.n	8000d0e <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	613b      	str	r3, [r7, #16]
 8000cba:	4b18      	ldr	r3, [pc, #96]	@ (8000d1c <HAL_I2C_MspInit+0x88>)
 8000cbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cbe:	4a17      	ldr	r2, [pc, #92]	@ (8000d1c <HAL_I2C_MspInit+0x88>)
 8000cc0:	f043 0302 	orr.w	r3, r3, #2
 8000cc4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cc6:	4b15      	ldr	r3, [pc, #84]	@ (8000d1c <HAL_I2C_MspInit+0x88>)
 8000cc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cca:	f003 0302 	and.w	r3, r3, #2
 8000cce:	613b      	str	r3, [r7, #16]
 8000cd0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000cd2:	23c0      	movs	r3, #192	@ 0xc0
 8000cd4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000cd6:	2312      	movs	r3, #18
 8000cd8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cde:	2303      	movs	r3, #3
 8000ce0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000ce2:	2304      	movs	r3, #4
 8000ce4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ce6:	f107 0314 	add.w	r3, r7, #20
 8000cea:	4619      	mov	r1, r3
 8000cec:	480c      	ldr	r0, [pc, #48]	@ (8000d20 <HAL_I2C_MspInit+0x8c>)
 8000cee:	f002 f8eb 	bl	8002ec8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	60fb      	str	r3, [r7, #12]
 8000cf6:	4b09      	ldr	r3, [pc, #36]	@ (8000d1c <HAL_I2C_MspInit+0x88>)
 8000cf8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cfa:	4a08      	ldr	r2, [pc, #32]	@ (8000d1c <HAL_I2C_MspInit+0x88>)
 8000cfc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000d00:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d02:	4b06      	ldr	r3, [pc, #24]	@ (8000d1c <HAL_I2C_MspInit+0x88>)
 8000d04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d06:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000d0a:	60fb      	str	r3, [r7, #12]
 8000d0c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000d0e:	bf00      	nop
 8000d10:	3728      	adds	r7, #40	@ 0x28
 8000d12:	46bd      	mov	sp, r7
 8000d14:	bd80      	pop	{r7, pc}
 8000d16:	bf00      	nop
 8000d18:	40005400 	.word	0x40005400
 8000d1c:	40023800 	.word	0x40023800
 8000d20:	40020400 	.word	0x40020400

08000d24 <LCD_WR_REG>:
unsigned char s[50];

_lcd_dev lcddev;

void LCD_WR_REG(uint16_t reg)
{
 8000d24:	b480      	push	{r7}
 8000d26:	b083      	sub	sp, #12
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_REG=reg;
 8000d2e:	4a04      	ldr	r2, [pc, #16]	@ (8000d40 <LCD_WR_REG+0x1c>)
 8000d30:	88fb      	ldrh	r3, [r7, #6]
 8000d32:	8013      	strh	r3, [r2, #0]
}
 8000d34:	bf00      	nop
 8000d36:	370c      	adds	r7, #12
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3e:	4770      	bx	lr
 8000d40:	600ffffe 	.word	0x600ffffe

08000d44 <LCD_WR_DATA>:

void LCD_WR_DATA(uint16_t data)
{
 8000d44:	b480      	push	{r7}
 8000d46:	b083      	sub	sp, #12
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_RAM=data;
 8000d4e:	4a04      	ldr	r2, [pc, #16]	@ (8000d60 <LCD_WR_DATA+0x1c>)
 8000d50:	88fb      	ldrh	r3, [r7, #6]
 8000d52:	8053      	strh	r3, [r2, #2]
}
 8000d54:	bf00      	nop
 8000d56:	370c      	adds	r7, #12
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5e:	4770      	bx	lr
 8000d60:	600ffffe 	.word	0x600ffffe

08000d64 <LCD_RD_DATA>:

uint16_t LCD_RD_DATA(void)
{
 8000d64:	b480      	push	{r7}
 8000d66:	b083      	sub	sp, #12
 8000d68:	af00      	add	r7, sp, #0
	__IO uint16_t ram;
	ram=LCD->LCD_RAM;
 8000d6a:	4b06      	ldr	r3, [pc, #24]	@ (8000d84 <LCD_RD_DATA+0x20>)
 8000d6c:	885b      	ldrh	r3, [r3, #2]
 8000d6e:	b29b      	uxth	r3, r3
 8000d70:	80fb      	strh	r3, [r7, #6]
	return ram;
 8000d72:	88fb      	ldrh	r3, [r7, #6]
 8000d74:	b29b      	uxth	r3, r3
}
 8000d76:	4618      	mov	r0, r3
 8000d78:	370c      	adds	r7, #12
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d80:	4770      	bx	lr
 8000d82:	bf00      	nop
 8000d84:	600ffffe 	.word	0x600ffffe

08000d88 <lcd_AddressSet>:


void lcd_AddressSet(uint16_t x1,uint16_t y1,uint16_t x2,uint16_t y2)
{
 8000d88:	b590      	push	{r4, r7, lr}
 8000d8a:	b083      	sub	sp, #12
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	4604      	mov	r4, r0
 8000d90:	4608      	mov	r0, r1
 8000d92:	4611      	mov	r1, r2
 8000d94:	461a      	mov	r2, r3
 8000d96:	4623      	mov	r3, r4
 8000d98:	80fb      	strh	r3, [r7, #6]
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	80bb      	strh	r3, [r7, #4]
 8000d9e:	460b      	mov	r3, r1
 8000da0:	807b      	strh	r3, [r7, #2]
 8000da2:	4613      	mov	r3, r2
 8000da4:	803b      	strh	r3, [r7, #0]
		LCD_WR_REG(0x2a);
 8000da6:	202a      	movs	r0, #42	@ 0x2a
 8000da8:	f7ff ffbc 	bl	8000d24 <LCD_WR_REG>
		LCD_WR_DATA(x1>>8);
 8000dac:	88fb      	ldrh	r3, [r7, #6]
 8000dae:	0a1b      	lsrs	r3, r3, #8
 8000db0:	b29b      	uxth	r3, r3
 8000db2:	4618      	mov	r0, r3
 8000db4:	f7ff ffc6 	bl	8000d44 <LCD_WR_DATA>
		LCD_WR_DATA(x1&0xff);
 8000db8:	88fb      	ldrh	r3, [r7, #6]
 8000dba:	b2db      	uxtb	r3, r3
 8000dbc:	b29b      	uxth	r3, r3
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	f7ff ffc0 	bl	8000d44 <LCD_WR_DATA>
		LCD_WR_DATA(x2>>8);
 8000dc4:	887b      	ldrh	r3, [r7, #2]
 8000dc6:	0a1b      	lsrs	r3, r3, #8
 8000dc8:	b29b      	uxth	r3, r3
 8000dca:	4618      	mov	r0, r3
 8000dcc:	f7ff ffba 	bl	8000d44 <LCD_WR_DATA>
		LCD_WR_DATA(x2&0xff);
 8000dd0:	887b      	ldrh	r3, [r7, #2]
 8000dd2:	b2db      	uxtb	r3, r3
 8000dd4:	b29b      	uxth	r3, r3
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	f7ff ffb4 	bl	8000d44 <LCD_WR_DATA>
		LCD_WR_REG(0x2b);
 8000ddc:	202b      	movs	r0, #43	@ 0x2b
 8000dde:	f7ff ffa1 	bl	8000d24 <LCD_WR_REG>
		LCD_WR_DATA(y1>>8);
 8000de2:	88bb      	ldrh	r3, [r7, #4]
 8000de4:	0a1b      	lsrs	r3, r3, #8
 8000de6:	b29b      	uxth	r3, r3
 8000de8:	4618      	mov	r0, r3
 8000dea:	f7ff ffab 	bl	8000d44 <LCD_WR_DATA>
		LCD_WR_DATA(y1&0xff);
 8000dee:	88bb      	ldrh	r3, [r7, #4]
 8000df0:	b2db      	uxtb	r3, r3
 8000df2:	b29b      	uxth	r3, r3
 8000df4:	4618      	mov	r0, r3
 8000df6:	f7ff ffa5 	bl	8000d44 <LCD_WR_DATA>
		LCD_WR_DATA(y2>>8);
 8000dfa:	883b      	ldrh	r3, [r7, #0]
 8000dfc:	0a1b      	lsrs	r3, r3, #8
 8000dfe:	b29b      	uxth	r3, r3
 8000e00:	4618      	mov	r0, r3
 8000e02:	f7ff ff9f 	bl	8000d44 <LCD_WR_DATA>
		LCD_WR_DATA(y2&0xff);
 8000e06:	883b      	ldrh	r3, [r7, #0]
 8000e08:	b2db      	uxtb	r3, r3
 8000e0a:	b29b      	uxth	r3, r3
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	f7ff ff99 	bl	8000d44 <LCD_WR_DATA>
		LCD_WR_REG(0x2c);
 8000e12:	202c      	movs	r0, #44	@ 0x2c
 8000e14:	f7ff ff86 	bl	8000d24 <LCD_WR_REG>
}
 8000e18:	bf00      	nop
 8000e1a:	370c      	adds	r7, #12
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	bd90      	pop	{r4, r7, pc}

08000e20 <lcd_Clear>:
  * @brief  Fill all pixels with a color
  * @param  color Color to fill the screen
  * @retval None
  */
void lcd_Clear(uint16_t color) //
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b084      	sub	sp, #16
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	4603      	mov	r3, r0
 8000e28:	80fb      	strh	r3, [r7, #6]
	uint16_t i,j;
	lcd_AddressSet(0,0,lcddev.width-1,lcddev.height-1);
 8000e2a:	4b15      	ldr	r3, [pc, #84]	@ (8000e80 <lcd_Clear+0x60>)
 8000e2c:	881b      	ldrh	r3, [r3, #0]
 8000e2e:	3b01      	subs	r3, #1
 8000e30:	b29a      	uxth	r2, r3
 8000e32:	4b13      	ldr	r3, [pc, #76]	@ (8000e80 <lcd_Clear+0x60>)
 8000e34:	885b      	ldrh	r3, [r3, #2]
 8000e36:	3b01      	subs	r3, #1
 8000e38:	b29b      	uxth	r3, r3
 8000e3a:	2100      	movs	r1, #0
 8000e3c:	2000      	movs	r0, #0
 8000e3e:	f7ff ffa3 	bl	8000d88 <lcd_AddressSet>
	for(i=0;i<lcddev.width;i++)
 8000e42:	2300      	movs	r3, #0
 8000e44:	81fb      	strh	r3, [r7, #14]
 8000e46:	e011      	b.n	8000e6c <lcd_Clear+0x4c>
	{
		for(j=0;j<lcddev.height;j++)
 8000e48:	2300      	movs	r3, #0
 8000e4a:	81bb      	strh	r3, [r7, #12]
 8000e4c:	e006      	b.n	8000e5c <lcd_Clear+0x3c>
		{
			LCD_WR_DATA(color);
 8000e4e:	88fb      	ldrh	r3, [r7, #6]
 8000e50:	4618      	mov	r0, r3
 8000e52:	f7ff ff77 	bl	8000d44 <LCD_WR_DATA>
		for(j=0;j<lcddev.height;j++)
 8000e56:	89bb      	ldrh	r3, [r7, #12]
 8000e58:	3301      	adds	r3, #1
 8000e5a:	81bb      	strh	r3, [r7, #12]
 8000e5c:	4b08      	ldr	r3, [pc, #32]	@ (8000e80 <lcd_Clear+0x60>)
 8000e5e:	885b      	ldrh	r3, [r3, #2]
 8000e60:	89ba      	ldrh	r2, [r7, #12]
 8000e62:	429a      	cmp	r2, r3
 8000e64:	d3f3      	bcc.n	8000e4e <lcd_Clear+0x2e>
	for(i=0;i<lcddev.width;i++)
 8000e66:	89fb      	ldrh	r3, [r7, #14]
 8000e68:	3301      	adds	r3, #1
 8000e6a:	81fb      	strh	r3, [r7, #14]
 8000e6c:	4b04      	ldr	r3, [pc, #16]	@ (8000e80 <lcd_Clear+0x60>)
 8000e6e:	881b      	ldrh	r3, [r3, #0]
 8000e70:	89fa      	ldrh	r2, [r7, #14]
 8000e72:	429a      	cmp	r2, r3
 8000e74:	d3e8      	bcc.n	8000e48 <lcd_Clear+0x28>
		}
	}
}
 8000e76:	bf00      	nop
 8000e78:	bf00      	nop
 8000e7a:	3710      	adds	r7, #16
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	bd80      	pop	{r7, pc}
 8000e80:	200001a4 	.word	0x200001a4

08000e84 <lcd_DrawPoint>:
  * @param  y Y coordinate
  * @param  color Color to fill
  * @retval None
  */
void lcd_DrawPoint(uint16_t x,uint16_t y,uint16_t color) // 1 ddieemr anhr
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b082      	sub	sp, #8
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	80fb      	strh	r3, [r7, #6]
 8000e8e:	460b      	mov	r3, r1
 8000e90:	80bb      	strh	r3, [r7, #4]
 8000e92:	4613      	mov	r3, r2
 8000e94:	807b      	strh	r3, [r7, #2]
	lcd_AddressSet(x,y,x,y);//ÉèÖÃ¹â±êÎ»ÖÃ
 8000e96:	88bb      	ldrh	r3, [r7, #4]
 8000e98:	88fa      	ldrh	r2, [r7, #6]
 8000e9a:	88b9      	ldrh	r1, [r7, #4]
 8000e9c:	88f8      	ldrh	r0, [r7, #6]
 8000e9e:	f7ff ff73 	bl	8000d88 <lcd_AddressSet>
	LCD_WR_DATA(color);
 8000ea2:	887b      	ldrh	r3, [r7, #2]
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	f7ff ff4d 	bl	8000d44 <LCD_WR_DATA>
}
 8000eaa:	bf00      	nop
 8000eac:	3708      	adds	r7, #8
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bd80      	pop	{r7, pc}
	...

08000eb4 <lcd_ShowChar>:
	lcd_DrawLine(x1,y2,x2,y2,color);
	lcd_DrawLine(x2,y1,x2,y2,color);
}

void lcd_ShowChar(uint16_t x,uint16_t y,uint8_t character,uint16_t fc,uint16_t bc,uint8_t sizey,uint8_t mode) // 1ky tu size = 12 16 24 32, fc: mau chuw, bc, mauf neefn, mode: hien neen
{
 8000eb4:	b590      	push	{r4, r7, lr}
 8000eb6:	b087      	sub	sp, #28
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	4604      	mov	r4, r0
 8000ebc:	4608      	mov	r0, r1
 8000ebe:	4611      	mov	r1, r2
 8000ec0:	461a      	mov	r2, r3
 8000ec2:	4623      	mov	r3, r4
 8000ec4:	80fb      	strh	r3, [r7, #6]
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	80bb      	strh	r3, [r7, #4]
 8000eca:	460b      	mov	r3, r1
 8000ecc:	70fb      	strb	r3, [r7, #3]
 8000ece:	4613      	mov	r3, r2
 8000ed0:	803b      	strh	r3, [r7, #0]
	uint8_t temp,sizex,t,m=0;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	757b      	strb	r3, [r7, #21]
	uint16_t i,TypefaceNum;
	uint16_t x0=x;
 8000ed6:	88fb      	ldrh	r3, [r7, #6]
 8000ed8:	823b      	strh	r3, [r7, #16]
	sizex=sizey/2;
 8000eda:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8000ede:	085b      	lsrs	r3, r3, #1
 8000ee0:	73fb      	strb	r3, [r7, #15]
	TypefaceNum=(sizex/8+((sizex%8)?1:0))*sizey;
 8000ee2:	7bfb      	ldrb	r3, [r7, #15]
 8000ee4:	08db      	lsrs	r3, r3, #3
 8000ee6:	b2db      	uxtb	r3, r3
 8000ee8:	461a      	mov	r2, r3
 8000eea:	7bfb      	ldrb	r3, [r7, #15]
 8000eec:	f003 0307 	and.w	r3, r3, #7
 8000ef0:	b2db      	uxtb	r3, r3
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	bf14      	ite	ne
 8000ef6:	2301      	movne	r3, #1
 8000ef8:	2300      	moveq	r3, #0
 8000efa:	b2db      	uxtb	r3, r3
 8000efc:	4413      	add	r3, r2
 8000efe:	b29a      	uxth	r2, r3
 8000f00:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8000f04:	b29b      	uxth	r3, r3
 8000f06:	fb12 f303 	smulbb	r3, r2, r3
 8000f0a:	81bb      	strh	r3, [r7, #12]
	character=character-' ';
 8000f0c:	78fb      	ldrb	r3, [r7, #3]
 8000f0e:	3b20      	subs	r3, #32
 8000f10:	70fb      	strb	r3, [r7, #3]
	lcd_AddressSet(x,y,x+sizex-1,y+sizey-1);
 8000f12:	7bfb      	ldrb	r3, [r7, #15]
 8000f14:	b29a      	uxth	r2, r3
 8000f16:	88fb      	ldrh	r3, [r7, #6]
 8000f18:	4413      	add	r3, r2
 8000f1a:	b29b      	uxth	r3, r3
 8000f1c:	3b01      	subs	r3, #1
 8000f1e:	b29c      	uxth	r4, r3
 8000f20:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8000f24:	b29a      	uxth	r2, r3
 8000f26:	88bb      	ldrh	r3, [r7, #4]
 8000f28:	4413      	add	r3, r2
 8000f2a:	b29b      	uxth	r3, r3
 8000f2c:	3b01      	subs	r3, #1
 8000f2e:	b29b      	uxth	r3, r3
 8000f30:	88b9      	ldrh	r1, [r7, #4]
 8000f32:	88f8      	ldrh	r0, [r7, #6]
 8000f34:	4622      	mov	r2, r4
 8000f36:	f7ff ff27 	bl	8000d88 <lcd_AddressSet>
	for(i=0;i<TypefaceNum;i++)
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	827b      	strh	r3, [r7, #18]
 8000f3e:	e07a      	b.n	8001036 <lcd_ShowChar+0x182>
	{
		if(sizey==12);
 8000f40:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8000f44:	2b0c      	cmp	r3, #12
 8000f46:	d028      	beq.n	8000f9a <lcd_ShowChar+0xe6>
		else if(sizey==16)temp=ascii_1608[character][i];
 8000f48:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8000f4c:	2b10      	cmp	r3, #16
 8000f4e:	d108      	bne.n	8000f62 <lcd_ShowChar+0xae>
 8000f50:	78fa      	ldrb	r2, [r7, #3]
 8000f52:	8a7b      	ldrh	r3, [r7, #18]
 8000f54:	493c      	ldr	r1, [pc, #240]	@ (8001048 <lcd_ShowChar+0x194>)
 8000f56:	0112      	lsls	r2, r2, #4
 8000f58:	440a      	add	r2, r1
 8000f5a:	4413      	add	r3, r2
 8000f5c:	781b      	ldrb	r3, [r3, #0]
 8000f5e:	75fb      	strb	r3, [r7, #23]
 8000f60:	e01b      	b.n	8000f9a <lcd_ShowChar+0xe6>
		else if(sizey==24)temp=ascii_2412[character][i];
 8000f62:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8000f66:	2b18      	cmp	r3, #24
 8000f68:	d10b      	bne.n	8000f82 <lcd_ShowChar+0xce>
 8000f6a:	78fa      	ldrb	r2, [r7, #3]
 8000f6c:	8a79      	ldrh	r1, [r7, #18]
 8000f6e:	4837      	ldr	r0, [pc, #220]	@ (800104c <lcd_ShowChar+0x198>)
 8000f70:	4613      	mov	r3, r2
 8000f72:	005b      	lsls	r3, r3, #1
 8000f74:	4413      	add	r3, r2
 8000f76:	011b      	lsls	r3, r3, #4
 8000f78:	4403      	add	r3, r0
 8000f7a:	440b      	add	r3, r1
 8000f7c:	781b      	ldrb	r3, [r3, #0]
 8000f7e:	75fb      	strb	r3, [r7, #23]
 8000f80:	e00b      	b.n	8000f9a <lcd_ShowChar+0xe6>
		else if(sizey==32)temp=ascii_3216[character][i];
 8000f82:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8000f86:	2b20      	cmp	r3, #32
 8000f88:	d15a      	bne.n	8001040 <lcd_ShowChar+0x18c>
 8000f8a:	78fa      	ldrb	r2, [r7, #3]
 8000f8c:	8a7b      	ldrh	r3, [r7, #18]
 8000f8e:	4930      	ldr	r1, [pc, #192]	@ (8001050 <lcd_ShowChar+0x19c>)
 8000f90:	0192      	lsls	r2, r2, #6
 8000f92:	440a      	add	r2, r1
 8000f94:	4413      	add	r3, r2
 8000f96:	781b      	ldrb	r3, [r3, #0]
 8000f98:	75fb      	strb	r3, [r7, #23]
		else return;
		for(t=0;t<8;t++)
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	75bb      	strb	r3, [r7, #22]
 8000f9e:	e044      	b.n	800102a <lcd_ShowChar+0x176>
		{
			if(!mode)
 8000fa0:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d120      	bne.n	8000fea <lcd_ShowChar+0x136>
			{
				if(temp&(0x01<<t))LCD_WR_DATA(fc);
 8000fa8:	7dfa      	ldrb	r2, [r7, #23]
 8000faa:	7dbb      	ldrb	r3, [r7, #22]
 8000fac:	fa42 f303 	asr.w	r3, r2, r3
 8000fb0:	f003 0301 	and.w	r3, r3, #1
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d004      	beq.n	8000fc2 <lcd_ShowChar+0x10e>
 8000fb8:	883b      	ldrh	r3, [r7, #0]
 8000fba:	4618      	mov	r0, r3
 8000fbc:	f7ff fec2 	bl	8000d44 <LCD_WR_DATA>
 8000fc0:	e003      	b.n	8000fca <lcd_ShowChar+0x116>
				else LCD_WR_DATA(bc);
 8000fc2:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	f7ff febd 	bl	8000d44 <LCD_WR_DATA>
				m++;
 8000fca:	7d7b      	ldrb	r3, [r7, #21]
 8000fcc:	3301      	adds	r3, #1
 8000fce:	757b      	strb	r3, [r7, #21]
				if(m%sizex==0)
 8000fd0:	7d7b      	ldrb	r3, [r7, #21]
 8000fd2:	7bfa      	ldrb	r2, [r7, #15]
 8000fd4:	fbb3 f1f2 	udiv	r1, r3, r2
 8000fd8:	fb01 f202 	mul.w	r2, r1, r2
 8000fdc:	1a9b      	subs	r3, r3, r2
 8000fde:	b2db      	uxtb	r3, r3
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d11f      	bne.n	8001024 <lcd_ShowChar+0x170>
				{
					m=0;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	757b      	strb	r3, [r7, #21]
					break;
 8000fe8:	e022      	b.n	8001030 <lcd_ShowChar+0x17c>
				}
			}
			else
			{
				if(temp&(0x01<<t))lcd_DrawPoint(x,y,fc);
 8000fea:	7dfa      	ldrb	r2, [r7, #23]
 8000fec:	7dbb      	ldrb	r3, [r7, #22]
 8000fee:	fa42 f303 	asr.w	r3, r2, r3
 8000ff2:	f003 0301 	and.w	r3, r3, #1
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d005      	beq.n	8001006 <lcd_ShowChar+0x152>
 8000ffa:	883a      	ldrh	r2, [r7, #0]
 8000ffc:	88b9      	ldrh	r1, [r7, #4]
 8000ffe:	88fb      	ldrh	r3, [r7, #6]
 8001000:	4618      	mov	r0, r3
 8001002:	f7ff ff3f 	bl	8000e84 <lcd_DrawPoint>
				x++;
 8001006:	88fb      	ldrh	r3, [r7, #6]
 8001008:	3301      	adds	r3, #1
 800100a:	80fb      	strh	r3, [r7, #6]
				if((x-x0)==sizex)
 800100c:	88fa      	ldrh	r2, [r7, #6]
 800100e:	8a3b      	ldrh	r3, [r7, #16]
 8001010:	1ad2      	subs	r2, r2, r3
 8001012:	7bfb      	ldrb	r3, [r7, #15]
 8001014:	429a      	cmp	r2, r3
 8001016:	d105      	bne.n	8001024 <lcd_ShowChar+0x170>
				{
					x=x0;
 8001018:	8a3b      	ldrh	r3, [r7, #16]
 800101a:	80fb      	strh	r3, [r7, #6]
					y++;
 800101c:	88bb      	ldrh	r3, [r7, #4]
 800101e:	3301      	adds	r3, #1
 8001020:	80bb      	strh	r3, [r7, #4]
					break;
 8001022:	e005      	b.n	8001030 <lcd_ShowChar+0x17c>
		for(t=0;t<8;t++)
 8001024:	7dbb      	ldrb	r3, [r7, #22]
 8001026:	3301      	adds	r3, #1
 8001028:	75bb      	strb	r3, [r7, #22]
 800102a:	7dbb      	ldrb	r3, [r7, #22]
 800102c:	2b07      	cmp	r3, #7
 800102e:	d9b7      	bls.n	8000fa0 <lcd_ShowChar+0xec>
	for(i=0;i<TypefaceNum;i++)
 8001030:	8a7b      	ldrh	r3, [r7, #18]
 8001032:	3301      	adds	r3, #1
 8001034:	827b      	strh	r3, [r7, #18]
 8001036:	8a7a      	ldrh	r2, [r7, #18]
 8001038:	89bb      	ldrh	r3, [r7, #12]
 800103a:	429a      	cmp	r2, r3
 800103c:	d380      	bcc.n	8000f40 <lcd_ShowChar+0x8c>
 800103e:	e000      	b.n	8001042 <lcd_ShowChar+0x18e>
		else return;
 8001040:	bf00      	nop
				}
			}
		}
	}
}
 8001042:	371c      	adds	r7, #28
 8001044:	46bd      	mov	sp, r7
 8001046:	bd90      	pop	{r4, r7, pc}
 8001048:	08006c6c 	.word	0x08006c6c
 800104c:	0800725c 	.word	0x0800725c
 8001050:	0800842c 	.word	0x0800842c

08001054 <lcd_SetDir>:
	}
}


void lcd_SetDir(uint8_t dir) //chinh huong man hinh
{
 8001054:	b480      	push	{r7}
 8001056:	b083      	sub	sp, #12
 8001058:	af00      	add	r7, sp, #0
 800105a:	4603      	mov	r3, r0
 800105c:	71fb      	strb	r3, [r7, #7]
	if((dir>>4)%4)
 800105e:	79fb      	ldrb	r3, [r7, #7]
 8001060:	091b      	lsrs	r3, r3, #4
 8001062:	b2db      	uxtb	r3, r3
 8001064:	f003 0303 	and.w	r3, r3, #3
 8001068:	b2db      	uxtb	r3, r3
 800106a:	2b00      	cmp	r3, #0
 800106c:	d007      	beq.n	800107e <lcd_SetDir+0x2a>
	{
		lcddev.width=320;
 800106e:	4b0a      	ldr	r3, [pc, #40]	@ (8001098 <lcd_SetDir+0x44>)
 8001070:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8001074:	801a      	strh	r2, [r3, #0]
		lcddev.height=240;
 8001076:	4b08      	ldr	r3, [pc, #32]	@ (8001098 <lcd_SetDir+0x44>)
 8001078:	22f0      	movs	r2, #240	@ 0xf0
 800107a:	805a      	strh	r2, [r3, #2]
	}else
	{
		lcddev.width=240;
		lcddev.height=320;
	}
}
 800107c:	e006      	b.n	800108c <lcd_SetDir+0x38>
		lcddev.width=240;
 800107e:	4b06      	ldr	r3, [pc, #24]	@ (8001098 <lcd_SetDir+0x44>)
 8001080:	22f0      	movs	r2, #240	@ 0xf0
 8001082:	801a      	strh	r2, [r3, #0]
		lcddev.height=320;
 8001084:	4b04      	ldr	r3, [pc, #16]	@ (8001098 <lcd_SetDir+0x44>)
 8001086:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 800108a:	805a      	strh	r2, [r3, #2]
}
 800108c:	bf00      	nop
 800108e:	370c      	adds	r7, #12
 8001090:	46bd      	mov	sp, r7
 8001092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001096:	4770      	bx	lr
 8001098:	200001a4 	.word	0x200001a4

0800109c <lcd_init>:


void lcd_init(void)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_RESET);
 80010a0:	2200      	movs	r2, #0
 80010a2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80010a6:	48aa      	ldr	r0, [pc, #680]	@ (8001350 <lcd_init+0x2b4>)
 80010a8:	f002 f8aa 	bl	8003200 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 80010ac:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80010b0:	f000 fff6 	bl	80020a0 <HAL_Delay>
	HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_SET);
 80010b4:	2201      	movs	r2, #1
 80010b6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80010ba:	48a5      	ldr	r0, [pc, #660]	@ (8001350 <lcd_init+0x2b4>)
 80010bc:	f002 f8a0 	bl	8003200 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 80010c0:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80010c4:	f000 ffec 	bl	80020a0 <HAL_Delay>
	lcd_SetDir(DFT_SCAN_DIR);
 80010c8:	2000      	movs	r0, #0
 80010ca:	f7ff ffc3 	bl	8001054 <lcd_SetDir>
	LCD_WR_REG(0XD3);
 80010ce:	20d3      	movs	r0, #211	@ 0xd3
 80010d0:	f7ff fe28 	bl	8000d24 <LCD_WR_REG>
	lcddev.id=LCD_RD_DATA();	//dummy read
 80010d4:	f7ff fe46 	bl	8000d64 <LCD_RD_DATA>
 80010d8:	4603      	mov	r3, r0
 80010da:	461a      	mov	r2, r3
 80010dc:	4b9d      	ldr	r3, [pc, #628]	@ (8001354 <lcd_init+0x2b8>)
 80010de:	809a      	strh	r2, [r3, #4]
	lcddev.id=LCD_RD_DATA();
 80010e0:	f7ff fe40 	bl	8000d64 <LCD_RD_DATA>
 80010e4:	4603      	mov	r3, r0
 80010e6:	461a      	mov	r2, r3
 80010e8:	4b9a      	ldr	r3, [pc, #616]	@ (8001354 <lcd_init+0x2b8>)
 80010ea:	809a      	strh	r2, [r3, #4]
	lcddev.id=LCD_RD_DATA();
 80010ec:	f7ff fe3a 	bl	8000d64 <LCD_RD_DATA>
 80010f0:	4603      	mov	r3, r0
 80010f2:	461a      	mov	r2, r3
 80010f4:	4b97      	ldr	r3, [pc, #604]	@ (8001354 <lcd_init+0x2b8>)
 80010f6:	809a      	strh	r2, [r3, #4]
	lcddev.id<<=8;
 80010f8:	4b96      	ldr	r3, [pc, #600]	@ (8001354 <lcd_init+0x2b8>)
 80010fa:	889b      	ldrh	r3, [r3, #4]
 80010fc:	021b      	lsls	r3, r3, #8
 80010fe:	b29a      	uxth	r2, r3
 8001100:	4b94      	ldr	r3, [pc, #592]	@ (8001354 <lcd_init+0x2b8>)
 8001102:	809a      	strh	r2, [r3, #4]
	lcddev.id|=LCD_RD_DATA();
 8001104:	f7ff fe2e 	bl	8000d64 <LCD_RD_DATA>
 8001108:	4603      	mov	r3, r0
 800110a:	461a      	mov	r2, r3
 800110c:	4b91      	ldr	r3, [pc, #580]	@ (8001354 <lcd_init+0x2b8>)
 800110e:	889b      	ldrh	r3, [r3, #4]
 8001110:	4313      	orrs	r3, r2
 8001112:	b29a      	uxth	r2, r3
 8001114:	4b8f      	ldr	r3, [pc, #572]	@ (8001354 <lcd_init+0x2b8>)
 8001116:	809a      	strh	r2, [r3, #4]

	LCD_WR_REG(0xCF);
 8001118:	20cf      	movs	r0, #207	@ 0xcf
 800111a:	f7ff fe03 	bl	8000d24 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 800111e:	2000      	movs	r0, #0
 8001120:	f7ff fe10 	bl	8000d44 <LCD_WR_DATA>
	LCD_WR_DATA(0xC1);
 8001124:	20c1      	movs	r0, #193	@ 0xc1
 8001126:	f7ff fe0d 	bl	8000d44 <LCD_WR_DATA>
	LCD_WR_DATA(0X30);
 800112a:	2030      	movs	r0, #48	@ 0x30
 800112c:	f7ff fe0a 	bl	8000d44 <LCD_WR_DATA>
	LCD_WR_REG(0xED);
 8001130:	20ed      	movs	r0, #237	@ 0xed
 8001132:	f7ff fdf7 	bl	8000d24 <LCD_WR_REG>
	LCD_WR_DATA(0x64);
 8001136:	2064      	movs	r0, #100	@ 0x64
 8001138:	f7ff fe04 	bl	8000d44 <LCD_WR_DATA>
	LCD_WR_DATA(0x03);
 800113c:	2003      	movs	r0, #3
 800113e:	f7ff fe01 	bl	8000d44 <LCD_WR_DATA>
	LCD_WR_DATA(0X12);
 8001142:	2012      	movs	r0, #18
 8001144:	f7ff fdfe 	bl	8000d44 <LCD_WR_DATA>
	LCD_WR_DATA(0X81);
 8001148:	2081      	movs	r0, #129	@ 0x81
 800114a:	f7ff fdfb 	bl	8000d44 <LCD_WR_DATA>
	LCD_WR_REG(0xE8);
 800114e:	20e8      	movs	r0, #232	@ 0xe8
 8001150:	f7ff fde8 	bl	8000d24 <LCD_WR_REG>
	LCD_WR_DATA(0x85);
 8001154:	2085      	movs	r0, #133	@ 0x85
 8001156:	f7ff fdf5 	bl	8000d44 <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 800115a:	2010      	movs	r0, #16
 800115c:	f7ff fdf2 	bl	8000d44 <LCD_WR_DATA>
	LCD_WR_DATA(0x7A);
 8001160:	207a      	movs	r0, #122	@ 0x7a
 8001162:	f7ff fdef 	bl	8000d44 <LCD_WR_DATA>
	LCD_WR_REG(0xCB);
 8001166:	20cb      	movs	r0, #203	@ 0xcb
 8001168:	f7ff fddc 	bl	8000d24 <LCD_WR_REG>
	LCD_WR_DATA(0x39);
 800116c:	2039      	movs	r0, #57	@ 0x39
 800116e:	f7ff fde9 	bl	8000d44 <LCD_WR_DATA>
	LCD_WR_DATA(0x2C);
 8001172:	202c      	movs	r0, #44	@ 0x2c
 8001174:	f7ff fde6 	bl	8000d44 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001178:	2000      	movs	r0, #0
 800117a:	f7ff fde3 	bl	8000d44 <LCD_WR_DATA>
	LCD_WR_DATA(0x34);
 800117e:	2034      	movs	r0, #52	@ 0x34
 8001180:	f7ff fde0 	bl	8000d44 <LCD_WR_DATA>
	LCD_WR_DATA(0x02);
 8001184:	2002      	movs	r0, #2
 8001186:	f7ff fddd 	bl	8000d44 <LCD_WR_DATA>
	LCD_WR_REG(0xF7);
 800118a:	20f7      	movs	r0, #247	@ 0xf7
 800118c:	f7ff fdca 	bl	8000d24 <LCD_WR_REG>
	LCD_WR_DATA(0x20);
 8001190:	2020      	movs	r0, #32
 8001192:	f7ff fdd7 	bl	8000d44 <LCD_WR_DATA>
	LCD_WR_REG(0xEA);
 8001196:	20ea      	movs	r0, #234	@ 0xea
 8001198:	f7ff fdc4 	bl	8000d24 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 800119c:	2000      	movs	r0, #0
 800119e:	f7ff fdd1 	bl	8000d44 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80011a2:	2000      	movs	r0, #0
 80011a4:	f7ff fdce 	bl	8000d44 <LCD_WR_DATA>
	LCD_WR_REG(0xC0);    //Power control
 80011a8:	20c0      	movs	r0, #192	@ 0xc0
 80011aa:	f7ff fdbb 	bl	8000d24 <LCD_WR_REG>
	LCD_WR_DATA(0x1B);   //VRH[5:0]
 80011ae:	201b      	movs	r0, #27
 80011b0:	f7ff fdc8 	bl	8000d44 <LCD_WR_DATA>
	LCD_WR_REG(0xC1);    //Power control
 80011b4:	20c1      	movs	r0, #193	@ 0xc1
 80011b6:	f7ff fdb5 	bl	8000d24 <LCD_WR_REG>
	LCD_WR_DATA(0x01);   //SAP[2:0];BT[3:0]
 80011ba:	2001      	movs	r0, #1
 80011bc:	f7ff fdc2 	bl	8000d44 <LCD_WR_DATA>
	LCD_WR_REG(0xC5);    //VCM control
 80011c0:	20c5      	movs	r0, #197	@ 0xc5
 80011c2:	f7ff fdaf 	bl	8000d24 <LCD_WR_REG>
	LCD_WR_DATA(0x30); 	 //3F
 80011c6:	2030      	movs	r0, #48	@ 0x30
 80011c8:	f7ff fdbc 	bl	8000d44 <LCD_WR_DATA>
	LCD_WR_DATA(0x30); 	 //3C
 80011cc:	2030      	movs	r0, #48	@ 0x30
 80011ce:	f7ff fdb9 	bl	8000d44 <LCD_WR_DATA>
	LCD_WR_REG(0xC7);    //VCM control2
 80011d2:	20c7      	movs	r0, #199	@ 0xc7
 80011d4:	f7ff fda6 	bl	8000d24 <LCD_WR_REG>
	LCD_WR_DATA(0XB7);
 80011d8:	20b7      	movs	r0, #183	@ 0xb7
 80011da:	f7ff fdb3 	bl	8000d44 <LCD_WR_DATA>
	LCD_WR_REG(0x36);    // Memory Access Control
 80011de:	2036      	movs	r0, #54	@ 0x36
 80011e0:	f7ff fda0 	bl	8000d24 <LCD_WR_REG>

	LCD_WR_DATA(0x08|DFT_SCAN_DIR);
 80011e4:	2008      	movs	r0, #8
 80011e6:	f7ff fdad 	bl	8000d44 <LCD_WR_DATA>
	LCD_WR_REG(0x3A);
 80011ea:	203a      	movs	r0, #58	@ 0x3a
 80011ec:	f7ff fd9a 	bl	8000d24 <LCD_WR_REG>
	LCD_WR_DATA(0x55);
 80011f0:	2055      	movs	r0, #85	@ 0x55
 80011f2:	f7ff fda7 	bl	8000d44 <LCD_WR_DATA>
	LCD_WR_REG(0xB1);
 80011f6:	20b1      	movs	r0, #177	@ 0xb1
 80011f8:	f7ff fd94 	bl	8000d24 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 80011fc:	2000      	movs	r0, #0
 80011fe:	f7ff fda1 	bl	8000d44 <LCD_WR_DATA>
	LCD_WR_DATA(0x1A);
 8001202:	201a      	movs	r0, #26
 8001204:	f7ff fd9e 	bl	8000d44 <LCD_WR_DATA>
	LCD_WR_REG(0xB6);    // Display Function Control
 8001208:	20b6      	movs	r0, #182	@ 0xb6
 800120a:	f7ff fd8b 	bl	8000d24 <LCD_WR_REG>
	LCD_WR_DATA(0x0A);
 800120e:	200a      	movs	r0, #10
 8001210:	f7ff fd98 	bl	8000d44 <LCD_WR_DATA>
	LCD_WR_DATA(0xA2);
 8001214:	20a2      	movs	r0, #162	@ 0xa2
 8001216:	f7ff fd95 	bl	8000d44 <LCD_WR_DATA>
	LCD_WR_REG(0xF2);    // 3Gamma Function Disable
 800121a:	20f2      	movs	r0, #242	@ 0xf2
 800121c:	f7ff fd82 	bl	8000d24 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001220:	2000      	movs	r0, #0
 8001222:	f7ff fd8f 	bl	8000d44 <LCD_WR_DATA>
	LCD_WR_REG(0x26);    //Gamma curve selected
 8001226:	2026      	movs	r0, #38	@ 0x26
 8001228:	f7ff fd7c 	bl	8000d24 <LCD_WR_REG>
	LCD_WR_DATA(0x01);
 800122c:	2001      	movs	r0, #1
 800122e:	f7ff fd89 	bl	8000d44 <LCD_WR_DATA>
	LCD_WR_REG(0xE0);    //Set Gamma
 8001232:	20e0      	movs	r0, #224	@ 0xe0
 8001234:	f7ff fd76 	bl	8000d24 <LCD_WR_REG>
	LCD_WR_DATA(0x0F);
 8001238:	200f      	movs	r0, #15
 800123a:	f7ff fd83 	bl	8000d44 <LCD_WR_DATA>
	LCD_WR_DATA(0x2A);
 800123e:	202a      	movs	r0, #42	@ 0x2a
 8001240:	f7ff fd80 	bl	8000d44 <LCD_WR_DATA>
	LCD_WR_DATA(0x28);
 8001244:	2028      	movs	r0, #40	@ 0x28
 8001246:	f7ff fd7d 	bl	8000d44 <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 800124a:	2008      	movs	r0, #8
 800124c:	f7ff fd7a 	bl	8000d44 <LCD_WR_DATA>
	LCD_WR_DATA(0x0E);
 8001250:	200e      	movs	r0, #14
 8001252:	f7ff fd77 	bl	8000d44 <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 8001256:	2008      	movs	r0, #8
 8001258:	f7ff fd74 	bl	8000d44 <LCD_WR_DATA>
	LCD_WR_DATA(0x54);
 800125c:	2054      	movs	r0, #84	@ 0x54
 800125e:	f7ff fd71 	bl	8000d44 <LCD_WR_DATA>
	LCD_WR_DATA(0XA9);
 8001262:	20a9      	movs	r0, #169	@ 0xa9
 8001264:	f7ff fd6e 	bl	8000d44 <LCD_WR_DATA>
	LCD_WR_DATA(0x43);
 8001268:	2043      	movs	r0, #67	@ 0x43
 800126a:	f7ff fd6b 	bl	8000d44 <LCD_WR_DATA>
	LCD_WR_DATA(0x0A);
 800126e:	200a      	movs	r0, #10
 8001270:	f7ff fd68 	bl	8000d44 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 8001274:	200f      	movs	r0, #15
 8001276:	f7ff fd65 	bl	8000d44 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 800127a:	2000      	movs	r0, #0
 800127c:	f7ff fd62 	bl	8000d44 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001280:	2000      	movs	r0, #0
 8001282:	f7ff fd5f 	bl	8000d44 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001286:	2000      	movs	r0, #0
 8001288:	f7ff fd5c 	bl	8000d44 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 800128c:	2000      	movs	r0, #0
 800128e:	f7ff fd59 	bl	8000d44 <LCD_WR_DATA>
	LCD_WR_REG(0XE1);    //Set Gamma
 8001292:	20e1      	movs	r0, #225	@ 0xe1
 8001294:	f7ff fd46 	bl	8000d24 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001298:	2000      	movs	r0, #0
 800129a:	f7ff fd53 	bl	8000d44 <LCD_WR_DATA>
	LCD_WR_DATA(0x15);
 800129e:	2015      	movs	r0, #21
 80012a0:	f7ff fd50 	bl	8000d44 <LCD_WR_DATA>
	LCD_WR_DATA(0x17);
 80012a4:	2017      	movs	r0, #23
 80012a6:	f7ff fd4d 	bl	8000d44 <LCD_WR_DATA>
	LCD_WR_DATA(0x07);
 80012aa:	2007      	movs	r0, #7
 80012ac:	f7ff fd4a 	bl	8000d44 <LCD_WR_DATA>
	LCD_WR_DATA(0x11);
 80012b0:	2011      	movs	r0, #17
 80012b2:	f7ff fd47 	bl	8000d44 <LCD_WR_DATA>
	LCD_WR_DATA(0x06);
 80012b6:	2006      	movs	r0, #6
 80012b8:	f7ff fd44 	bl	8000d44 <LCD_WR_DATA>
	LCD_WR_DATA(0x2B);
 80012bc:	202b      	movs	r0, #43	@ 0x2b
 80012be:	f7ff fd41 	bl	8000d44 <LCD_WR_DATA>
	LCD_WR_DATA(0x56);
 80012c2:	2056      	movs	r0, #86	@ 0x56
 80012c4:	f7ff fd3e 	bl	8000d44 <LCD_WR_DATA>
	LCD_WR_DATA(0x3C);
 80012c8:	203c      	movs	r0, #60	@ 0x3c
 80012ca:	f7ff fd3b 	bl	8000d44 <LCD_WR_DATA>
	LCD_WR_DATA(0x05);
 80012ce:	2005      	movs	r0, #5
 80012d0:	f7ff fd38 	bl	8000d44 <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 80012d4:	2010      	movs	r0, #16
 80012d6:	f7ff fd35 	bl	8000d44 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 80012da:	200f      	movs	r0, #15
 80012dc:	f7ff fd32 	bl	8000d44 <LCD_WR_DATA>
	LCD_WR_DATA(0x3F);
 80012e0:	203f      	movs	r0, #63	@ 0x3f
 80012e2:	f7ff fd2f 	bl	8000d44 <LCD_WR_DATA>
	LCD_WR_DATA(0x3F);
 80012e6:	203f      	movs	r0, #63	@ 0x3f
 80012e8:	f7ff fd2c 	bl	8000d44 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 80012ec:	200f      	movs	r0, #15
 80012ee:	f7ff fd29 	bl	8000d44 <LCD_WR_DATA>
	LCD_WR_REG(0x2B);
 80012f2:	202b      	movs	r0, #43	@ 0x2b
 80012f4:	f7ff fd16 	bl	8000d24 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 80012f8:	2000      	movs	r0, #0
 80012fa:	f7ff fd23 	bl	8000d44 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80012fe:	2000      	movs	r0, #0
 8001300:	f7ff fd20 	bl	8000d44 <LCD_WR_DATA>
	LCD_WR_DATA(0x01);
 8001304:	2001      	movs	r0, #1
 8001306:	f7ff fd1d 	bl	8000d44 <LCD_WR_DATA>
	LCD_WR_DATA(0x3f);
 800130a:	203f      	movs	r0, #63	@ 0x3f
 800130c:	f7ff fd1a 	bl	8000d44 <LCD_WR_DATA>
	LCD_WR_REG(0x2A);
 8001310:	202a      	movs	r0, #42	@ 0x2a
 8001312:	f7ff fd07 	bl	8000d24 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001316:	2000      	movs	r0, #0
 8001318:	f7ff fd14 	bl	8000d44 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 800131c:	2000      	movs	r0, #0
 800131e:	f7ff fd11 	bl	8000d44 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001322:	2000      	movs	r0, #0
 8001324:	f7ff fd0e 	bl	8000d44 <LCD_WR_DATA>
	LCD_WR_DATA(0xef);
 8001328:	20ef      	movs	r0, #239	@ 0xef
 800132a:	f7ff fd0b 	bl	8000d44 <LCD_WR_DATA>
	LCD_WR_REG(0x11); //Exit Sleep
 800132e:	2011      	movs	r0, #17
 8001330:	f7ff fcf8 	bl	8000d24 <LCD_WR_REG>
	HAL_Delay(120);
 8001334:	2078      	movs	r0, #120	@ 0x78
 8001336:	f000 feb3 	bl	80020a0 <HAL_Delay>
	LCD_WR_REG(0x29); //display on
 800133a:	2029      	movs	r0, #41	@ 0x29
 800133c:	f7ff fcf2 	bl	8000d24 <LCD_WR_REG>
	HAL_GPIO_WritePin(FSMC_BLK_GPIO_Port, FSMC_BLK_Pin, 1);
 8001340:	2201      	movs	r2, #1
 8001342:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001346:	4804      	ldr	r0, [pc, #16]	@ (8001358 <lcd_init+0x2bc>)
 8001348:	f001 ff5a 	bl	8003200 <HAL_GPIO_WritePin>
}
 800134c:	bf00      	nop
 800134e:	bd80      	pop	{r7, pc}
 8001350:	40020800 	.word	0x40020800
 8001354:	200001a4 	.word	0x200001a4
 8001358:	40020000 	.word	0x40020000

0800135c <lcd_ShowStr>:
		}
	}
}

void lcd_ShowStr(uint16_t x, uint16_t y,char *str,uint16_t fc, uint16_t bc,uint8_t sizey,uint8_t mode)
{
 800135c:	b590      	push	{r4, r7, lr}
 800135e:	b08b      	sub	sp, #44	@ 0x2c
 8001360:	af04      	add	r7, sp, #16
 8001362:	60ba      	str	r2, [r7, #8]
 8001364:	461a      	mov	r2, r3
 8001366:	4603      	mov	r3, r0
 8001368:	81fb      	strh	r3, [r7, #14]
 800136a:	460b      	mov	r3, r1
 800136c:	81bb      	strh	r3, [r7, #12]
 800136e:	4613      	mov	r3, r2
 8001370:	80fb      	strh	r3, [r7, #6]
	uint16_t x0=x;
 8001372:	89fb      	ldrh	r3, [r7, #14]
 8001374:	82bb      	strh	r3, [r7, #20]
    uint8_t bHz=0;
 8001376:	2300      	movs	r3, #0
 8001378:	75fb      	strb	r3, [r7, #23]
	while(*str!=0)
 800137a:	e048      	b.n	800140e <lcd_ShowStr+0xb2>
	{
		if(!bHz)
 800137c:	7dfb      	ldrb	r3, [r7, #23]
 800137e:	2b00      	cmp	r3, #0
 8001380:	d145      	bne.n	800140e <lcd_ShowStr+0xb2>
		{
			if(x>(lcddev.width-sizey/2)||y>(lcddev.height-sizey)) return;
 8001382:	89fa      	ldrh	r2, [r7, #14]
 8001384:	4b26      	ldr	r3, [pc, #152]	@ (8001420 <lcd_ShowStr+0xc4>)
 8001386:	881b      	ldrh	r3, [r3, #0]
 8001388:	4619      	mov	r1, r3
 800138a:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800138e:	085b      	lsrs	r3, r3, #1
 8001390:	b2db      	uxtb	r3, r3
 8001392:	1acb      	subs	r3, r1, r3
 8001394:	429a      	cmp	r2, r3
 8001396:	dc3f      	bgt.n	8001418 <lcd_ShowStr+0xbc>
 8001398:	89ba      	ldrh	r2, [r7, #12]
 800139a:	4b21      	ldr	r3, [pc, #132]	@ (8001420 <lcd_ShowStr+0xc4>)
 800139c:	885b      	ldrh	r3, [r3, #2]
 800139e:	4619      	mov	r1, r3
 80013a0:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80013a4:	1acb      	subs	r3, r1, r3
 80013a6:	429a      	cmp	r2, r3
 80013a8:	dc36      	bgt.n	8001418 <lcd_ShowStr+0xbc>
			if(*str>0x80)bHz=1;
 80013aa:	68bb      	ldr	r3, [r7, #8]
 80013ac:	781b      	ldrb	r3, [r3, #0]
 80013ae:	2b80      	cmp	r3, #128	@ 0x80
 80013b0:	d902      	bls.n	80013b8 <lcd_ShowStr+0x5c>
 80013b2:	2301      	movs	r3, #1
 80013b4:	75fb      	strb	r3, [r7, #23]
 80013b6:	e02a      	b.n	800140e <lcd_ShowStr+0xb2>
			else
			{
				if(*str==0x0D)
 80013b8:	68bb      	ldr	r3, [r7, #8]
 80013ba:	781b      	ldrb	r3, [r3, #0]
 80013bc:	2b0d      	cmp	r3, #13
 80013be:	d10b      	bne.n	80013d8 <lcd_ShowStr+0x7c>
				{
					y+=sizey;
 80013c0:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80013c4:	b29a      	uxth	r2, r3
 80013c6:	89bb      	ldrh	r3, [r7, #12]
 80013c8:	4413      	add	r3, r2
 80013ca:	81bb      	strh	r3, [r7, #12]
					x=x0;
 80013cc:	8abb      	ldrh	r3, [r7, #20]
 80013ce:	81fb      	strh	r3, [r7, #14]
					str++;
 80013d0:	68bb      	ldr	r3, [r7, #8]
 80013d2:	3301      	adds	r3, #1
 80013d4:	60bb      	str	r3, [r7, #8]
 80013d6:	e017      	b.n	8001408 <lcd_ShowStr+0xac>
				}else
				{
					lcd_ShowChar(x,y,*str,fc,bc,sizey,mode);
 80013d8:	68bb      	ldr	r3, [r7, #8]
 80013da:	781a      	ldrb	r2, [r3, #0]
 80013dc:	88fc      	ldrh	r4, [r7, #6]
 80013de:	89b9      	ldrh	r1, [r7, #12]
 80013e0:	89f8      	ldrh	r0, [r7, #14]
 80013e2:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 80013e6:	9302      	str	r3, [sp, #8]
 80013e8:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80013ec:	9301      	str	r3, [sp, #4]
 80013ee:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80013f0:	9300      	str	r3, [sp, #0]
 80013f2:	4623      	mov	r3, r4
 80013f4:	f7ff fd5e 	bl	8000eb4 <lcd_ShowChar>
					x+=sizey/2;
 80013f8:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80013fc:	085b      	lsrs	r3, r3, #1
 80013fe:	b2db      	uxtb	r3, r3
 8001400:	461a      	mov	r2, r3
 8001402:	89fb      	ldrh	r3, [r7, #14]
 8001404:	4413      	add	r3, r2
 8001406:	81fb      	strh	r3, [r7, #14]
				}
			  str++;
 8001408:	68bb      	ldr	r3, [r7, #8]
 800140a:	3301      	adds	r3, #1
 800140c:	60bb      	str	r3, [r7, #8]
	while(*str!=0)
 800140e:	68bb      	ldr	r3, [r7, #8]
 8001410:	781b      	ldrb	r3, [r3, #0]
 8001412:	2b00      	cmp	r3, #0
 8001414:	d1b2      	bne.n	800137c <lcd_ShowStr+0x20>
 8001416:	e000      	b.n	800141a <lcd_ShowStr+0xbe>
			if(x>(lcddev.width-sizey/2)||y>(lcddev.height-sizey)) return;
 8001418:	bf00      	nop
			}
		}
	}
}
 800141a:	371c      	adds	r7, #28
 800141c:	46bd      	mov	sp, r7
 800141e:	bd90      	pop	{r4, r7, pc}
 8001420:	200001a4 	.word	0x200001a4

08001424 <led7_Scan>:

void led7_init(){
	  HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 1);
}

void led7_Scan(){
 8001424:	b580      	push	{r7, lr}
 8001426:	af00      	add	r7, sp, #0
	spi_buffer &= 0x00ff;
 8001428:	4b3f      	ldr	r3, [pc, #252]	@ (8001528 <led7_Scan+0x104>)
 800142a:	881b      	ldrh	r3, [r3, #0]
 800142c:	b2db      	uxtb	r3, r3
 800142e:	b29a      	uxth	r2, r3
 8001430:	4b3d      	ldr	r3, [pc, #244]	@ (8001528 <led7_Scan+0x104>)
 8001432:	801a      	strh	r2, [r3, #0]
	spi_buffer |= led7seg[led7_index] << 8;
 8001434:	4b3d      	ldr	r3, [pc, #244]	@ (800152c <led7_Scan+0x108>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	4a3d      	ldr	r2, [pc, #244]	@ (8001530 <led7_Scan+0x10c>)
 800143a:	5cd3      	ldrb	r3, [r2, r3]
 800143c:	021b      	lsls	r3, r3, #8
 800143e:	b21a      	sxth	r2, r3
 8001440:	4b39      	ldr	r3, [pc, #228]	@ (8001528 <led7_Scan+0x104>)
 8001442:	881b      	ldrh	r3, [r3, #0]
 8001444:	b21b      	sxth	r3, r3
 8001446:	4313      	orrs	r3, r2
 8001448:	b21b      	sxth	r3, r3
 800144a:	b29a      	uxth	r2, r3
 800144c:	4b36      	ldr	r3, [pc, #216]	@ (8001528 <led7_Scan+0x104>)
 800144e:	801a      	strh	r2, [r3, #0]
	switch(led7_index){
 8001450:	4b36      	ldr	r3, [pc, #216]	@ (800152c <led7_Scan+0x108>)
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	2b03      	cmp	r3, #3
 8001456:	d847      	bhi.n	80014e8 <led7_Scan+0xc4>
 8001458:	a201      	add	r2, pc, #4	@ (adr r2, 8001460 <led7_Scan+0x3c>)
 800145a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800145e:	bf00      	nop
 8001460:	08001471 	.word	0x08001471
 8001464:	0800148f 	.word	0x0800148f
 8001468:	080014ad 	.word	0x080014ad
 800146c:	080014cb 	.word	0x080014cb
	case 0:
		spi_buffer |= 0x00b0;
 8001470:	4b2d      	ldr	r3, [pc, #180]	@ (8001528 <led7_Scan+0x104>)
 8001472:	881b      	ldrh	r3, [r3, #0]
 8001474:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8001478:	b29a      	uxth	r2, r3
 800147a:	4b2b      	ldr	r3, [pc, #172]	@ (8001528 <led7_Scan+0x104>)
 800147c:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffbf;//1011
 800147e:	4b2a      	ldr	r3, [pc, #168]	@ (8001528 <led7_Scan+0x104>)
 8001480:	881b      	ldrh	r3, [r3, #0]
 8001482:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8001486:	b29a      	uxth	r2, r3
 8001488:	4b27      	ldr	r3, [pc, #156]	@ (8001528 <led7_Scan+0x104>)
 800148a:	801a      	strh	r2, [r3, #0]
		break;
 800148c:	e02d      	b.n	80014ea <led7_Scan+0xc6>
	case 1:
		spi_buffer |= 0x00d0;
 800148e:	4b26      	ldr	r3, [pc, #152]	@ (8001528 <led7_Scan+0x104>)
 8001490:	881b      	ldrh	r3, [r3, #0]
 8001492:	f043 03d0 	orr.w	r3, r3, #208	@ 0xd0
 8001496:	b29a      	uxth	r2, r3
 8001498:	4b23      	ldr	r3, [pc, #140]	@ (8001528 <led7_Scan+0x104>)
 800149a:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffdf;//1101
 800149c:	4b22      	ldr	r3, [pc, #136]	@ (8001528 <led7_Scan+0x104>)
 800149e:	881b      	ldrh	r3, [r3, #0]
 80014a0:	f023 0320 	bic.w	r3, r3, #32
 80014a4:	b29a      	uxth	r2, r3
 80014a6:	4b20      	ldr	r3, [pc, #128]	@ (8001528 <led7_Scan+0x104>)
 80014a8:	801a      	strh	r2, [r3, #0]
		break;
 80014aa:	e01e      	b.n	80014ea <led7_Scan+0xc6>
	case 2:
		spi_buffer |= 0x00e0;
 80014ac:	4b1e      	ldr	r3, [pc, #120]	@ (8001528 <led7_Scan+0x104>)
 80014ae:	881b      	ldrh	r3, [r3, #0]
 80014b0:	f043 03e0 	orr.w	r3, r3, #224	@ 0xe0
 80014b4:	b29a      	uxth	r2, r3
 80014b6:	4b1c      	ldr	r3, [pc, #112]	@ (8001528 <led7_Scan+0x104>)
 80014b8:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffef;//1110
 80014ba:	4b1b      	ldr	r3, [pc, #108]	@ (8001528 <led7_Scan+0x104>)
 80014bc:	881b      	ldrh	r3, [r3, #0]
 80014be:	f023 0310 	bic.w	r3, r3, #16
 80014c2:	b29a      	uxth	r2, r3
 80014c4:	4b18      	ldr	r3, [pc, #96]	@ (8001528 <led7_Scan+0x104>)
 80014c6:	801a      	strh	r2, [r3, #0]
		break;
 80014c8:	e00f      	b.n	80014ea <led7_Scan+0xc6>
	case 3:
		spi_buffer |= 0x0070;
 80014ca:	4b17      	ldr	r3, [pc, #92]	@ (8001528 <led7_Scan+0x104>)
 80014cc:	881b      	ldrh	r3, [r3, #0]
 80014ce:	f043 0370 	orr.w	r3, r3, #112	@ 0x70
 80014d2:	b29a      	uxth	r2, r3
 80014d4:	4b14      	ldr	r3, [pc, #80]	@ (8001528 <led7_Scan+0x104>)
 80014d6:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xff7f;//0111
 80014d8:	4b13      	ldr	r3, [pc, #76]	@ (8001528 <led7_Scan+0x104>)
 80014da:	881b      	ldrh	r3, [r3, #0]
 80014dc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80014e0:	b29a      	uxth	r2, r3
 80014e2:	4b11      	ldr	r3, [pc, #68]	@ (8001528 <led7_Scan+0x104>)
 80014e4:	801a      	strh	r2, [r3, #0]
		break;
 80014e6:	e000      	b.n	80014ea <led7_Scan+0xc6>
	default:
		break;
 80014e8:	bf00      	nop
	}
	led7_index = (led7_index + 1)%4;
 80014ea:	4b10      	ldr	r3, [pc, #64]	@ (800152c <led7_Scan+0x108>)
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	3301      	adds	r3, #1
 80014f0:	425a      	negs	r2, r3
 80014f2:	f003 0303 	and.w	r3, r3, #3
 80014f6:	f002 0203 	and.w	r2, r2, #3
 80014fa:	bf58      	it	pl
 80014fc:	4253      	negpl	r3, r2
 80014fe:	4a0b      	ldr	r2, [pc, #44]	@ (800152c <led7_Scan+0x108>)
 8001500:	6013      	str	r3, [r2, #0]
	HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 0);
 8001502:	2200      	movs	r2, #0
 8001504:	2140      	movs	r1, #64	@ 0x40
 8001506:	480b      	ldr	r0, [pc, #44]	@ (8001534 <led7_Scan+0x110>)
 8001508:	f001 fe7a 	bl	8003200 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (void*)&spi_buffer, 2, 1);
 800150c:	2301      	movs	r3, #1
 800150e:	2202      	movs	r2, #2
 8001510:	4905      	ldr	r1, [pc, #20]	@ (8001528 <led7_Scan+0x104>)
 8001512:	4809      	ldr	r0, [pc, #36]	@ (8001538 <led7_Scan+0x114>)
 8001514:	f002 fd0d 	bl	8003f32 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 1);
 8001518:	2201      	movs	r2, #1
 800151a:	2140      	movs	r1, #64	@ 0x40
 800151c:	4805      	ldr	r0, [pc, #20]	@ (8001534 <led7_Scan+0x110>)
 800151e:	f001 fe6f 	bl	8003200 <HAL_GPIO_WritePin>
}
 8001522:	bf00      	nop
 8001524:	bd80      	pop	{r7, pc}
 8001526:	bf00      	nop
 8001528:	20000004 	.word	0x20000004
 800152c:	200001ac 	.word	0x200001ac
 8001530:	20000000 	.word	0x20000000
 8001534:	40021800 	.word	0x40021800
 8001538:	200001b8 	.word	0x200001b8

0800153c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b084      	sub	sp, #16
 8001540:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001542:	f000 fd3b 	bl	8001fbc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001546:	f000 f851 	bl	80015ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800154a:	f7ff fa3b 	bl	80009c4 <MX_GPIO_Init>
  MX_TIM2_Init();
 800154e:	f000 faa5 	bl	8001a9c <MX_TIM2_Init>
  MX_SPI1_Init();
 8001552:	f000 f943 	bl	80017dc <MX_SPI1_Init>
  MX_FSMC_Init();
 8001556:	f7ff f965 	bl	8000824 <MX_FSMC_Init>
  MX_I2C1_Init();
 800155a:	f7ff fb6d 	bl	8000c38 <MX_I2C1_Init>
  MX_TIM13_Init();
 800155e:	f000 fae9 	bl	8001b34 <MX_TIM13_Init>
  MX_DMA_Init();
 8001562:	f7ff f93f 	bl	80007e4 <MX_DMA_Init>
  MX_ADC1_Init();
 8001566:	f7fe ffa7 	bl	80004b8 <MX_ADC1_Init>
  MX_TIM1_Init();
 800156a:	f000 fa47 	bl	80019fc <MX_TIM1_Init>
  MX_USART2_UART_Init();
 800156e:	f000 fc45 	bl	8001dfc <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 8001572:	f000 fc19 	bl	8001da8 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  system_init();
 8001576:	f000 f8a3 	bl	80016c0 <system_init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
 lcd_Clear(WHITE);
 800157a:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 800157e:	f7ff fc4f 	bl	8000e20 <lcd_Clear>
 lcd_ShowStr(10, 50, "HELLO", GREEN, WHITE, 24, 0);
 8001582:	2300      	movs	r3, #0
 8001584:	9302      	str	r3, [sp, #8]
 8001586:	2318      	movs	r3, #24
 8001588:	9301      	str	r3, [sp, #4]
 800158a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800158e:	9300      	str	r3, [sp, #0]
 8001590:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8001594:	4a12      	ldr	r2, [pc, #72]	@ (80015e0 <main+0xa4>)
 8001596:	2132      	movs	r1, #50	@ 0x32
 8001598:	200a      	movs	r0, #10
 800159a:	f7ff fedf 	bl	800135c <lcd_ShowStr>
 while (1)
  {
	  // 50ms task
	  if(flag_timer2 == 1){
 800159e:	4b11      	ldr	r3, [pc, #68]	@ (80015e4 <main+0xa8>)
 80015a0:	881b      	ldrh	r3, [r3, #0]
 80015a2:	2b01      	cmp	r3, #1
 80015a4:	d1fb      	bne.n	800159e <main+0x62>
		  flag_timer2 = 0;
 80015a6:	4b0f      	ldr	r3, [pc, #60]	@ (80015e4 <main+0xa8>)
 80015a8:	2200      	movs	r2, #0
 80015aa:	801a      	strh	r2, [r3, #0]
		  button_Scan();
 80015ac:	f7ff f8ae 	bl	800070c <button_Scan>
		  test_LedDebug();
 80015b0:	f000 f896 	bl	80016e0 <test_LedDebug>
		  lcd_Clear(BLUE);
 80015b4:	201f      	movs	r0, #31
 80015b6:	f7ff fc33 	bl	8000e20 <lcd_Clear>
		  lcd_ShowStr(30, 50, "TOMMAS", RED, WHITE, 24, 0);
 80015ba:	2300      	movs	r3, #0
 80015bc:	9302      	str	r3, [sp, #8]
 80015be:	2318      	movs	r3, #24
 80015c0:	9301      	str	r3, [sp, #4]
 80015c2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80015c6:	9300      	str	r3, [sp, #0]
 80015c8:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 80015cc:	4a06      	ldr	r2, [pc, #24]	@ (80015e8 <main+0xac>)
 80015ce:	2132      	movs	r1, #50	@ 0x32
 80015d0:	201e      	movs	r0, #30
 80015d2:	f7ff fec3 	bl	800135c <lcd_ShowStr>
		  setTimer2(20);
 80015d6:	2014      	movs	r0, #20
 80015d8:	f000 f8ba 	bl	8001750 <setTimer2>
	  if(flag_timer2 == 1){
 80015dc:	e7df      	b.n	800159e <main+0x62>
 80015de:	bf00      	nop
 80015e0:	08006c5c 	.word	0x08006c5c
 80015e4:	200001b2 	.word	0x200001b2
 80015e8:	08006c64 	.word	0x08006c64

080015ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b094      	sub	sp, #80	@ 0x50
 80015f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80015f2:	f107 0320 	add.w	r3, r7, #32
 80015f6:	2230      	movs	r2, #48	@ 0x30
 80015f8:	2100      	movs	r1, #0
 80015fa:	4618      	mov	r0, r3
 80015fc:	f005 faf6 	bl	8006bec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001600:	f107 030c 	add.w	r3, r7, #12
 8001604:	2200      	movs	r2, #0
 8001606:	601a      	str	r2, [r3, #0]
 8001608:	605a      	str	r2, [r3, #4]
 800160a:	609a      	str	r2, [r3, #8]
 800160c:	60da      	str	r2, [r3, #12]
 800160e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001610:	2300      	movs	r3, #0
 8001612:	60bb      	str	r3, [r7, #8]
 8001614:	4b28      	ldr	r3, [pc, #160]	@ (80016b8 <SystemClock_Config+0xcc>)
 8001616:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001618:	4a27      	ldr	r2, [pc, #156]	@ (80016b8 <SystemClock_Config+0xcc>)
 800161a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800161e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001620:	4b25      	ldr	r3, [pc, #148]	@ (80016b8 <SystemClock_Config+0xcc>)
 8001622:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001624:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001628:	60bb      	str	r3, [r7, #8]
 800162a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800162c:	2300      	movs	r3, #0
 800162e:	607b      	str	r3, [r7, #4]
 8001630:	4b22      	ldr	r3, [pc, #136]	@ (80016bc <SystemClock_Config+0xd0>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	4a21      	ldr	r2, [pc, #132]	@ (80016bc <SystemClock_Config+0xd0>)
 8001636:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800163a:	6013      	str	r3, [r2, #0]
 800163c:	4b1f      	ldr	r3, [pc, #124]	@ (80016bc <SystemClock_Config+0xd0>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001644:	607b      	str	r3, [r7, #4]
 8001646:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001648:	2302      	movs	r3, #2
 800164a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800164c:	2301      	movs	r3, #1
 800164e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001650:	2310      	movs	r3, #16
 8001652:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001654:	2302      	movs	r3, #2
 8001656:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001658:	2300      	movs	r3, #0
 800165a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800165c:	2308      	movs	r3, #8
 800165e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001660:	23a8      	movs	r3, #168	@ 0xa8
 8001662:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001664:	2302      	movs	r3, #2
 8001666:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001668:	2304      	movs	r3, #4
 800166a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800166c:	f107 0320 	add.w	r3, r7, #32
 8001670:	4618      	mov	r0, r3
 8001672:	f001 ff3d 	bl	80034f0 <HAL_RCC_OscConfig>
 8001676:	4603      	mov	r3, r0
 8001678:	2b00      	cmp	r3, #0
 800167a:	d001      	beq.n	8001680 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800167c:	f000 f854 	bl	8001728 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001680:	230f      	movs	r3, #15
 8001682:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001684:	2302      	movs	r3, #2
 8001686:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001688:	2300      	movs	r3, #0
 800168a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800168c:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001690:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8001692:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001696:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001698:	f107 030c 	add.w	r3, r7, #12
 800169c:	2105      	movs	r1, #5
 800169e:	4618      	mov	r0, r3
 80016a0:	f002 f99e 	bl	80039e0 <HAL_RCC_ClockConfig>
 80016a4:	4603      	mov	r3, r0
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d001      	beq.n	80016ae <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80016aa:	f000 f83d 	bl	8001728 <Error_Handler>
  }
}
 80016ae:	bf00      	nop
 80016b0:	3750      	adds	r7, #80	@ 0x50
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bd80      	pop	{r7, pc}
 80016b6:	bf00      	nop
 80016b8:	40023800 	.word	0x40023800
 80016bc:	40007000 	.word	0x40007000

080016c0 <system_init>:

/* USER CODE BEGIN 4 */
void system_init(){
 80016c0:	b580      	push	{r7, lr}
 80016c2:	af00      	add	r7, sp, #0
	  timer_init();
 80016c4:	f000 f836 	bl	8001734 <timer_init>
	  button_init();
 80016c8:	f7ff f814 	bl	80006f4 <button_init>
	  lcd_init();
 80016cc:	f7ff fce6 	bl	800109c <lcd_init>
	  uart_init_esp();
 80016d0:	f000 fb0a 	bl	8001ce8 <uart_init_esp>
	  setTimer2(50);
 80016d4:	2032      	movs	r0, #50	@ 0x32
 80016d6:	f000 f83b 	bl	8001750 <setTimer2>
}
 80016da:	bf00      	nop
 80016dc:	bd80      	pop	{r7, pc}
	...

080016e0 <test_LedDebug>:

uint8_t count_led_debug = 0;

void test_LedDebug(){
 80016e0:	b580      	push	{r7, lr}
 80016e2:	af00      	add	r7, sp, #0
	count_led_debug = (count_led_debug + 1)%20;
 80016e4:	4b0d      	ldr	r3, [pc, #52]	@ (800171c <test_LedDebug+0x3c>)
 80016e6:	781b      	ldrb	r3, [r3, #0]
 80016e8:	1c5a      	adds	r2, r3, #1
 80016ea:	4b0d      	ldr	r3, [pc, #52]	@ (8001720 <test_LedDebug+0x40>)
 80016ec:	fb83 1302 	smull	r1, r3, r3, r2
 80016f0:	10d9      	asrs	r1, r3, #3
 80016f2:	17d3      	asrs	r3, r2, #31
 80016f4:	1ac9      	subs	r1, r1, r3
 80016f6:	460b      	mov	r3, r1
 80016f8:	009b      	lsls	r3, r3, #2
 80016fa:	440b      	add	r3, r1
 80016fc:	009b      	lsls	r3, r3, #2
 80016fe:	1ad1      	subs	r1, r2, r3
 8001700:	b2ca      	uxtb	r2, r1
 8001702:	4b06      	ldr	r3, [pc, #24]	@ (800171c <test_LedDebug+0x3c>)
 8001704:	701a      	strb	r2, [r3, #0]
	if(count_led_debug == 0){
 8001706:	4b05      	ldr	r3, [pc, #20]	@ (800171c <test_LedDebug+0x3c>)
 8001708:	781b      	ldrb	r3, [r3, #0]
 800170a:	2b00      	cmp	r3, #0
 800170c:	d103      	bne.n	8001716 <test_LedDebug+0x36>
		HAL_GPIO_TogglePin(DEBUG_LED_GPIO_Port, DEBUG_LED_Pin);
 800170e:	2110      	movs	r1, #16
 8001710:	4804      	ldr	r0, [pc, #16]	@ (8001724 <test_LedDebug+0x44>)
 8001712:	f001 fd8e 	bl	8003232 <HAL_GPIO_TogglePin>
	}
}
 8001716:	bf00      	nop
 8001718:	bd80      	pop	{r7, pc}
 800171a:	bf00      	nop
 800171c:	200001b1 	.word	0x200001b1
 8001720:	66666667 	.word	0x66666667
 8001724:	40021000 	.word	0x40021000

08001728 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001728:	b480      	push	{r7}
 800172a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800172c:	b672      	cpsid	i
}
 800172e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001730:	bf00      	nop
 8001732:	e7fd      	b.n	8001730 <Error_Handler+0x8>

08001734 <timer_init>:

uint16_t flag_timer2 = 0;
uint16_t timer2_counter = 0;
uint16_t timer2_MUL = 0;

void timer_init(){
 8001734:	b580      	push	{r7, lr}
 8001736:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim2);
 8001738:	4803      	ldr	r0, [pc, #12]	@ (8001748 <timer_init+0x14>)
 800173a:	f003 fa15 	bl	8004b68 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start(&htim1);
 800173e:	4803      	ldr	r0, [pc, #12]	@ (800174c <timer_init+0x18>)
 8001740:	f003 f9aa 	bl	8004a98 <HAL_TIM_Base_Start>
}
 8001744:	bf00      	nop
 8001746:	bd80      	pop	{r7, pc}
 8001748:	20000258 	.word	0x20000258
 800174c:	20000210 	.word	0x20000210

08001750 <setTimer2>:

void timer_EnableDelayUs(){
	HAL_TIM_Base_Start(&htim1);
}

void setTimer2(uint16_t duration){
 8001750:	b480      	push	{r7}
 8001752:	b083      	sub	sp, #12
 8001754:	af00      	add	r7, sp, #0
 8001756:	4603      	mov	r3, r0
 8001758:	80fb      	strh	r3, [r7, #6]
	timer2_MUL = duration/TIMER_CYCLE_2;
 800175a:	4a08      	ldr	r2, [pc, #32]	@ (800177c <setTimer2+0x2c>)
 800175c:	88fb      	ldrh	r3, [r7, #6]
 800175e:	8013      	strh	r3, [r2, #0]
	timer2_counter = timer2_MUL;
 8001760:	4b06      	ldr	r3, [pc, #24]	@ (800177c <setTimer2+0x2c>)
 8001762:	881a      	ldrh	r2, [r3, #0]
 8001764:	4b06      	ldr	r3, [pc, #24]	@ (8001780 <setTimer2+0x30>)
 8001766:	801a      	strh	r2, [r3, #0]
	flag_timer2 = 0;
 8001768:	4b06      	ldr	r3, [pc, #24]	@ (8001784 <setTimer2+0x34>)
 800176a:	2200      	movs	r2, #0
 800176c:	801a      	strh	r2, [r3, #0]
}
 800176e:	bf00      	nop
 8001770:	370c      	adds	r7, #12
 8001772:	46bd      	mov	sp, r7
 8001774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001778:	4770      	bx	lr
 800177a:	bf00      	nop
 800177c:	200001b6 	.word	0x200001b6
 8001780:	200001b4 	.word	0x200001b4
 8001784:	200001b2 	.word	0x200001b2

08001788 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001788:	b580      	push	{r7, lr}
 800178a:	b082      	sub	sp, #8
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2){
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001798:	d116      	bne.n	80017c8 <HAL_TIM_PeriodElapsedCallback+0x40>
		if(timer2_counter > 0){
 800179a:	4b0d      	ldr	r3, [pc, #52]	@ (80017d0 <HAL_TIM_PeriodElapsedCallback+0x48>)
 800179c:	881b      	ldrh	r3, [r3, #0]
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d010      	beq.n	80017c4 <HAL_TIM_PeriodElapsedCallback+0x3c>
			timer2_counter--;
 80017a2:	4b0b      	ldr	r3, [pc, #44]	@ (80017d0 <HAL_TIM_PeriodElapsedCallback+0x48>)
 80017a4:	881b      	ldrh	r3, [r3, #0]
 80017a6:	3b01      	subs	r3, #1
 80017a8:	b29a      	uxth	r2, r3
 80017aa:	4b09      	ldr	r3, [pc, #36]	@ (80017d0 <HAL_TIM_PeriodElapsedCallback+0x48>)
 80017ac:	801a      	strh	r2, [r3, #0]
			if(timer2_counter == 0) {
 80017ae:	4b08      	ldr	r3, [pc, #32]	@ (80017d0 <HAL_TIM_PeriodElapsedCallback+0x48>)
 80017b0:	881b      	ldrh	r3, [r3, #0]
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d106      	bne.n	80017c4 <HAL_TIM_PeriodElapsedCallback+0x3c>
				flag_timer2 = 1;
 80017b6:	4b07      	ldr	r3, [pc, #28]	@ (80017d4 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 80017b8:	2201      	movs	r2, #1
 80017ba:	801a      	strh	r2, [r3, #0]
				timer2_counter = timer2_MUL;
 80017bc:	4b06      	ldr	r3, [pc, #24]	@ (80017d8 <HAL_TIM_PeriodElapsedCallback+0x50>)
 80017be:	881a      	ldrh	r2, [r3, #0]
 80017c0:	4b03      	ldr	r3, [pc, #12]	@ (80017d0 <HAL_TIM_PeriodElapsedCallback+0x48>)
 80017c2:	801a      	strh	r2, [r3, #0]
			}
		}
		led7_Scan();
 80017c4:	f7ff fe2e 	bl	8001424 <led7_Scan>
	}
}
 80017c8:	bf00      	nop
 80017ca:	3708      	adds	r7, #8
 80017cc:	46bd      	mov	sp, r7
 80017ce:	bd80      	pop	{r7, pc}
 80017d0:	200001b4 	.word	0x200001b4
 80017d4:	200001b2 	.word	0x200001b2
 80017d8:	200001b6 	.word	0x200001b6

080017dc <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80017e0:	4b17      	ldr	r3, [pc, #92]	@ (8001840 <MX_SPI1_Init+0x64>)
 80017e2:	4a18      	ldr	r2, [pc, #96]	@ (8001844 <MX_SPI1_Init+0x68>)
 80017e4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80017e6:	4b16      	ldr	r3, [pc, #88]	@ (8001840 <MX_SPI1_Init+0x64>)
 80017e8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80017ec:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80017ee:	4b14      	ldr	r3, [pc, #80]	@ (8001840 <MX_SPI1_Init+0x64>)
 80017f0:	2200      	movs	r2, #0
 80017f2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80017f4:	4b12      	ldr	r3, [pc, #72]	@ (8001840 <MX_SPI1_Init+0x64>)
 80017f6:	2200      	movs	r2, #0
 80017f8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80017fa:	4b11      	ldr	r3, [pc, #68]	@ (8001840 <MX_SPI1_Init+0x64>)
 80017fc:	2200      	movs	r2, #0
 80017fe:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001800:	4b0f      	ldr	r3, [pc, #60]	@ (8001840 <MX_SPI1_Init+0x64>)
 8001802:	2200      	movs	r2, #0
 8001804:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001806:	4b0e      	ldr	r3, [pc, #56]	@ (8001840 <MX_SPI1_Init+0x64>)
 8001808:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800180c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800180e:	4b0c      	ldr	r3, [pc, #48]	@ (8001840 <MX_SPI1_Init+0x64>)
 8001810:	2200      	movs	r2, #0
 8001812:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001814:	4b0a      	ldr	r3, [pc, #40]	@ (8001840 <MX_SPI1_Init+0x64>)
 8001816:	2200      	movs	r2, #0
 8001818:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800181a:	4b09      	ldr	r3, [pc, #36]	@ (8001840 <MX_SPI1_Init+0x64>)
 800181c:	2200      	movs	r2, #0
 800181e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001820:	4b07      	ldr	r3, [pc, #28]	@ (8001840 <MX_SPI1_Init+0x64>)
 8001822:	2200      	movs	r2, #0
 8001824:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001826:	4b06      	ldr	r3, [pc, #24]	@ (8001840 <MX_SPI1_Init+0x64>)
 8001828:	220a      	movs	r2, #10
 800182a:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800182c:	4804      	ldr	r0, [pc, #16]	@ (8001840 <MX_SPI1_Init+0x64>)
 800182e:	f002 faf7 	bl	8003e20 <HAL_SPI_Init>
 8001832:	4603      	mov	r3, r0
 8001834:	2b00      	cmp	r3, #0
 8001836:	d001      	beq.n	800183c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001838:	f7ff ff76 	bl	8001728 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800183c:	bf00      	nop
 800183e:	bd80      	pop	{r7, pc}
 8001840:	200001b8 	.word	0x200001b8
 8001844:	40013000 	.word	0x40013000

08001848 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b08a      	sub	sp, #40	@ 0x28
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001850:	f107 0314 	add.w	r3, r7, #20
 8001854:	2200      	movs	r2, #0
 8001856:	601a      	str	r2, [r3, #0]
 8001858:	605a      	str	r2, [r3, #4]
 800185a:	609a      	str	r2, [r3, #8]
 800185c:	60da      	str	r2, [r3, #12]
 800185e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	4a19      	ldr	r2, [pc, #100]	@ (80018cc <HAL_SPI_MspInit+0x84>)
 8001866:	4293      	cmp	r3, r2
 8001868:	d12b      	bne.n	80018c2 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800186a:	2300      	movs	r3, #0
 800186c:	613b      	str	r3, [r7, #16]
 800186e:	4b18      	ldr	r3, [pc, #96]	@ (80018d0 <HAL_SPI_MspInit+0x88>)
 8001870:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001872:	4a17      	ldr	r2, [pc, #92]	@ (80018d0 <HAL_SPI_MspInit+0x88>)
 8001874:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001878:	6453      	str	r3, [r2, #68]	@ 0x44
 800187a:	4b15      	ldr	r3, [pc, #84]	@ (80018d0 <HAL_SPI_MspInit+0x88>)
 800187c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800187e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001882:	613b      	str	r3, [r7, #16]
 8001884:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001886:	2300      	movs	r3, #0
 8001888:	60fb      	str	r3, [r7, #12]
 800188a:	4b11      	ldr	r3, [pc, #68]	@ (80018d0 <HAL_SPI_MspInit+0x88>)
 800188c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800188e:	4a10      	ldr	r2, [pc, #64]	@ (80018d0 <HAL_SPI_MspInit+0x88>)
 8001890:	f043 0302 	orr.w	r3, r3, #2
 8001894:	6313      	str	r3, [r2, #48]	@ 0x30
 8001896:	4b0e      	ldr	r3, [pc, #56]	@ (80018d0 <HAL_SPI_MspInit+0x88>)
 8001898:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800189a:	f003 0302 	and.w	r3, r3, #2
 800189e:	60fb      	str	r3, [r7, #12]
 80018a0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 80018a2:	2338      	movs	r3, #56	@ 0x38
 80018a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018a6:	2302      	movs	r3, #2
 80018a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018aa:	2300      	movs	r3, #0
 80018ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018ae:	2303      	movs	r3, #3
 80018b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80018b2:	2305      	movs	r3, #5
 80018b4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018b6:	f107 0314 	add.w	r3, r7, #20
 80018ba:	4619      	mov	r1, r3
 80018bc:	4805      	ldr	r0, [pc, #20]	@ (80018d4 <HAL_SPI_MspInit+0x8c>)
 80018be:	f001 fb03 	bl	8002ec8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80018c2:	bf00      	nop
 80018c4:	3728      	adds	r7, #40	@ 0x28
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bd80      	pop	{r7, pc}
 80018ca:	bf00      	nop
 80018cc:	40013000 	.word	0x40013000
 80018d0:	40023800 	.word	0x40023800
 80018d4:	40020400 	.word	0x40020400

080018d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018d8:	b480      	push	{r7}
 80018da:	b083      	sub	sp, #12
 80018dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018de:	2300      	movs	r3, #0
 80018e0:	607b      	str	r3, [r7, #4]
 80018e2:	4b10      	ldr	r3, [pc, #64]	@ (8001924 <HAL_MspInit+0x4c>)
 80018e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018e6:	4a0f      	ldr	r2, [pc, #60]	@ (8001924 <HAL_MspInit+0x4c>)
 80018e8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80018ec:	6453      	str	r3, [r2, #68]	@ 0x44
 80018ee:	4b0d      	ldr	r3, [pc, #52]	@ (8001924 <HAL_MspInit+0x4c>)
 80018f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018f2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80018f6:	607b      	str	r3, [r7, #4]
 80018f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80018fa:	2300      	movs	r3, #0
 80018fc:	603b      	str	r3, [r7, #0]
 80018fe:	4b09      	ldr	r3, [pc, #36]	@ (8001924 <HAL_MspInit+0x4c>)
 8001900:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001902:	4a08      	ldr	r2, [pc, #32]	@ (8001924 <HAL_MspInit+0x4c>)
 8001904:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001908:	6413      	str	r3, [r2, #64]	@ 0x40
 800190a:	4b06      	ldr	r3, [pc, #24]	@ (8001924 <HAL_MspInit+0x4c>)
 800190c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800190e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001912:	603b      	str	r3, [r7, #0]
 8001914:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001916:	bf00      	nop
 8001918:	370c      	adds	r7, #12
 800191a:	46bd      	mov	sp, r7
 800191c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001920:	4770      	bx	lr
 8001922:	bf00      	nop
 8001924:	40023800 	.word	0x40023800

08001928 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001928:	b480      	push	{r7}
 800192a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800192c:	bf00      	nop
 800192e:	e7fd      	b.n	800192c <NMI_Handler+0x4>

08001930 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001930:	b480      	push	{r7}
 8001932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001934:	bf00      	nop
 8001936:	e7fd      	b.n	8001934 <HardFault_Handler+0x4>

08001938 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001938:	b480      	push	{r7}
 800193a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800193c:	bf00      	nop
 800193e:	e7fd      	b.n	800193c <MemManage_Handler+0x4>

08001940 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001940:	b480      	push	{r7}
 8001942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001944:	bf00      	nop
 8001946:	e7fd      	b.n	8001944 <BusFault_Handler+0x4>

08001948 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001948:	b480      	push	{r7}
 800194a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800194c:	bf00      	nop
 800194e:	e7fd      	b.n	800194c <UsageFault_Handler+0x4>

08001950 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001950:	b480      	push	{r7}
 8001952:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001954:	bf00      	nop
 8001956:	46bd      	mov	sp, r7
 8001958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195c:	4770      	bx	lr

0800195e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800195e:	b480      	push	{r7}
 8001960:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001962:	bf00      	nop
 8001964:	46bd      	mov	sp, r7
 8001966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196a:	4770      	bx	lr

0800196c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800196c:	b480      	push	{r7}
 800196e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001970:	bf00      	nop
 8001972:	46bd      	mov	sp, r7
 8001974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001978:	4770      	bx	lr

0800197a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800197a:	b580      	push	{r7, lr}
 800197c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800197e:	f000 fb6f 	bl	8002060 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001982:	bf00      	nop
 8001984:	bd80      	pop	{r7, pc}
	...

08001988 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800198c:	4802      	ldr	r0, [pc, #8]	@ (8001998 <TIM2_IRQHandler+0x10>)
 800198e:	f003 f9b4 	bl	8004cfa <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001992:	bf00      	nop
 8001994:	bd80      	pop	{r7, pc}
 8001996:	bf00      	nop
 8001998:	20000258 	.word	0x20000258

0800199c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80019a0:	4802      	ldr	r0, [pc, #8]	@ (80019ac <USART1_IRQHandler+0x10>)
 80019a2:	f004 f8ef 	bl	8005b84 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80019a6:	bf00      	nop
 80019a8:	bd80      	pop	{r7, pc}
 80019aa:	bf00      	nop
 80019ac:	200002ec 	.word	0x200002ec

080019b0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80019b4:	4802      	ldr	r0, [pc, #8]	@ (80019c0 <USART2_IRQHandler+0x10>)
 80019b6:	f004 f8e5 	bl	8005b84 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80019ba:	bf00      	nop
 80019bc:	bd80      	pop	{r7, pc}
 80019be:	bf00      	nop
 80019c0:	20000330 	.word	0x20000330

080019c4 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80019c8:	4802      	ldr	r0, [pc, #8]	@ (80019d4 <DMA2_Stream0_IRQHandler+0x10>)
 80019ca:	f001 f841 	bl	8002a50 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80019ce:	bf00      	nop
 80019d0:	bd80      	pop	{r7, pc}
 80019d2:	bf00      	nop
 80019d4:	20000078 	.word	0x20000078

080019d8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80019d8:	b480      	push	{r7}
 80019da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80019dc:	4b06      	ldr	r3, [pc, #24]	@ (80019f8 <SystemInit+0x20>)
 80019de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80019e2:	4a05      	ldr	r2, [pc, #20]	@ (80019f8 <SystemInit+0x20>)
 80019e4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80019e8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80019ec:	bf00      	nop
 80019ee:	46bd      	mov	sp, r7
 80019f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f4:	4770      	bx	lr
 80019f6:	bf00      	nop
 80019f8:	e000ed00 	.word	0xe000ed00

080019fc <MX_TIM1_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim13;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b086      	sub	sp, #24
 8001a00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a02:	f107 0308 	add.w	r3, r7, #8
 8001a06:	2200      	movs	r2, #0
 8001a08:	601a      	str	r2, [r3, #0]
 8001a0a:	605a      	str	r2, [r3, #4]
 8001a0c:	609a      	str	r2, [r3, #8]
 8001a0e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a10:	463b      	mov	r3, r7
 8001a12:	2200      	movs	r2, #0
 8001a14:	601a      	str	r2, [r3, #0]
 8001a16:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001a18:	4b1e      	ldr	r3, [pc, #120]	@ (8001a94 <MX_TIM1_Init+0x98>)
 8001a1a:	4a1f      	ldr	r2, [pc, #124]	@ (8001a98 <MX_TIM1_Init+0x9c>)
 8001a1c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 84-1;
 8001a1e:	4b1d      	ldr	r3, [pc, #116]	@ (8001a94 <MX_TIM1_Init+0x98>)
 8001a20:	2253      	movs	r2, #83	@ 0x53
 8001a22:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a24:	4b1b      	ldr	r3, [pc, #108]	@ (8001a94 <MX_TIM1_Init+0x98>)
 8001a26:	2200      	movs	r2, #0
 8001a28:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001a2a:	4b1a      	ldr	r3, [pc, #104]	@ (8001a94 <MX_TIM1_Init+0x98>)
 8001a2c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001a30:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a32:	4b18      	ldr	r3, [pc, #96]	@ (8001a94 <MX_TIM1_Init+0x98>)
 8001a34:	2200      	movs	r2, #0
 8001a36:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001a38:	4b16      	ldr	r3, [pc, #88]	@ (8001a94 <MX_TIM1_Init+0x98>)
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a3e:	4b15      	ldr	r3, [pc, #84]	@ (8001a94 <MX_TIM1_Init+0x98>)
 8001a40:	2200      	movs	r2, #0
 8001a42:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001a44:	4813      	ldr	r0, [pc, #76]	@ (8001a94 <MX_TIM1_Init+0x98>)
 8001a46:	f002 ffd7 	bl	80049f8 <HAL_TIM_Base_Init>
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d001      	beq.n	8001a54 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8001a50:	f7ff fe6a 	bl	8001728 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a54:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001a58:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001a5a:	f107 0308 	add.w	r3, r7, #8
 8001a5e:	4619      	mov	r1, r3
 8001a60:	480c      	ldr	r0, [pc, #48]	@ (8001a94 <MX_TIM1_Init+0x98>)
 8001a62:	f003 fb15 	bl	8005090 <HAL_TIM_ConfigClockSource>
 8001a66:	4603      	mov	r3, r0
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d001      	beq.n	8001a70 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8001a6c:	f7ff fe5c 	bl	8001728 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a70:	2300      	movs	r3, #0
 8001a72:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a74:	2300      	movs	r3, #0
 8001a76:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001a78:	463b      	mov	r3, r7
 8001a7a:	4619      	mov	r1, r3
 8001a7c:	4805      	ldr	r0, [pc, #20]	@ (8001a94 <MX_TIM1_Init+0x98>)
 8001a7e:	f003 fee1 	bl	8005844 <HAL_TIMEx_MasterConfigSynchronization>
 8001a82:	4603      	mov	r3, r0
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d001      	beq.n	8001a8c <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001a88:	f7ff fe4e 	bl	8001728 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001a8c:	bf00      	nop
 8001a8e:	3718      	adds	r7, #24
 8001a90:	46bd      	mov	sp, r7
 8001a92:	bd80      	pop	{r7, pc}
 8001a94:	20000210 	.word	0x20000210
 8001a98:	40010000 	.word	0x40010000

08001a9c <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b086      	sub	sp, #24
 8001aa0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001aa2:	f107 0308 	add.w	r3, r7, #8
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	601a      	str	r2, [r3, #0]
 8001aaa:	605a      	str	r2, [r3, #4]
 8001aac:	609a      	str	r2, [r3, #8]
 8001aae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ab0:	463b      	mov	r3, r7
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	601a      	str	r2, [r3, #0]
 8001ab6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001ab8:	4b1d      	ldr	r3, [pc, #116]	@ (8001b30 <MX_TIM2_Init+0x94>)
 8001aba:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001abe:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 840-1;
 8001ac0:	4b1b      	ldr	r3, [pc, #108]	@ (8001b30 <MX_TIM2_Init+0x94>)
 8001ac2:	f240 3247 	movw	r2, #839	@ 0x347
 8001ac6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ac8:	4b19      	ldr	r3, [pc, #100]	@ (8001b30 <MX_TIM2_Init+0x94>)
 8001aca:	2200      	movs	r2, #0
 8001acc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 8001ace:	4b18      	ldr	r3, [pc, #96]	@ (8001b30 <MX_TIM2_Init+0x94>)
 8001ad0:	2263      	movs	r2, #99	@ 0x63
 8001ad2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ad4:	4b16      	ldr	r3, [pc, #88]	@ (8001b30 <MX_TIM2_Init+0x94>)
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ada:	4b15      	ldr	r3, [pc, #84]	@ (8001b30 <MX_TIM2_Init+0x94>)
 8001adc:	2200      	movs	r2, #0
 8001ade:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001ae0:	4813      	ldr	r0, [pc, #76]	@ (8001b30 <MX_TIM2_Init+0x94>)
 8001ae2:	f002 ff89 	bl	80049f8 <HAL_TIM_Base_Init>
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d001      	beq.n	8001af0 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001aec:	f7ff fe1c 	bl	8001728 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001af0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001af4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001af6:	f107 0308 	add.w	r3, r7, #8
 8001afa:	4619      	mov	r1, r3
 8001afc:	480c      	ldr	r0, [pc, #48]	@ (8001b30 <MX_TIM2_Init+0x94>)
 8001afe:	f003 fac7 	bl	8005090 <HAL_TIM_ConfigClockSource>
 8001b02:	4603      	mov	r3, r0
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d001      	beq.n	8001b0c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001b08:	f7ff fe0e 	bl	8001728 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b10:	2300      	movs	r3, #0
 8001b12:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001b14:	463b      	mov	r3, r7
 8001b16:	4619      	mov	r1, r3
 8001b18:	4805      	ldr	r0, [pc, #20]	@ (8001b30 <MX_TIM2_Init+0x94>)
 8001b1a:	f003 fe93 	bl	8005844 <HAL_TIMEx_MasterConfigSynchronization>
 8001b1e:	4603      	mov	r3, r0
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d001      	beq.n	8001b28 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001b24:	f7ff fe00 	bl	8001728 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001b28:	bf00      	nop
 8001b2a:	3718      	adds	r7, #24
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	bd80      	pop	{r7, pc}
 8001b30:	20000258 	.word	0x20000258

08001b34 <MX_TIM13_Init>:
/* TIM13 init function */
void MX_TIM13_Init(void)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b088      	sub	sp, #32
 8001b38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM13_Init 0 */

  /* USER CODE END TIM13_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001b3a:	1d3b      	adds	r3, r7, #4
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	601a      	str	r2, [r3, #0]
 8001b40:	605a      	str	r2, [r3, #4]
 8001b42:	609a      	str	r2, [r3, #8]
 8001b44:	60da      	str	r2, [r3, #12]
 8001b46:	611a      	str	r2, [r3, #16]
 8001b48:	615a      	str	r2, [r3, #20]
 8001b4a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8001b4c:	4b1e      	ldr	r3, [pc, #120]	@ (8001bc8 <MX_TIM13_Init+0x94>)
 8001b4e:	4a1f      	ldr	r2, [pc, #124]	@ (8001bcc <MX_TIM13_Init+0x98>)
 8001b50:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 840-1;
 8001b52:	4b1d      	ldr	r3, [pc, #116]	@ (8001bc8 <MX_TIM13_Init+0x94>)
 8001b54:	f240 3247 	movw	r2, #839	@ 0x347
 8001b58:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b5a:	4b1b      	ldr	r3, [pc, #108]	@ (8001bc8 <MX_TIM13_Init+0x94>)
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 100-1;
 8001b60:	4b19      	ldr	r3, [pc, #100]	@ (8001bc8 <MX_TIM13_Init+0x94>)
 8001b62:	2263      	movs	r2, #99	@ 0x63
 8001b64:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b66:	4b18      	ldr	r3, [pc, #96]	@ (8001bc8 <MX_TIM13_Init+0x94>)
 8001b68:	2200      	movs	r2, #0
 8001b6a:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b6c:	4b16      	ldr	r3, [pc, #88]	@ (8001bc8 <MX_TIM13_Init+0x94>)
 8001b6e:	2200      	movs	r2, #0
 8001b70:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8001b72:	4815      	ldr	r0, [pc, #84]	@ (8001bc8 <MX_TIM13_Init+0x94>)
 8001b74:	f002 ff40 	bl	80049f8 <HAL_TIM_Base_Init>
 8001b78:	4603      	mov	r3, r0
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d001      	beq.n	8001b82 <MX_TIM13_Init+0x4e>
  {
    Error_Handler();
 8001b7e:	f7ff fdd3 	bl	8001728 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim13) != HAL_OK)
 8001b82:	4811      	ldr	r0, [pc, #68]	@ (8001bc8 <MX_TIM13_Init+0x94>)
 8001b84:	f003 f860 	bl	8004c48 <HAL_TIM_PWM_Init>
 8001b88:	4603      	mov	r3, r0
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d001      	beq.n	8001b92 <MX_TIM13_Init+0x5e>
  {
    Error_Handler();
 8001b8e:	f7ff fdcb 	bl	8001728 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001b92:	2360      	movs	r3, #96	@ 0x60
 8001b94:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001b96:	2300      	movs	r3, #0
 8001b98:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim13, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001ba2:	1d3b      	adds	r3, r7, #4
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	4619      	mov	r1, r3
 8001ba8:	4807      	ldr	r0, [pc, #28]	@ (8001bc8 <MX_TIM13_Init+0x94>)
 8001baa:	f003 f9af 	bl	8004f0c <HAL_TIM_PWM_ConfigChannel>
 8001bae:	4603      	mov	r3, r0
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d001      	beq.n	8001bb8 <MX_TIM13_Init+0x84>
  {
    Error_Handler();
 8001bb4:	f7ff fdb8 	bl	8001728 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */
  HAL_TIM_MspPostInit(&htim13);
 8001bb8:	4803      	ldr	r0, [pc, #12]	@ (8001bc8 <MX_TIM13_Init+0x94>)
 8001bba:	f000 f85b 	bl	8001c74 <HAL_TIM_MspPostInit>

}
 8001bbe:	bf00      	nop
 8001bc0:	3720      	adds	r7, #32
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	bd80      	pop	{r7, pc}
 8001bc6:	bf00      	nop
 8001bc8:	200002a0 	.word	0x200002a0
 8001bcc:	40001c00 	.word	0x40001c00

08001bd0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b086      	sub	sp, #24
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	4a22      	ldr	r2, [pc, #136]	@ (8001c68 <HAL_TIM_Base_MspInit+0x98>)
 8001bde:	4293      	cmp	r3, r2
 8001be0:	d10e      	bne.n	8001c00 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001be2:	2300      	movs	r3, #0
 8001be4:	617b      	str	r3, [r7, #20]
 8001be6:	4b21      	ldr	r3, [pc, #132]	@ (8001c6c <HAL_TIM_Base_MspInit+0x9c>)
 8001be8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bea:	4a20      	ldr	r2, [pc, #128]	@ (8001c6c <HAL_TIM_Base_MspInit+0x9c>)
 8001bec:	f043 0301 	orr.w	r3, r3, #1
 8001bf0:	6453      	str	r3, [r2, #68]	@ 0x44
 8001bf2:	4b1e      	ldr	r3, [pc, #120]	@ (8001c6c <HAL_TIM_Base_MspInit+0x9c>)
 8001bf4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bf6:	f003 0301 	and.w	r3, r3, #1
 8001bfa:	617b      	str	r3, [r7, #20]
 8001bfc:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM13_CLK_ENABLE();
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }
}
 8001bfe:	e02e      	b.n	8001c5e <HAL_TIM_Base_MspInit+0x8e>
  else if(tim_baseHandle->Instance==TIM2)
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001c08:	d116      	bne.n	8001c38 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	613b      	str	r3, [r7, #16]
 8001c0e:	4b17      	ldr	r3, [pc, #92]	@ (8001c6c <HAL_TIM_Base_MspInit+0x9c>)
 8001c10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c12:	4a16      	ldr	r2, [pc, #88]	@ (8001c6c <HAL_TIM_Base_MspInit+0x9c>)
 8001c14:	f043 0301 	orr.w	r3, r3, #1
 8001c18:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c1a:	4b14      	ldr	r3, [pc, #80]	@ (8001c6c <HAL_TIM_Base_MspInit+0x9c>)
 8001c1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c1e:	f003 0301 	and.w	r3, r3, #1
 8001c22:	613b      	str	r3, [r7, #16]
 8001c24:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001c26:	2200      	movs	r2, #0
 8001c28:	2100      	movs	r1, #0
 8001c2a:	201c      	movs	r0, #28
 8001c2c:	f000 fd99 	bl	8002762 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001c30:	201c      	movs	r0, #28
 8001c32:	f000 fdb2 	bl	800279a <HAL_NVIC_EnableIRQ>
}
 8001c36:	e012      	b.n	8001c5e <HAL_TIM_Base_MspInit+0x8e>
  else if(tim_baseHandle->Instance==TIM13)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	4a0c      	ldr	r2, [pc, #48]	@ (8001c70 <HAL_TIM_Base_MspInit+0xa0>)
 8001c3e:	4293      	cmp	r3, r2
 8001c40:	d10d      	bne.n	8001c5e <HAL_TIM_Base_MspInit+0x8e>
    __HAL_RCC_TIM13_CLK_ENABLE();
 8001c42:	2300      	movs	r3, #0
 8001c44:	60fb      	str	r3, [r7, #12]
 8001c46:	4b09      	ldr	r3, [pc, #36]	@ (8001c6c <HAL_TIM_Base_MspInit+0x9c>)
 8001c48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c4a:	4a08      	ldr	r2, [pc, #32]	@ (8001c6c <HAL_TIM_Base_MspInit+0x9c>)
 8001c4c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001c50:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c52:	4b06      	ldr	r3, [pc, #24]	@ (8001c6c <HAL_TIM_Base_MspInit+0x9c>)
 8001c54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c56:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001c5a:	60fb      	str	r3, [r7, #12]
 8001c5c:	68fb      	ldr	r3, [r7, #12]
}
 8001c5e:	bf00      	nop
 8001c60:	3718      	adds	r7, #24
 8001c62:	46bd      	mov	sp, r7
 8001c64:	bd80      	pop	{r7, pc}
 8001c66:	bf00      	nop
 8001c68:	40010000 	.word	0x40010000
 8001c6c:	40023800 	.word	0x40023800
 8001c70:	40001c00 	.word	0x40001c00

08001c74 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b088      	sub	sp, #32
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c7c:	f107 030c 	add.w	r3, r7, #12
 8001c80:	2200      	movs	r2, #0
 8001c82:	601a      	str	r2, [r3, #0]
 8001c84:	605a      	str	r2, [r3, #4]
 8001c86:	609a      	str	r2, [r3, #8]
 8001c88:	60da      	str	r2, [r3, #12]
 8001c8a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM13)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	4a12      	ldr	r2, [pc, #72]	@ (8001cdc <HAL_TIM_MspPostInit+0x68>)
 8001c92:	4293      	cmp	r3, r2
 8001c94:	d11e      	bne.n	8001cd4 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM13_MspPostInit 0 */

  /* USER CODE END TIM13_MspPostInit 0 */

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001c96:	2300      	movs	r3, #0
 8001c98:	60bb      	str	r3, [r7, #8]
 8001c9a:	4b11      	ldr	r3, [pc, #68]	@ (8001ce0 <HAL_TIM_MspPostInit+0x6c>)
 8001c9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c9e:	4a10      	ldr	r2, [pc, #64]	@ (8001ce0 <HAL_TIM_MspPostInit+0x6c>)
 8001ca0:	f043 0320 	orr.w	r3, r3, #32
 8001ca4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ca6:	4b0e      	ldr	r3, [pc, #56]	@ (8001ce0 <HAL_TIM_MspPostInit+0x6c>)
 8001ca8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001caa:	f003 0320 	and.w	r3, r3, #32
 8001cae:	60bb      	str	r3, [r7, #8]
 8001cb0:	68bb      	ldr	r3, [r7, #8]
    /**TIM13 GPIO Configuration
    PF8     ------> TIM13_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001cb2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001cb6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cb8:	2302      	movs	r3, #2
 8001cba:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
 8001cc4:	2309      	movs	r3, #9
 8001cc6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001cc8:	f107 030c 	add.w	r3, r7, #12
 8001ccc:	4619      	mov	r1, r3
 8001cce:	4805      	ldr	r0, [pc, #20]	@ (8001ce4 <HAL_TIM_MspPostInit+0x70>)
 8001cd0:	f001 f8fa 	bl	8002ec8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM13_MspPostInit 1 */

  /* USER CODE END TIM13_MspPostInit 1 */
  }

}
 8001cd4:	bf00      	nop
 8001cd6:	3720      	adds	r7, #32
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	bd80      	pop	{r7, pc}
 8001cdc:	40001c00 	.word	0x40001c00
 8001ce0:	40023800 	.word	0x40023800
 8001ce4:	40021400 	.word	0x40021400

08001ce8 <uart_init_esp>:
    uart_Rs232SendString(".");
    sprintf((void*)msg,"%ld",num%100);
    uart_Rs232SendString(msg);
}

void uart_init_esp(){
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(&huart2, &receive_buffer2, 1);
 8001cec:	2201      	movs	r2, #1
 8001cee:	4906      	ldr	r1, [pc, #24]	@ (8001d08 <uart_init_esp+0x20>)
 8001cf0:	4806      	ldr	r0, [pc, #24]	@ (8001d0c <uart_init_esp+0x24>)
 8001cf2:	f003 ff16 	bl	8005b22 <HAL_UART_Receive_IT>
	HAL_GPIO_WritePin(ESP12_PWR_GPIO_Port, ESP12_PWR_Pin, 1);
 8001cf6:	2201      	movs	r2, #1
 8001cf8:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001cfc:	4804      	ldr	r0, [pc, #16]	@ (8001d10 <uart_init_esp+0x28>)
 8001cfe:	f001 fa7f 	bl	8003200 <HAL_GPIO_WritePin>
}
 8001d02:	bf00      	nop
 8001d04:	bd80      	pop	{r7, pc}
 8001d06:	bf00      	nop
 8001d08:	200002e9 	.word	0x200002e9
 8001d0c:	20000330 	.word	0x20000330
 8001d10:	40021400 	.word	0x40021400

08001d14 <HAL_UART_RxCpltCallback>:

void uart_EspSendBytes(uint8_t* bytes, uint16_t size){
	HAL_UART_Transmit(&huart2, bytes, size, 10);
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b082      	sub	sp, #8
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART1){
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	4a19      	ldr	r2, [pc, #100]	@ (8001d88 <HAL_UART_RxCpltCallback+0x74>)
 8001d22:	4293      	cmp	r3, r2
 8001d24:	d10a      	bne.n	8001d3c <HAL_UART_RxCpltCallback+0x28>
		// rs232 isr
		// can be modified
		HAL_UART_Transmit(&huart1, &receive_buffer1, 1, 10);
 8001d26:	230a      	movs	r3, #10
 8001d28:	2201      	movs	r2, #1
 8001d2a:	4918      	ldr	r1, [pc, #96]	@ (8001d8c <HAL_UART_RxCpltCallback+0x78>)
 8001d2c:	4818      	ldr	r0, [pc, #96]	@ (8001d90 <HAL_UART_RxCpltCallback+0x7c>)
 8001d2e:	f003 fe66 	bl	80059fe <HAL_UART_Transmit>

		// turn on the receive interrupt
		HAL_UART_Receive_IT(&huart1, &receive_buffer1, 1);
 8001d32:	2201      	movs	r2, #1
 8001d34:	4915      	ldr	r1, [pc, #84]	@ (8001d8c <HAL_UART_RxCpltCallback+0x78>)
 8001d36:	4816      	ldr	r0, [pc, #88]	@ (8001d90 <HAL_UART_RxCpltCallback+0x7c>)
 8001d38:	f003 fef3 	bl	8005b22 <HAL_UART_Receive_IT>
	}

	if(huart->Instance == USART2){
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	4a14      	ldr	r2, [pc, #80]	@ (8001d94 <HAL_UART_RxCpltCallback+0x80>)
 8001d42:	4293      	cmp	r3, r2
 8001d44:	d11b      	bne.n	8001d7e <HAL_UART_RxCpltCallback+0x6a>
		if(receive_buffer2 == 'O') check_esp = 1;
 8001d46:	4b14      	ldr	r3, [pc, #80]	@ (8001d98 <HAL_UART_RxCpltCallback+0x84>)
 8001d48:	781b      	ldrb	r3, [r3, #0]
 8001d4a:	2b4f      	cmp	r3, #79	@ 0x4f
 8001d4c:	d103      	bne.n	8001d56 <HAL_UART_RxCpltCallback+0x42>
 8001d4e:	4b13      	ldr	r3, [pc, #76]	@ (8001d9c <HAL_UART_RxCpltCallback+0x88>)
 8001d50:	2201      	movs	r2, #1
 8001d52:	701a      	strb	r2, [r3, #0]
 8001d54:	e00e      	b.n	8001d74 <HAL_UART_RxCpltCallback+0x60>
		else if(receive_buffer2 == 'a') light_status = 0;
 8001d56:	4b10      	ldr	r3, [pc, #64]	@ (8001d98 <HAL_UART_RxCpltCallback+0x84>)
 8001d58:	781b      	ldrb	r3, [r3, #0]
 8001d5a:	2b61      	cmp	r3, #97	@ 0x61
 8001d5c:	d103      	bne.n	8001d66 <HAL_UART_RxCpltCallback+0x52>
 8001d5e:	4b10      	ldr	r3, [pc, #64]	@ (8001da0 <HAL_UART_RxCpltCallback+0x8c>)
 8001d60:	2200      	movs	r2, #0
 8001d62:	701a      	strb	r2, [r3, #0]
 8001d64:	e006      	b.n	8001d74 <HAL_UART_RxCpltCallback+0x60>
		else if(receive_buffer2 == 'A') light_status = 1;
 8001d66:	4b0c      	ldr	r3, [pc, #48]	@ (8001d98 <HAL_UART_RxCpltCallback+0x84>)
 8001d68:	781b      	ldrb	r3, [r3, #0]
 8001d6a:	2b41      	cmp	r3, #65	@ 0x41
 8001d6c:	d102      	bne.n	8001d74 <HAL_UART_RxCpltCallback+0x60>
 8001d6e:	4b0c      	ldr	r3, [pc, #48]	@ (8001da0 <HAL_UART_RxCpltCallback+0x8c>)
 8001d70:	2201      	movs	r2, #1
 8001d72:	701a      	strb	r2, [r3, #0]
		HAL_UART_Receive_IT(&huart2, &receive_buffer2, 1);
 8001d74:	2201      	movs	r2, #1
 8001d76:	4908      	ldr	r1, [pc, #32]	@ (8001d98 <HAL_UART_RxCpltCallback+0x84>)
 8001d78:	480a      	ldr	r0, [pc, #40]	@ (8001da4 <HAL_UART_RxCpltCallback+0x90>)
 8001d7a:	f003 fed2 	bl	8005b22 <HAL_UART_Receive_IT>
	}
}
 8001d7e:	bf00      	nop
 8001d80:	3708      	adds	r7, #8
 8001d82:	46bd      	mov	sp, r7
 8001d84:	bd80      	pop	{r7, pc}
 8001d86:	bf00      	nop
 8001d88:	40011000 	.word	0x40011000
 8001d8c:	200002e8 	.word	0x200002e8
 8001d90:	200002ec 	.word	0x200002ec
 8001d94:	40004400 	.word	0x40004400
 8001d98:	200002e9 	.word	0x200002e9
 8001d9c:	200002ea 	.word	0x200002ea
 8001da0:	200001b0 	.word	0x200001b0
 8001da4:	20000330 	.word	0x20000330

08001da8 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001dac:	4b11      	ldr	r3, [pc, #68]	@ (8001df4 <MX_USART1_UART_Init+0x4c>)
 8001dae:	4a12      	ldr	r2, [pc, #72]	@ (8001df8 <MX_USART1_UART_Init+0x50>)
 8001db0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001db2:	4b10      	ldr	r3, [pc, #64]	@ (8001df4 <MX_USART1_UART_Init+0x4c>)
 8001db4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001db8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001dba:	4b0e      	ldr	r3, [pc, #56]	@ (8001df4 <MX_USART1_UART_Init+0x4c>)
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001dc0:	4b0c      	ldr	r3, [pc, #48]	@ (8001df4 <MX_USART1_UART_Init+0x4c>)
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001dc6:	4b0b      	ldr	r3, [pc, #44]	@ (8001df4 <MX_USART1_UART_Init+0x4c>)
 8001dc8:	2200      	movs	r2, #0
 8001dca:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001dcc:	4b09      	ldr	r3, [pc, #36]	@ (8001df4 <MX_USART1_UART_Init+0x4c>)
 8001dce:	220c      	movs	r2, #12
 8001dd0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001dd2:	4b08      	ldr	r3, [pc, #32]	@ (8001df4 <MX_USART1_UART_Init+0x4c>)
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001dd8:	4b06      	ldr	r3, [pc, #24]	@ (8001df4 <MX_USART1_UART_Init+0x4c>)
 8001dda:	2200      	movs	r2, #0
 8001ddc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001dde:	4805      	ldr	r0, [pc, #20]	@ (8001df4 <MX_USART1_UART_Init+0x4c>)
 8001de0:	f003 fdc0 	bl	8005964 <HAL_UART_Init>
 8001de4:	4603      	mov	r3, r0
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d001      	beq.n	8001dee <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001dea:	f7ff fc9d 	bl	8001728 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001dee:	bf00      	nop
 8001df0:	bd80      	pop	{r7, pc}
 8001df2:	bf00      	nop
 8001df4:	200002ec 	.word	0x200002ec
 8001df8:	40011000 	.word	0x40011000

08001dfc <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001e00:	4b11      	ldr	r3, [pc, #68]	@ (8001e48 <MX_USART2_UART_Init+0x4c>)
 8001e02:	4a12      	ldr	r2, [pc, #72]	@ (8001e4c <MX_USART2_UART_Init+0x50>)
 8001e04:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001e06:	4b10      	ldr	r3, [pc, #64]	@ (8001e48 <MX_USART2_UART_Init+0x4c>)
 8001e08:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001e0c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001e0e:	4b0e      	ldr	r3, [pc, #56]	@ (8001e48 <MX_USART2_UART_Init+0x4c>)
 8001e10:	2200      	movs	r2, #0
 8001e12:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001e14:	4b0c      	ldr	r3, [pc, #48]	@ (8001e48 <MX_USART2_UART_Init+0x4c>)
 8001e16:	2200      	movs	r2, #0
 8001e18:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001e1a:	4b0b      	ldr	r3, [pc, #44]	@ (8001e48 <MX_USART2_UART_Init+0x4c>)
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001e20:	4b09      	ldr	r3, [pc, #36]	@ (8001e48 <MX_USART2_UART_Init+0x4c>)
 8001e22:	220c      	movs	r2, #12
 8001e24:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e26:	4b08      	ldr	r3, [pc, #32]	@ (8001e48 <MX_USART2_UART_Init+0x4c>)
 8001e28:	2200      	movs	r2, #0
 8001e2a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e2c:	4b06      	ldr	r3, [pc, #24]	@ (8001e48 <MX_USART2_UART_Init+0x4c>)
 8001e2e:	2200      	movs	r2, #0
 8001e30:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001e32:	4805      	ldr	r0, [pc, #20]	@ (8001e48 <MX_USART2_UART_Init+0x4c>)
 8001e34:	f003 fd96 	bl	8005964 <HAL_UART_Init>
 8001e38:	4603      	mov	r3, r0
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d001      	beq.n	8001e42 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001e3e:	f7ff fc73 	bl	8001728 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001e42:	bf00      	nop
 8001e44:	bd80      	pop	{r7, pc}
 8001e46:	bf00      	nop
 8001e48:	20000330 	.word	0x20000330
 8001e4c:	40004400 	.word	0x40004400

08001e50 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b08c      	sub	sp, #48	@ 0x30
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e58:	f107 031c 	add.w	r3, r7, #28
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	601a      	str	r2, [r3, #0]
 8001e60:	605a      	str	r2, [r3, #4]
 8001e62:	609a      	str	r2, [r3, #8]
 8001e64:	60da      	str	r2, [r3, #12]
 8001e66:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	4a3a      	ldr	r2, [pc, #232]	@ (8001f58 <HAL_UART_MspInit+0x108>)
 8001e6e:	4293      	cmp	r3, r2
 8001e70:	d135      	bne.n	8001ede <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001e72:	2300      	movs	r3, #0
 8001e74:	61bb      	str	r3, [r7, #24]
 8001e76:	4b39      	ldr	r3, [pc, #228]	@ (8001f5c <HAL_UART_MspInit+0x10c>)
 8001e78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e7a:	4a38      	ldr	r2, [pc, #224]	@ (8001f5c <HAL_UART_MspInit+0x10c>)
 8001e7c:	f043 0310 	orr.w	r3, r3, #16
 8001e80:	6453      	str	r3, [r2, #68]	@ 0x44
 8001e82:	4b36      	ldr	r3, [pc, #216]	@ (8001f5c <HAL_UART_MspInit+0x10c>)
 8001e84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e86:	f003 0310 	and.w	r3, r3, #16
 8001e8a:	61bb      	str	r3, [r7, #24]
 8001e8c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e8e:	2300      	movs	r3, #0
 8001e90:	617b      	str	r3, [r7, #20]
 8001e92:	4b32      	ldr	r3, [pc, #200]	@ (8001f5c <HAL_UART_MspInit+0x10c>)
 8001e94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e96:	4a31      	ldr	r2, [pc, #196]	@ (8001f5c <HAL_UART_MspInit+0x10c>)
 8001e98:	f043 0301 	orr.w	r3, r3, #1
 8001e9c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e9e:	4b2f      	ldr	r3, [pc, #188]	@ (8001f5c <HAL_UART_MspInit+0x10c>)
 8001ea0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ea2:	f003 0301 	and.w	r3, r3, #1
 8001ea6:	617b      	str	r3, [r7, #20]
 8001ea8:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001eaa:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001eae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001eb0:	2302      	movs	r3, #2
 8001eb2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001eb8:	2303      	movs	r3, #3
 8001eba:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001ebc:	2307      	movs	r3, #7
 8001ebe:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ec0:	f107 031c 	add.w	r3, r7, #28
 8001ec4:	4619      	mov	r1, r3
 8001ec6:	4826      	ldr	r0, [pc, #152]	@ (8001f60 <HAL_UART_MspInit+0x110>)
 8001ec8:	f000 fffe 	bl	8002ec8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001ecc:	2200      	movs	r2, #0
 8001ece:	2100      	movs	r1, #0
 8001ed0:	2025      	movs	r0, #37	@ 0x25
 8001ed2:	f000 fc46 	bl	8002762 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001ed6:	2025      	movs	r0, #37	@ 0x25
 8001ed8:	f000 fc5f 	bl	800279a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001edc:	e038      	b.n	8001f50 <HAL_UART_MspInit+0x100>
  else if(uartHandle->Instance==USART2)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	4a20      	ldr	r2, [pc, #128]	@ (8001f64 <HAL_UART_MspInit+0x114>)
 8001ee4:	4293      	cmp	r3, r2
 8001ee6:	d133      	bne.n	8001f50 <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001ee8:	2300      	movs	r3, #0
 8001eea:	613b      	str	r3, [r7, #16]
 8001eec:	4b1b      	ldr	r3, [pc, #108]	@ (8001f5c <HAL_UART_MspInit+0x10c>)
 8001eee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ef0:	4a1a      	ldr	r2, [pc, #104]	@ (8001f5c <HAL_UART_MspInit+0x10c>)
 8001ef2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001ef6:	6413      	str	r3, [r2, #64]	@ 0x40
 8001ef8:	4b18      	ldr	r3, [pc, #96]	@ (8001f5c <HAL_UART_MspInit+0x10c>)
 8001efa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001efc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f00:	613b      	str	r3, [r7, #16]
 8001f02:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f04:	2300      	movs	r3, #0
 8001f06:	60fb      	str	r3, [r7, #12]
 8001f08:	4b14      	ldr	r3, [pc, #80]	@ (8001f5c <HAL_UART_MspInit+0x10c>)
 8001f0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f0c:	4a13      	ldr	r2, [pc, #76]	@ (8001f5c <HAL_UART_MspInit+0x10c>)
 8001f0e:	f043 0301 	orr.w	r3, r3, #1
 8001f12:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f14:	4b11      	ldr	r3, [pc, #68]	@ (8001f5c <HAL_UART_MspInit+0x10c>)
 8001f16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f18:	f003 0301 	and.w	r3, r3, #1
 8001f1c:	60fb      	str	r3, [r7, #12]
 8001f1e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001f20:	230c      	movs	r3, #12
 8001f22:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f24:	2302      	movs	r3, #2
 8001f26:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f28:	2300      	movs	r3, #0
 8001f2a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f2c:	2303      	movs	r3, #3
 8001f2e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001f30:	2307      	movs	r3, #7
 8001f32:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f34:	f107 031c 	add.w	r3, r7, #28
 8001f38:	4619      	mov	r1, r3
 8001f3a:	4809      	ldr	r0, [pc, #36]	@ (8001f60 <HAL_UART_MspInit+0x110>)
 8001f3c:	f000 ffc4 	bl	8002ec8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001f40:	2200      	movs	r2, #0
 8001f42:	2100      	movs	r1, #0
 8001f44:	2026      	movs	r0, #38	@ 0x26
 8001f46:	f000 fc0c 	bl	8002762 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001f4a:	2026      	movs	r0, #38	@ 0x26
 8001f4c:	f000 fc25 	bl	800279a <HAL_NVIC_EnableIRQ>
}
 8001f50:	bf00      	nop
 8001f52:	3730      	adds	r7, #48	@ 0x30
 8001f54:	46bd      	mov	sp, r7
 8001f56:	bd80      	pop	{r7, pc}
 8001f58:	40011000 	.word	0x40011000
 8001f5c:	40023800 	.word	0x40023800
 8001f60:	40020000 	.word	0x40020000
 8001f64:	40004400 	.word	0x40004400

08001f68 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001f68:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001fa0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001f6c:	480d      	ldr	r0, [pc, #52]	@ (8001fa4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001f6e:	490e      	ldr	r1, [pc, #56]	@ (8001fa8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001f70:	4a0e      	ldr	r2, [pc, #56]	@ (8001fac <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001f72:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f74:	e002      	b.n	8001f7c <LoopCopyDataInit>

08001f76 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f76:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f78:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f7a:	3304      	adds	r3, #4

08001f7c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f7c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f7e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f80:	d3f9      	bcc.n	8001f76 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f82:	4a0b      	ldr	r2, [pc, #44]	@ (8001fb0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001f84:	4c0b      	ldr	r4, [pc, #44]	@ (8001fb4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001f86:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f88:	e001      	b.n	8001f8e <LoopFillZerobss>

08001f8a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f8a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f8c:	3204      	adds	r2, #4

08001f8e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f8e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f90:	d3fb      	bcc.n	8001f8a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001f92:	f7ff fd21 	bl	80019d8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001f96:	f004 fe31 	bl	8006bfc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001f9a:	f7ff facf 	bl	800153c <main>
  bx  lr    
 8001f9e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001fa0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001fa4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001fa8:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8001fac:	08009c1c 	.word	0x08009c1c
  ldr r2, =_sbss
 8001fb0:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8001fb4:	20000378 	.word	0x20000378

08001fb8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001fb8:	e7fe      	b.n	8001fb8 <ADC_IRQHandler>
	...

08001fbc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001fc0:	4b0e      	ldr	r3, [pc, #56]	@ (8001ffc <HAL_Init+0x40>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	4a0d      	ldr	r2, [pc, #52]	@ (8001ffc <HAL_Init+0x40>)
 8001fc6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001fca:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001fcc:	4b0b      	ldr	r3, [pc, #44]	@ (8001ffc <HAL_Init+0x40>)
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	4a0a      	ldr	r2, [pc, #40]	@ (8001ffc <HAL_Init+0x40>)
 8001fd2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001fd6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001fd8:	4b08      	ldr	r3, [pc, #32]	@ (8001ffc <HAL_Init+0x40>)
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	4a07      	ldr	r2, [pc, #28]	@ (8001ffc <HAL_Init+0x40>)
 8001fde:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001fe2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001fe4:	2003      	movs	r0, #3
 8001fe6:	f000 fbb1 	bl	800274c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001fea:	200f      	movs	r0, #15
 8001fec:	f000 f808 	bl	8002000 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001ff0:	f7ff fc72 	bl	80018d8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ff4:	2300      	movs	r3, #0
}
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	bd80      	pop	{r7, pc}
 8001ffa:	bf00      	nop
 8001ffc:	40023c00 	.word	0x40023c00

08002000 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	b082      	sub	sp, #8
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002008:	4b12      	ldr	r3, [pc, #72]	@ (8002054 <HAL_InitTick+0x54>)
 800200a:	681a      	ldr	r2, [r3, #0]
 800200c:	4b12      	ldr	r3, [pc, #72]	@ (8002058 <HAL_InitTick+0x58>)
 800200e:	781b      	ldrb	r3, [r3, #0]
 8002010:	4619      	mov	r1, r3
 8002012:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002016:	fbb3 f3f1 	udiv	r3, r3, r1
 800201a:	fbb2 f3f3 	udiv	r3, r2, r3
 800201e:	4618      	mov	r0, r3
 8002020:	f000 fbc9 	bl	80027b6 <HAL_SYSTICK_Config>
 8002024:	4603      	mov	r3, r0
 8002026:	2b00      	cmp	r3, #0
 8002028:	d001      	beq.n	800202e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800202a:	2301      	movs	r3, #1
 800202c:	e00e      	b.n	800204c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	2b0f      	cmp	r3, #15
 8002032:	d80a      	bhi.n	800204a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002034:	2200      	movs	r2, #0
 8002036:	6879      	ldr	r1, [r7, #4]
 8002038:	f04f 30ff 	mov.w	r0, #4294967295
 800203c:	f000 fb91 	bl	8002762 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002040:	4a06      	ldr	r2, [pc, #24]	@ (800205c <HAL_InitTick+0x5c>)
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002046:	2300      	movs	r3, #0
 8002048:	e000      	b.n	800204c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800204a:	2301      	movs	r3, #1
}
 800204c:	4618      	mov	r0, r3
 800204e:	3708      	adds	r7, #8
 8002050:	46bd      	mov	sp, r7
 8002052:	bd80      	pop	{r7, pc}
 8002054:	20000008 	.word	0x20000008
 8002058:	20000010 	.word	0x20000010
 800205c:	2000000c 	.word	0x2000000c

08002060 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002060:	b480      	push	{r7}
 8002062:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002064:	4b06      	ldr	r3, [pc, #24]	@ (8002080 <HAL_IncTick+0x20>)
 8002066:	781b      	ldrb	r3, [r3, #0]
 8002068:	461a      	mov	r2, r3
 800206a:	4b06      	ldr	r3, [pc, #24]	@ (8002084 <HAL_IncTick+0x24>)
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	4413      	add	r3, r2
 8002070:	4a04      	ldr	r2, [pc, #16]	@ (8002084 <HAL_IncTick+0x24>)
 8002072:	6013      	str	r3, [r2, #0]
}
 8002074:	bf00      	nop
 8002076:	46bd      	mov	sp, r7
 8002078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207c:	4770      	bx	lr
 800207e:	bf00      	nop
 8002080:	20000010 	.word	0x20000010
 8002084:	20000374 	.word	0x20000374

08002088 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002088:	b480      	push	{r7}
 800208a:	af00      	add	r7, sp, #0
  return uwTick;
 800208c:	4b03      	ldr	r3, [pc, #12]	@ (800209c <HAL_GetTick+0x14>)
 800208e:	681b      	ldr	r3, [r3, #0]
}
 8002090:	4618      	mov	r0, r3
 8002092:	46bd      	mov	sp, r7
 8002094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002098:	4770      	bx	lr
 800209a:	bf00      	nop
 800209c:	20000374 	.word	0x20000374

080020a0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b084      	sub	sp, #16
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80020a8:	f7ff ffee 	bl	8002088 <HAL_GetTick>
 80020ac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020b8:	d005      	beq.n	80020c6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80020ba:	4b0a      	ldr	r3, [pc, #40]	@ (80020e4 <HAL_Delay+0x44>)
 80020bc:	781b      	ldrb	r3, [r3, #0]
 80020be:	461a      	mov	r2, r3
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	4413      	add	r3, r2
 80020c4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80020c6:	bf00      	nop
 80020c8:	f7ff ffde 	bl	8002088 <HAL_GetTick>
 80020cc:	4602      	mov	r2, r0
 80020ce:	68bb      	ldr	r3, [r7, #8]
 80020d0:	1ad3      	subs	r3, r2, r3
 80020d2:	68fa      	ldr	r2, [r7, #12]
 80020d4:	429a      	cmp	r2, r3
 80020d6:	d8f7      	bhi.n	80020c8 <HAL_Delay+0x28>
  {
  }
}
 80020d8:	bf00      	nop
 80020da:	bf00      	nop
 80020dc:	3710      	adds	r7, #16
 80020de:	46bd      	mov	sp, r7
 80020e0:	bd80      	pop	{r7, pc}
 80020e2:	bf00      	nop
 80020e4:	20000010 	.word	0x20000010

080020e8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b084      	sub	sp, #16
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80020f0:	2300      	movs	r3, #0
 80020f2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d101      	bne.n	80020fe <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80020fa:	2301      	movs	r3, #1
 80020fc:	e033      	b.n	8002166 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002102:	2b00      	cmp	r3, #0
 8002104:	d109      	bne.n	800211a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002106:	6878      	ldr	r0, [r7, #4]
 8002108:	f7fe fa60 	bl	80005cc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	2200      	movs	r2, #0
 8002110:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	2200      	movs	r2, #0
 8002116:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800211e:	f003 0310 	and.w	r3, r3, #16
 8002122:	2b00      	cmp	r3, #0
 8002124:	d118      	bne.n	8002158 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800212a:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800212e:	f023 0302 	bic.w	r3, r3, #2
 8002132:	f043 0202 	orr.w	r2, r3, #2
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800213a:	6878      	ldr	r0, [r7, #4]
 800213c:	f000 f93a 	bl	80023b4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	2200      	movs	r2, #0
 8002144:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800214a:	f023 0303 	bic.w	r3, r3, #3
 800214e:	f043 0201 	orr.w	r2, r3, #1
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	641a      	str	r2, [r3, #64]	@ 0x40
 8002156:	e001      	b.n	800215c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002158:	2301      	movs	r3, #1
 800215a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	2200      	movs	r2, #0
 8002160:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002164:	7bfb      	ldrb	r3, [r7, #15]
}
 8002166:	4618      	mov	r0, r3
 8002168:	3710      	adds	r7, #16
 800216a:	46bd      	mov	sp, r7
 800216c:	bd80      	pop	{r7, pc}
	...

08002170 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002170:	b480      	push	{r7}
 8002172:	b085      	sub	sp, #20
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
 8002178:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800217a:	2300      	movs	r3, #0
 800217c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002184:	2b01      	cmp	r3, #1
 8002186:	d101      	bne.n	800218c <HAL_ADC_ConfigChannel+0x1c>
 8002188:	2302      	movs	r3, #2
 800218a:	e105      	b.n	8002398 <HAL_ADC_ConfigChannel+0x228>
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	2201      	movs	r2, #1
 8002190:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	2b09      	cmp	r3, #9
 800219a:	d925      	bls.n	80021e8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	68d9      	ldr	r1, [r3, #12]
 80021a2:	683b      	ldr	r3, [r7, #0]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	b29b      	uxth	r3, r3
 80021a8:	461a      	mov	r2, r3
 80021aa:	4613      	mov	r3, r2
 80021ac:	005b      	lsls	r3, r3, #1
 80021ae:	4413      	add	r3, r2
 80021b0:	3b1e      	subs	r3, #30
 80021b2:	2207      	movs	r2, #7
 80021b4:	fa02 f303 	lsl.w	r3, r2, r3
 80021b8:	43da      	mvns	r2, r3
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	400a      	ands	r2, r1
 80021c0:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	68d9      	ldr	r1, [r3, #12]
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	689a      	ldr	r2, [r3, #8]
 80021cc:	683b      	ldr	r3, [r7, #0]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	b29b      	uxth	r3, r3
 80021d2:	4618      	mov	r0, r3
 80021d4:	4603      	mov	r3, r0
 80021d6:	005b      	lsls	r3, r3, #1
 80021d8:	4403      	add	r3, r0
 80021da:	3b1e      	subs	r3, #30
 80021dc:	409a      	lsls	r2, r3
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	430a      	orrs	r2, r1
 80021e4:	60da      	str	r2, [r3, #12]
 80021e6:	e022      	b.n	800222e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	6919      	ldr	r1, [r3, #16]
 80021ee:	683b      	ldr	r3, [r7, #0]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	b29b      	uxth	r3, r3
 80021f4:	461a      	mov	r2, r3
 80021f6:	4613      	mov	r3, r2
 80021f8:	005b      	lsls	r3, r3, #1
 80021fa:	4413      	add	r3, r2
 80021fc:	2207      	movs	r2, #7
 80021fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002202:	43da      	mvns	r2, r3
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	400a      	ands	r2, r1
 800220a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	6919      	ldr	r1, [r3, #16]
 8002212:	683b      	ldr	r3, [r7, #0]
 8002214:	689a      	ldr	r2, [r3, #8]
 8002216:	683b      	ldr	r3, [r7, #0]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	b29b      	uxth	r3, r3
 800221c:	4618      	mov	r0, r3
 800221e:	4603      	mov	r3, r0
 8002220:	005b      	lsls	r3, r3, #1
 8002222:	4403      	add	r3, r0
 8002224:	409a      	lsls	r2, r3
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	430a      	orrs	r2, r1
 800222c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800222e:	683b      	ldr	r3, [r7, #0]
 8002230:	685b      	ldr	r3, [r3, #4]
 8002232:	2b06      	cmp	r3, #6
 8002234:	d824      	bhi.n	8002280 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	685a      	ldr	r2, [r3, #4]
 8002240:	4613      	mov	r3, r2
 8002242:	009b      	lsls	r3, r3, #2
 8002244:	4413      	add	r3, r2
 8002246:	3b05      	subs	r3, #5
 8002248:	221f      	movs	r2, #31
 800224a:	fa02 f303 	lsl.w	r3, r2, r3
 800224e:	43da      	mvns	r2, r3
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	400a      	ands	r2, r1
 8002256:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800225e:	683b      	ldr	r3, [r7, #0]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	b29b      	uxth	r3, r3
 8002264:	4618      	mov	r0, r3
 8002266:	683b      	ldr	r3, [r7, #0]
 8002268:	685a      	ldr	r2, [r3, #4]
 800226a:	4613      	mov	r3, r2
 800226c:	009b      	lsls	r3, r3, #2
 800226e:	4413      	add	r3, r2
 8002270:	3b05      	subs	r3, #5
 8002272:	fa00 f203 	lsl.w	r2, r0, r3
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	430a      	orrs	r2, r1
 800227c:	635a      	str	r2, [r3, #52]	@ 0x34
 800227e:	e04c      	b.n	800231a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002280:	683b      	ldr	r3, [r7, #0]
 8002282:	685b      	ldr	r3, [r3, #4]
 8002284:	2b0c      	cmp	r3, #12
 8002286:	d824      	bhi.n	80022d2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800228e:	683b      	ldr	r3, [r7, #0]
 8002290:	685a      	ldr	r2, [r3, #4]
 8002292:	4613      	mov	r3, r2
 8002294:	009b      	lsls	r3, r3, #2
 8002296:	4413      	add	r3, r2
 8002298:	3b23      	subs	r3, #35	@ 0x23
 800229a:	221f      	movs	r2, #31
 800229c:	fa02 f303 	lsl.w	r3, r2, r3
 80022a0:	43da      	mvns	r2, r3
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	400a      	ands	r2, r1
 80022a8:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	b29b      	uxth	r3, r3
 80022b6:	4618      	mov	r0, r3
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	685a      	ldr	r2, [r3, #4]
 80022bc:	4613      	mov	r3, r2
 80022be:	009b      	lsls	r3, r3, #2
 80022c0:	4413      	add	r3, r2
 80022c2:	3b23      	subs	r3, #35	@ 0x23
 80022c4:	fa00 f203 	lsl.w	r2, r0, r3
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	430a      	orrs	r2, r1
 80022ce:	631a      	str	r2, [r3, #48]	@ 0x30
 80022d0:	e023      	b.n	800231a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	685a      	ldr	r2, [r3, #4]
 80022dc:	4613      	mov	r3, r2
 80022de:	009b      	lsls	r3, r3, #2
 80022e0:	4413      	add	r3, r2
 80022e2:	3b41      	subs	r3, #65	@ 0x41
 80022e4:	221f      	movs	r2, #31
 80022e6:	fa02 f303 	lsl.w	r3, r2, r3
 80022ea:	43da      	mvns	r2, r3
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	400a      	ands	r2, r1
 80022f2:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80022fa:	683b      	ldr	r3, [r7, #0]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	b29b      	uxth	r3, r3
 8002300:	4618      	mov	r0, r3
 8002302:	683b      	ldr	r3, [r7, #0]
 8002304:	685a      	ldr	r2, [r3, #4]
 8002306:	4613      	mov	r3, r2
 8002308:	009b      	lsls	r3, r3, #2
 800230a:	4413      	add	r3, r2
 800230c:	3b41      	subs	r3, #65	@ 0x41
 800230e:	fa00 f203 	lsl.w	r2, r0, r3
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	430a      	orrs	r2, r1
 8002318:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800231a:	4b22      	ldr	r3, [pc, #136]	@ (80023a4 <HAL_ADC_ConfigChannel+0x234>)
 800231c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	4a21      	ldr	r2, [pc, #132]	@ (80023a8 <HAL_ADC_ConfigChannel+0x238>)
 8002324:	4293      	cmp	r3, r2
 8002326:	d109      	bne.n	800233c <HAL_ADC_ConfigChannel+0x1cc>
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	2b12      	cmp	r3, #18
 800232e:	d105      	bne.n	800233c <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	685b      	ldr	r3, [r3, #4]
 8002334:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	4a19      	ldr	r2, [pc, #100]	@ (80023a8 <HAL_ADC_ConfigChannel+0x238>)
 8002342:	4293      	cmp	r3, r2
 8002344:	d123      	bne.n	800238e <HAL_ADC_ConfigChannel+0x21e>
 8002346:	683b      	ldr	r3, [r7, #0]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	2b10      	cmp	r3, #16
 800234c:	d003      	beq.n	8002356 <HAL_ADC_ConfigChannel+0x1e6>
 800234e:	683b      	ldr	r3, [r7, #0]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	2b11      	cmp	r3, #17
 8002354:	d11b      	bne.n	800238e <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	685b      	ldr	r3, [r3, #4]
 800235a:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002362:	683b      	ldr	r3, [r7, #0]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	2b10      	cmp	r3, #16
 8002368:	d111      	bne.n	800238e <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800236a:	4b10      	ldr	r3, [pc, #64]	@ (80023ac <HAL_ADC_ConfigChannel+0x23c>)
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	4a10      	ldr	r2, [pc, #64]	@ (80023b0 <HAL_ADC_ConfigChannel+0x240>)
 8002370:	fba2 2303 	umull	r2, r3, r2, r3
 8002374:	0c9a      	lsrs	r2, r3, #18
 8002376:	4613      	mov	r3, r2
 8002378:	009b      	lsls	r3, r3, #2
 800237a:	4413      	add	r3, r2
 800237c:	005b      	lsls	r3, r3, #1
 800237e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002380:	e002      	b.n	8002388 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8002382:	68bb      	ldr	r3, [r7, #8]
 8002384:	3b01      	subs	r3, #1
 8002386:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002388:	68bb      	ldr	r3, [r7, #8]
 800238a:	2b00      	cmp	r3, #0
 800238c:	d1f9      	bne.n	8002382 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	2200      	movs	r2, #0
 8002392:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002396:	2300      	movs	r3, #0
}
 8002398:	4618      	mov	r0, r3
 800239a:	3714      	adds	r7, #20
 800239c:	46bd      	mov	sp, r7
 800239e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a2:	4770      	bx	lr
 80023a4:	40012300 	.word	0x40012300
 80023a8:	40012000 	.word	0x40012000
 80023ac:	20000008 	.word	0x20000008
 80023b0:	431bde83 	.word	0x431bde83

080023b4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80023b4:	b480      	push	{r7}
 80023b6:	b085      	sub	sp, #20
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80023bc:	4b79      	ldr	r3, [pc, #484]	@ (80025a4 <ADC_Init+0x1f0>)
 80023be:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	685b      	ldr	r3, [r3, #4]
 80023c4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	685a      	ldr	r2, [r3, #4]
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	685b      	ldr	r3, [r3, #4]
 80023d4:	431a      	orrs	r2, r3
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	685a      	ldr	r2, [r3, #4]
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80023e8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	6859      	ldr	r1, [r3, #4]
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	691b      	ldr	r3, [r3, #16]
 80023f4:	021a      	lsls	r2, r3, #8
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	430a      	orrs	r2, r1
 80023fc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	685a      	ldr	r2, [r3, #4]
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 800240c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	6859      	ldr	r1, [r3, #4]
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	689a      	ldr	r2, [r3, #8]
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	430a      	orrs	r2, r1
 800241e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	689a      	ldr	r2, [r3, #8]
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800242e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	6899      	ldr	r1, [r3, #8]
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	68da      	ldr	r2, [r3, #12]
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	430a      	orrs	r2, r1
 8002440:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002446:	4a58      	ldr	r2, [pc, #352]	@ (80025a8 <ADC_Init+0x1f4>)
 8002448:	4293      	cmp	r3, r2
 800244a:	d022      	beq.n	8002492 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	689a      	ldr	r2, [r3, #8]
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800245a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	6899      	ldr	r1, [r3, #8]
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	430a      	orrs	r2, r1
 800246c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	689a      	ldr	r2, [r3, #8]
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800247c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	6899      	ldr	r1, [r3, #8]
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	430a      	orrs	r2, r1
 800248e:	609a      	str	r2, [r3, #8]
 8002490:	e00f      	b.n	80024b2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	689a      	ldr	r2, [r3, #8]
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80024a0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	689a      	ldr	r2, [r3, #8]
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80024b0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	689a      	ldr	r2, [r3, #8]
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f022 0202 	bic.w	r2, r2, #2
 80024c0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	6899      	ldr	r1, [r3, #8]
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	7e1b      	ldrb	r3, [r3, #24]
 80024cc:	005a      	lsls	r2, r3, #1
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	430a      	orrs	r2, r1
 80024d4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d01b      	beq.n	8002518 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	685a      	ldr	r2, [r3, #4]
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80024ee:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	685a      	ldr	r2, [r3, #4]
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80024fe:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	6859      	ldr	r1, [r3, #4]
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800250a:	3b01      	subs	r3, #1
 800250c:	035a      	lsls	r2, r3, #13
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	430a      	orrs	r2, r1
 8002514:	605a      	str	r2, [r3, #4]
 8002516:	e007      	b.n	8002528 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	685a      	ldr	r2, [r3, #4]
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002526:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8002536:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	69db      	ldr	r3, [r3, #28]
 8002542:	3b01      	subs	r3, #1
 8002544:	051a      	lsls	r2, r3, #20
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	430a      	orrs	r2, r1
 800254c:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	689a      	ldr	r2, [r3, #8]
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800255c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	6899      	ldr	r1, [r3, #8]
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800256a:	025a      	lsls	r2, r3, #9
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	430a      	orrs	r2, r1
 8002572:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	689a      	ldr	r2, [r3, #8]
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002582:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	6899      	ldr	r1, [r3, #8]
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	695b      	ldr	r3, [r3, #20]
 800258e:	029a      	lsls	r2, r3, #10
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	430a      	orrs	r2, r1
 8002596:	609a      	str	r2, [r3, #8]
}
 8002598:	bf00      	nop
 800259a:	3714      	adds	r7, #20
 800259c:	46bd      	mov	sp, r7
 800259e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a2:	4770      	bx	lr
 80025a4:	40012300 	.word	0x40012300
 80025a8:	0f000001 	.word	0x0f000001

080025ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025ac:	b480      	push	{r7}
 80025ae:	b085      	sub	sp, #20
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	f003 0307 	and.w	r3, r3, #7
 80025ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80025bc:	4b0c      	ldr	r3, [pc, #48]	@ (80025f0 <__NVIC_SetPriorityGrouping+0x44>)
 80025be:	68db      	ldr	r3, [r3, #12]
 80025c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80025c2:	68ba      	ldr	r2, [r7, #8]
 80025c4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80025c8:	4013      	ands	r3, r2
 80025ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80025d0:	68bb      	ldr	r3, [r7, #8]
 80025d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80025d4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80025d8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80025dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80025de:	4a04      	ldr	r2, [pc, #16]	@ (80025f0 <__NVIC_SetPriorityGrouping+0x44>)
 80025e0:	68bb      	ldr	r3, [r7, #8]
 80025e2:	60d3      	str	r3, [r2, #12]
}
 80025e4:	bf00      	nop
 80025e6:	3714      	adds	r7, #20
 80025e8:	46bd      	mov	sp, r7
 80025ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ee:	4770      	bx	lr
 80025f0:	e000ed00 	.word	0xe000ed00

080025f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80025f4:	b480      	push	{r7}
 80025f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80025f8:	4b04      	ldr	r3, [pc, #16]	@ (800260c <__NVIC_GetPriorityGrouping+0x18>)
 80025fa:	68db      	ldr	r3, [r3, #12]
 80025fc:	0a1b      	lsrs	r3, r3, #8
 80025fe:	f003 0307 	and.w	r3, r3, #7
}
 8002602:	4618      	mov	r0, r3
 8002604:	46bd      	mov	sp, r7
 8002606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260a:	4770      	bx	lr
 800260c:	e000ed00 	.word	0xe000ed00

08002610 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002610:	b480      	push	{r7}
 8002612:	b083      	sub	sp, #12
 8002614:	af00      	add	r7, sp, #0
 8002616:	4603      	mov	r3, r0
 8002618:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800261a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800261e:	2b00      	cmp	r3, #0
 8002620:	db0b      	blt.n	800263a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002622:	79fb      	ldrb	r3, [r7, #7]
 8002624:	f003 021f 	and.w	r2, r3, #31
 8002628:	4907      	ldr	r1, [pc, #28]	@ (8002648 <__NVIC_EnableIRQ+0x38>)
 800262a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800262e:	095b      	lsrs	r3, r3, #5
 8002630:	2001      	movs	r0, #1
 8002632:	fa00 f202 	lsl.w	r2, r0, r2
 8002636:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800263a:	bf00      	nop
 800263c:	370c      	adds	r7, #12
 800263e:	46bd      	mov	sp, r7
 8002640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002644:	4770      	bx	lr
 8002646:	bf00      	nop
 8002648:	e000e100 	.word	0xe000e100

0800264c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800264c:	b480      	push	{r7}
 800264e:	b083      	sub	sp, #12
 8002650:	af00      	add	r7, sp, #0
 8002652:	4603      	mov	r3, r0
 8002654:	6039      	str	r1, [r7, #0]
 8002656:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002658:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800265c:	2b00      	cmp	r3, #0
 800265e:	db0a      	blt.n	8002676 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002660:	683b      	ldr	r3, [r7, #0]
 8002662:	b2da      	uxtb	r2, r3
 8002664:	490c      	ldr	r1, [pc, #48]	@ (8002698 <__NVIC_SetPriority+0x4c>)
 8002666:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800266a:	0112      	lsls	r2, r2, #4
 800266c:	b2d2      	uxtb	r2, r2
 800266e:	440b      	add	r3, r1
 8002670:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002674:	e00a      	b.n	800268c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002676:	683b      	ldr	r3, [r7, #0]
 8002678:	b2da      	uxtb	r2, r3
 800267a:	4908      	ldr	r1, [pc, #32]	@ (800269c <__NVIC_SetPriority+0x50>)
 800267c:	79fb      	ldrb	r3, [r7, #7]
 800267e:	f003 030f 	and.w	r3, r3, #15
 8002682:	3b04      	subs	r3, #4
 8002684:	0112      	lsls	r2, r2, #4
 8002686:	b2d2      	uxtb	r2, r2
 8002688:	440b      	add	r3, r1
 800268a:	761a      	strb	r2, [r3, #24]
}
 800268c:	bf00      	nop
 800268e:	370c      	adds	r7, #12
 8002690:	46bd      	mov	sp, r7
 8002692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002696:	4770      	bx	lr
 8002698:	e000e100 	.word	0xe000e100
 800269c:	e000ed00 	.word	0xe000ed00

080026a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80026a0:	b480      	push	{r7}
 80026a2:	b089      	sub	sp, #36	@ 0x24
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	60f8      	str	r0, [r7, #12]
 80026a8:	60b9      	str	r1, [r7, #8]
 80026aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	f003 0307 	and.w	r3, r3, #7
 80026b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80026b4:	69fb      	ldr	r3, [r7, #28]
 80026b6:	f1c3 0307 	rsb	r3, r3, #7
 80026ba:	2b04      	cmp	r3, #4
 80026bc:	bf28      	it	cs
 80026be:	2304      	movcs	r3, #4
 80026c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80026c2:	69fb      	ldr	r3, [r7, #28]
 80026c4:	3304      	adds	r3, #4
 80026c6:	2b06      	cmp	r3, #6
 80026c8:	d902      	bls.n	80026d0 <NVIC_EncodePriority+0x30>
 80026ca:	69fb      	ldr	r3, [r7, #28]
 80026cc:	3b03      	subs	r3, #3
 80026ce:	e000      	b.n	80026d2 <NVIC_EncodePriority+0x32>
 80026d0:	2300      	movs	r3, #0
 80026d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026d4:	f04f 32ff 	mov.w	r2, #4294967295
 80026d8:	69bb      	ldr	r3, [r7, #24]
 80026da:	fa02 f303 	lsl.w	r3, r2, r3
 80026de:	43da      	mvns	r2, r3
 80026e0:	68bb      	ldr	r3, [r7, #8]
 80026e2:	401a      	ands	r2, r3
 80026e4:	697b      	ldr	r3, [r7, #20]
 80026e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80026e8:	f04f 31ff 	mov.w	r1, #4294967295
 80026ec:	697b      	ldr	r3, [r7, #20]
 80026ee:	fa01 f303 	lsl.w	r3, r1, r3
 80026f2:	43d9      	mvns	r1, r3
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026f8:	4313      	orrs	r3, r2
         );
}
 80026fa:	4618      	mov	r0, r3
 80026fc:	3724      	adds	r7, #36	@ 0x24
 80026fe:	46bd      	mov	sp, r7
 8002700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002704:	4770      	bx	lr
	...

08002708 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	b082      	sub	sp, #8
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	3b01      	subs	r3, #1
 8002714:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002718:	d301      	bcc.n	800271e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800271a:	2301      	movs	r3, #1
 800271c:	e00f      	b.n	800273e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800271e:	4a0a      	ldr	r2, [pc, #40]	@ (8002748 <SysTick_Config+0x40>)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	3b01      	subs	r3, #1
 8002724:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002726:	210f      	movs	r1, #15
 8002728:	f04f 30ff 	mov.w	r0, #4294967295
 800272c:	f7ff ff8e 	bl	800264c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002730:	4b05      	ldr	r3, [pc, #20]	@ (8002748 <SysTick_Config+0x40>)
 8002732:	2200      	movs	r2, #0
 8002734:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002736:	4b04      	ldr	r3, [pc, #16]	@ (8002748 <SysTick_Config+0x40>)
 8002738:	2207      	movs	r2, #7
 800273a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800273c:	2300      	movs	r3, #0
}
 800273e:	4618      	mov	r0, r3
 8002740:	3708      	adds	r7, #8
 8002742:	46bd      	mov	sp, r7
 8002744:	bd80      	pop	{r7, pc}
 8002746:	bf00      	nop
 8002748:	e000e010 	.word	0xe000e010

0800274c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	b082      	sub	sp, #8
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002754:	6878      	ldr	r0, [r7, #4]
 8002756:	f7ff ff29 	bl	80025ac <__NVIC_SetPriorityGrouping>
}
 800275a:	bf00      	nop
 800275c:	3708      	adds	r7, #8
 800275e:	46bd      	mov	sp, r7
 8002760:	bd80      	pop	{r7, pc}

08002762 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002762:	b580      	push	{r7, lr}
 8002764:	b086      	sub	sp, #24
 8002766:	af00      	add	r7, sp, #0
 8002768:	4603      	mov	r3, r0
 800276a:	60b9      	str	r1, [r7, #8]
 800276c:	607a      	str	r2, [r7, #4]
 800276e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002770:	2300      	movs	r3, #0
 8002772:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002774:	f7ff ff3e 	bl	80025f4 <__NVIC_GetPriorityGrouping>
 8002778:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800277a:	687a      	ldr	r2, [r7, #4]
 800277c:	68b9      	ldr	r1, [r7, #8]
 800277e:	6978      	ldr	r0, [r7, #20]
 8002780:	f7ff ff8e 	bl	80026a0 <NVIC_EncodePriority>
 8002784:	4602      	mov	r2, r0
 8002786:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800278a:	4611      	mov	r1, r2
 800278c:	4618      	mov	r0, r3
 800278e:	f7ff ff5d 	bl	800264c <__NVIC_SetPriority>
}
 8002792:	bf00      	nop
 8002794:	3718      	adds	r7, #24
 8002796:	46bd      	mov	sp, r7
 8002798:	bd80      	pop	{r7, pc}

0800279a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800279a:	b580      	push	{r7, lr}
 800279c:	b082      	sub	sp, #8
 800279e:	af00      	add	r7, sp, #0
 80027a0:	4603      	mov	r3, r0
 80027a2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80027a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027a8:	4618      	mov	r0, r3
 80027aa:	f7ff ff31 	bl	8002610 <__NVIC_EnableIRQ>
}
 80027ae:	bf00      	nop
 80027b0:	3708      	adds	r7, #8
 80027b2:	46bd      	mov	sp, r7
 80027b4:	bd80      	pop	{r7, pc}

080027b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80027b6:	b580      	push	{r7, lr}
 80027b8:	b082      	sub	sp, #8
 80027ba:	af00      	add	r7, sp, #0
 80027bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80027be:	6878      	ldr	r0, [r7, #4]
 80027c0:	f7ff ffa2 	bl	8002708 <SysTick_Config>
 80027c4:	4603      	mov	r3, r0
}
 80027c6:	4618      	mov	r0, r3
 80027c8:	3708      	adds	r7, #8
 80027ca:	46bd      	mov	sp, r7
 80027cc:	bd80      	pop	{r7, pc}
	...

080027d0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b086      	sub	sp, #24
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80027d8:	2300      	movs	r3, #0
 80027da:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80027dc:	f7ff fc54 	bl	8002088 <HAL_GetTick>
 80027e0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d101      	bne.n	80027ec <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80027e8:	2301      	movs	r3, #1
 80027ea:	e099      	b.n	8002920 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	2202      	movs	r2, #2
 80027f0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	2200      	movs	r2, #0
 80027f8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	681a      	ldr	r2, [r3, #0]
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f022 0201 	bic.w	r2, r2, #1
 800280a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800280c:	e00f      	b.n	800282e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800280e:	f7ff fc3b 	bl	8002088 <HAL_GetTick>
 8002812:	4602      	mov	r2, r0
 8002814:	693b      	ldr	r3, [r7, #16]
 8002816:	1ad3      	subs	r3, r2, r3
 8002818:	2b05      	cmp	r3, #5
 800281a:	d908      	bls.n	800282e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	2220      	movs	r2, #32
 8002820:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	2203      	movs	r2, #3
 8002826:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800282a:	2303      	movs	r3, #3
 800282c:	e078      	b.n	8002920 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f003 0301 	and.w	r3, r3, #1
 8002838:	2b00      	cmp	r3, #0
 800283a:	d1e8      	bne.n	800280e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002844:	697a      	ldr	r2, [r7, #20]
 8002846:	4b38      	ldr	r3, [pc, #224]	@ (8002928 <HAL_DMA_Init+0x158>)
 8002848:	4013      	ands	r3, r2
 800284a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	685a      	ldr	r2, [r3, #4]
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	689b      	ldr	r3, [r3, #8]
 8002854:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800285a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	691b      	ldr	r3, [r3, #16]
 8002860:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002866:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	699b      	ldr	r3, [r3, #24]
 800286c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002872:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	6a1b      	ldr	r3, [r3, #32]
 8002878:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800287a:	697a      	ldr	r2, [r7, #20]
 800287c:	4313      	orrs	r3, r2
 800287e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002884:	2b04      	cmp	r3, #4
 8002886:	d107      	bne.n	8002898 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002890:	4313      	orrs	r3, r2
 8002892:	697a      	ldr	r2, [r7, #20]
 8002894:	4313      	orrs	r3, r2
 8002896:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	697a      	ldr	r2, [r7, #20]
 800289e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	695b      	ldr	r3, [r3, #20]
 80028a6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80028a8:	697b      	ldr	r3, [r7, #20]
 80028aa:	f023 0307 	bic.w	r3, r3, #7
 80028ae:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028b4:	697a      	ldr	r2, [r7, #20]
 80028b6:	4313      	orrs	r3, r2
 80028b8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028be:	2b04      	cmp	r3, #4
 80028c0:	d117      	bne.n	80028f2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028c6:	697a      	ldr	r2, [r7, #20]
 80028c8:	4313      	orrs	r3, r2
 80028ca:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d00e      	beq.n	80028f2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80028d4:	6878      	ldr	r0, [r7, #4]
 80028d6:	f000 fa7b 	bl	8002dd0 <DMA_CheckFifoParam>
 80028da:	4603      	mov	r3, r0
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d008      	beq.n	80028f2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	2240      	movs	r2, #64	@ 0x40
 80028e4:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	2201      	movs	r2, #1
 80028ea:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80028ee:	2301      	movs	r3, #1
 80028f0:	e016      	b.n	8002920 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	697a      	ldr	r2, [r7, #20]
 80028f8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80028fa:	6878      	ldr	r0, [r7, #4]
 80028fc:	f000 fa32 	bl	8002d64 <DMA_CalcBaseAndBitshift>
 8002900:	4603      	mov	r3, r0
 8002902:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002908:	223f      	movs	r2, #63	@ 0x3f
 800290a:	409a      	lsls	r2, r3
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	2200      	movs	r2, #0
 8002914:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	2201      	movs	r2, #1
 800291a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800291e:	2300      	movs	r3, #0
}
 8002920:	4618      	mov	r0, r3
 8002922:	3718      	adds	r7, #24
 8002924:	46bd      	mov	sp, r7
 8002926:	bd80      	pop	{r7, pc}
 8002928:	f010803f 	.word	0xf010803f

0800292c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800292c:	b580      	push	{r7, lr}
 800292e:	b084      	sub	sp, #16
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002938:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800293a:	f7ff fba5 	bl	8002088 <HAL_GetTick>
 800293e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002946:	b2db      	uxtb	r3, r3
 8002948:	2b02      	cmp	r3, #2
 800294a:	d008      	beq.n	800295e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	2280      	movs	r2, #128	@ 0x80
 8002950:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	2200      	movs	r2, #0
 8002956:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800295a:	2301      	movs	r3, #1
 800295c:	e052      	b.n	8002a04 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	681a      	ldr	r2, [r3, #0]
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f022 0216 	bic.w	r2, r2, #22
 800296c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	695a      	ldr	r2, [r3, #20]
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800297c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002982:	2b00      	cmp	r3, #0
 8002984:	d103      	bne.n	800298e <HAL_DMA_Abort+0x62>
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800298a:	2b00      	cmp	r3, #0
 800298c:	d007      	beq.n	800299e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	681a      	ldr	r2, [r3, #0]
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f022 0208 	bic.w	r2, r2, #8
 800299c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	681a      	ldr	r2, [r3, #0]
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f022 0201 	bic.w	r2, r2, #1
 80029ac:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80029ae:	e013      	b.n	80029d8 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80029b0:	f7ff fb6a 	bl	8002088 <HAL_GetTick>
 80029b4:	4602      	mov	r2, r0
 80029b6:	68bb      	ldr	r3, [r7, #8]
 80029b8:	1ad3      	subs	r3, r2, r3
 80029ba:	2b05      	cmp	r3, #5
 80029bc:	d90c      	bls.n	80029d8 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	2220      	movs	r2, #32
 80029c2:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	2203      	movs	r2, #3
 80029c8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	2200      	movs	r2, #0
 80029d0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80029d4:	2303      	movs	r3, #3
 80029d6:	e015      	b.n	8002a04 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f003 0301 	and.w	r3, r3, #1
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d1e4      	bne.n	80029b0 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029ea:	223f      	movs	r2, #63	@ 0x3f
 80029ec:	409a      	lsls	r2, r3
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	2201      	movs	r2, #1
 80029f6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	2200      	movs	r2, #0
 80029fe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8002a02:	2300      	movs	r3, #0
}
 8002a04:	4618      	mov	r0, r3
 8002a06:	3710      	adds	r7, #16
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	bd80      	pop	{r7, pc}

08002a0c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002a0c:	b480      	push	{r7}
 8002a0e:	b083      	sub	sp, #12
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002a1a:	b2db      	uxtb	r3, r3
 8002a1c:	2b02      	cmp	r3, #2
 8002a1e:	d004      	beq.n	8002a2a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	2280      	movs	r2, #128	@ 0x80
 8002a24:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002a26:	2301      	movs	r3, #1
 8002a28:	e00c      	b.n	8002a44 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	2205      	movs	r2, #5
 8002a2e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	681a      	ldr	r2, [r3, #0]
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f022 0201 	bic.w	r2, r2, #1
 8002a40:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002a42:	2300      	movs	r3, #0
}
 8002a44:	4618      	mov	r0, r3
 8002a46:	370c      	adds	r7, #12
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4e:	4770      	bx	lr

08002a50 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b086      	sub	sp, #24
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002a58:	2300      	movs	r3, #0
 8002a5a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002a5c:	4b8e      	ldr	r3, [pc, #568]	@ (8002c98 <HAL_DMA_IRQHandler+0x248>)
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	4a8e      	ldr	r2, [pc, #568]	@ (8002c9c <HAL_DMA_IRQHandler+0x24c>)
 8002a62:	fba2 2303 	umull	r2, r3, r2, r3
 8002a66:	0a9b      	lsrs	r3, r3, #10
 8002a68:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a6e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002a70:	693b      	ldr	r3, [r7, #16]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a7a:	2208      	movs	r2, #8
 8002a7c:	409a      	lsls	r2, r3
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	4013      	ands	r3, r2
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d01a      	beq.n	8002abc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f003 0304 	and.w	r3, r3, #4
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d013      	beq.n	8002abc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	681a      	ldr	r2, [r3, #0]
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f022 0204 	bic.w	r2, r2, #4
 8002aa2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002aa8:	2208      	movs	r2, #8
 8002aaa:	409a      	lsls	r2, r3
 8002aac:	693b      	ldr	r3, [r7, #16]
 8002aae:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ab4:	f043 0201 	orr.w	r2, r3, #1
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ac0:	2201      	movs	r2, #1
 8002ac2:	409a      	lsls	r2, r3
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	4013      	ands	r3, r2
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d012      	beq.n	8002af2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	695b      	ldr	r3, [r3, #20]
 8002ad2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d00b      	beq.n	8002af2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ade:	2201      	movs	r2, #1
 8002ae0:	409a      	lsls	r2, r3
 8002ae2:	693b      	ldr	r3, [r7, #16]
 8002ae4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002aea:	f043 0202 	orr.w	r2, r3, #2
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002af6:	2204      	movs	r2, #4
 8002af8:	409a      	lsls	r2, r3
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	4013      	ands	r3, r2
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d012      	beq.n	8002b28 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f003 0302 	and.w	r3, r3, #2
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d00b      	beq.n	8002b28 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b14:	2204      	movs	r2, #4
 8002b16:	409a      	lsls	r2, r3
 8002b18:	693b      	ldr	r3, [r7, #16]
 8002b1a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b20:	f043 0204 	orr.w	r2, r3, #4
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b2c:	2210      	movs	r2, #16
 8002b2e:	409a      	lsls	r2, r3
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	4013      	ands	r3, r2
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d043      	beq.n	8002bc0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f003 0308 	and.w	r3, r3, #8
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d03c      	beq.n	8002bc0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b4a:	2210      	movs	r2, #16
 8002b4c:	409a      	lsls	r2, r3
 8002b4e:	693b      	ldr	r3, [r7, #16]
 8002b50:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d018      	beq.n	8002b92 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d108      	bne.n	8002b80 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d024      	beq.n	8002bc0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b7a:	6878      	ldr	r0, [r7, #4]
 8002b7c:	4798      	blx	r3
 8002b7e:	e01f      	b.n	8002bc0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d01b      	beq.n	8002bc0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002b8c:	6878      	ldr	r0, [r7, #4]
 8002b8e:	4798      	blx	r3
 8002b90:	e016      	b.n	8002bc0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d107      	bne.n	8002bb0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	681a      	ldr	r2, [r3, #0]
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f022 0208 	bic.w	r2, r2, #8
 8002bae:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d003      	beq.n	8002bc0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bbc:	6878      	ldr	r0, [r7, #4]
 8002bbe:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002bc4:	2220      	movs	r2, #32
 8002bc6:	409a      	lsls	r2, r3
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	4013      	ands	r3, r2
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	f000 808f 	beq.w	8002cf0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f003 0310 	and.w	r3, r3, #16
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	f000 8087 	beq.w	8002cf0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002be6:	2220      	movs	r2, #32
 8002be8:	409a      	lsls	r2, r3
 8002bea:	693b      	ldr	r3, [r7, #16]
 8002bec:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002bf4:	b2db      	uxtb	r3, r3
 8002bf6:	2b05      	cmp	r3, #5
 8002bf8:	d136      	bne.n	8002c68 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	681a      	ldr	r2, [r3, #0]
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f022 0216 	bic.w	r2, r2, #22
 8002c08:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	695a      	ldr	r2, [r3, #20]
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002c18:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d103      	bne.n	8002c2a <HAL_DMA_IRQHandler+0x1da>
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d007      	beq.n	8002c3a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	681a      	ldr	r2, [r3, #0]
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f022 0208 	bic.w	r2, r2, #8
 8002c38:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c3e:	223f      	movs	r2, #63	@ 0x3f
 8002c40:	409a      	lsls	r2, r3
 8002c42:	693b      	ldr	r3, [r7, #16]
 8002c44:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	2201      	movs	r2, #1
 8002c4a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	2200      	movs	r2, #0
 8002c52:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d07e      	beq.n	8002d5c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002c62:	6878      	ldr	r0, [r7, #4]
 8002c64:	4798      	blx	r3
        }
        return;
 8002c66:	e079      	b.n	8002d5c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d01d      	beq.n	8002cb2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d10d      	bne.n	8002ca0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d031      	beq.n	8002cf0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c90:	6878      	ldr	r0, [r7, #4]
 8002c92:	4798      	blx	r3
 8002c94:	e02c      	b.n	8002cf0 <HAL_DMA_IRQHandler+0x2a0>
 8002c96:	bf00      	nop
 8002c98:	20000008 	.word	0x20000008
 8002c9c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d023      	beq.n	8002cf0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002cac:	6878      	ldr	r0, [r7, #4]
 8002cae:	4798      	blx	r3
 8002cb0:	e01e      	b.n	8002cf0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d10f      	bne.n	8002ce0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	681a      	ldr	r2, [r3, #0]
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f022 0210 	bic.w	r2, r2, #16
 8002cce:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	2201      	movs	r2, #1
 8002cd4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	2200      	movs	r2, #0
 8002cdc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d003      	beq.n	8002cf0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002cec:	6878      	ldr	r0, [r7, #4]
 8002cee:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d032      	beq.n	8002d5e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002cfc:	f003 0301 	and.w	r3, r3, #1
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d022      	beq.n	8002d4a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	2205      	movs	r2, #5
 8002d08:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	681a      	ldr	r2, [r3, #0]
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f022 0201 	bic.w	r2, r2, #1
 8002d1a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002d1c:	68bb      	ldr	r3, [r7, #8]
 8002d1e:	3301      	adds	r3, #1
 8002d20:	60bb      	str	r3, [r7, #8]
 8002d22:	697a      	ldr	r2, [r7, #20]
 8002d24:	429a      	cmp	r2, r3
 8002d26:	d307      	bcc.n	8002d38 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f003 0301 	and.w	r3, r3, #1
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d1f2      	bne.n	8002d1c <HAL_DMA_IRQHandler+0x2cc>
 8002d36:	e000      	b.n	8002d3a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002d38:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	2201      	movs	r2, #1
 8002d3e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	2200      	movs	r2, #0
 8002d46:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d005      	beq.n	8002d5e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d56:	6878      	ldr	r0, [r7, #4]
 8002d58:	4798      	blx	r3
 8002d5a:	e000      	b.n	8002d5e <HAL_DMA_IRQHandler+0x30e>
        return;
 8002d5c:	bf00      	nop
    }
  }
}
 8002d5e:	3718      	adds	r7, #24
 8002d60:	46bd      	mov	sp, r7
 8002d62:	bd80      	pop	{r7, pc}

08002d64 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002d64:	b480      	push	{r7}
 8002d66:	b085      	sub	sp, #20
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	b2db      	uxtb	r3, r3
 8002d72:	3b10      	subs	r3, #16
 8002d74:	4a14      	ldr	r2, [pc, #80]	@ (8002dc8 <DMA_CalcBaseAndBitshift+0x64>)
 8002d76:	fba2 2303 	umull	r2, r3, r2, r3
 8002d7a:	091b      	lsrs	r3, r3, #4
 8002d7c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002d7e:	4a13      	ldr	r2, [pc, #76]	@ (8002dcc <DMA_CalcBaseAndBitshift+0x68>)
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	4413      	add	r3, r2
 8002d84:	781b      	ldrb	r3, [r3, #0]
 8002d86:	461a      	mov	r2, r3
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	2b03      	cmp	r3, #3
 8002d90:	d909      	bls.n	8002da6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002d9a:	f023 0303 	bic.w	r3, r3, #3
 8002d9e:	1d1a      	adds	r2, r3, #4
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	659a      	str	r2, [r3, #88]	@ 0x58
 8002da4:	e007      	b.n	8002db6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002dae:	f023 0303 	bic.w	r3, r3, #3
 8002db2:	687a      	ldr	r2, [r7, #4]
 8002db4:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8002dba:	4618      	mov	r0, r3
 8002dbc:	3714      	adds	r7, #20
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc4:	4770      	bx	lr
 8002dc6:	bf00      	nop
 8002dc8:	aaaaaaab 	.word	0xaaaaaaab
 8002dcc:	08009c04 	.word	0x08009c04

08002dd0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002dd0:	b480      	push	{r7}
 8002dd2:	b085      	sub	sp, #20
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002dd8:	2300      	movs	r3, #0
 8002dda:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002de0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	699b      	ldr	r3, [r3, #24]
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d11f      	bne.n	8002e2a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002dea:	68bb      	ldr	r3, [r7, #8]
 8002dec:	2b03      	cmp	r3, #3
 8002dee:	d856      	bhi.n	8002e9e <DMA_CheckFifoParam+0xce>
 8002df0:	a201      	add	r2, pc, #4	@ (adr r2, 8002df8 <DMA_CheckFifoParam+0x28>)
 8002df2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002df6:	bf00      	nop
 8002df8:	08002e09 	.word	0x08002e09
 8002dfc:	08002e1b 	.word	0x08002e1b
 8002e00:	08002e09 	.word	0x08002e09
 8002e04:	08002e9f 	.word	0x08002e9f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e0c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d046      	beq.n	8002ea2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002e14:	2301      	movs	r3, #1
 8002e16:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002e18:	e043      	b.n	8002ea2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e1e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002e22:	d140      	bne.n	8002ea6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002e24:	2301      	movs	r3, #1
 8002e26:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002e28:	e03d      	b.n	8002ea6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	699b      	ldr	r3, [r3, #24]
 8002e2e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002e32:	d121      	bne.n	8002e78 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002e34:	68bb      	ldr	r3, [r7, #8]
 8002e36:	2b03      	cmp	r3, #3
 8002e38:	d837      	bhi.n	8002eaa <DMA_CheckFifoParam+0xda>
 8002e3a:	a201      	add	r2, pc, #4	@ (adr r2, 8002e40 <DMA_CheckFifoParam+0x70>)
 8002e3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e40:	08002e51 	.word	0x08002e51
 8002e44:	08002e57 	.word	0x08002e57
 8002e48:	08002e51 	.word	0x08002e51
 8002e4c:	08002e69 	.word	0x08002e69
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002e50:	2301      	movs	r3, #1
 8002e52:	73fb      	strb	r3, [r7, #15]
      break;
 8002e54:	e030      	b.n	8002eb8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e5a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d025      	beq.n	8002eae <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002e62:	2301      	movs	r3, #1
 8002e64:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002e66:	e022      	b.n	8002eae <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e6c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002e70:	d11f      	bne.n	8002eb2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002e72:	2301      	movs	r3, #1
 8002e74:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002e76:	e01c      	b.n	8002eb2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002e78:	68bb      	ldr	r3, [r7, #8]
 8002e7a:	2b02      	cmp	r3, #2
 8002e7c:	d903      	bls.n	8002e86 <DMA_CheckFifoParam+0xb6>
 8002e7e:	68bb      	ldr	r3, [r7, #8]
 8002e80:	2b03      	cmp	r3, #3
 8002e82:	d003      	beq.n	8002e8c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002e84:	e018      	b.n	8002eb8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002e86:	2301      	movs	r3, #1
 8002e88:	73fb      	strb	r3, [r7, #15]
      break;
 8002e8a:	e015      	b.n	8002eb8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e90:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d00e      	beq.n	8002eb6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002e98:	2301      	movs	r3, #1
 8002e9a:	73fb      	strb	r3, [r7, #15]
      break;
 8002e9c:	e00b      	b.n	8002eb6 <DMA_CheckFifoParam+0xe6>
      break;
 8002e9e:	bf00      	nop
 8002ea0:	e00a      	b.n	8002eb8 <DMA_CheckFifoParam+0xe8>
      break;
 8002ea2:	bf00      	nop
 8002ea4:	e008      	b.n	8002eb8 <DMA_CheckFifoParam+0xe8>
      break;
 8002ea6:	bf00      	nop
 8002ea8:	e006      	b.n	8002eb8 <DMA_CheckFifoParam+0xe8>
      break;
 8002eaa:	bf00      	nop
 8002eac:	e004      	b.n	8002eb8 <DMA_CheckFifoParam+0xe8>
      break;
 8002eae:	bf00      	nop
 8002eb0:	e002      	b.n	8002eb8 <DMA_CheckFifoParam+0xe8>
      break;   
 8002eb2:	bf00      	nop
 8002eb4:	e000      	b.n	8002eb8 <DMA_CheckFifoParam+0xe8>
      break;
 8002eb6:	bf00      	nop
    }
  } 
  
  return status; 
 8002eb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002eba:	4618      	mov	r0, r3
 8002ebc:	3714      	adds	r7, #20
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec4:	4770      	bx	lr
 8002ec6:	bf00      	nop

08002ec8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ec8:	b480      	push	{r7}
 8002eca:	b089      	sub	sp, #36	@ 0x24
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
 8002ed0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002ed2:	2300      	movs	r3, #0
 8002ed4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002eda:	2300      	movs	r3, #0
 8002edc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002ede:	2300      	movs	r3, #0
 8002ee0:	61fb      	str	r3, [r7, #28]
 8002ee2:	e16b      	b.n	80031bc <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002ee4:	2201      	movs	r2, #1
 8002ee6:	69fb      	ldr	r3, [r7, #28]
 8002ee8:	fa02 f303 	lsl.w	r3, r2, r3
 8002eec:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002eee:	683b      	ldr	r3, [r7, #0]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	697a      	ldr	r2, [r7, #20]
 8002ef4:	4013      	ands	r3, r2
 8002ef6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002ef8:	693a      	ldr	r2, [r7, #16]
 8002efa:	697b      	ldr	r3, [r7, #20]
 8002efc:	429a      	cmp	r2, r3
 8002efe:	f040 815a 	bne.w	80031b6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002f02:	683b      	ldr	r3, [r7, #0]
 8002f04:	685b      	ldr	r3, [r3, #4]
 8002f06:	f003 0303 	and.w	r3, r3, #3
 8002f0a:	2b01      	cmp	r3, #1
 8002f0c:	d005      	beq.n	8002f1a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002f0e:	683b      	ldr	r3, [r7, #0]
 8002f10:	685b      	ldr	r3, [r3, #4]
 8002f12:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002f16:	2b02      	cmp	r3, #2
 8002f18:	d130      	bne.n	8002f7c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	689b      	ldr	r3, [r3, #8]
 8002f1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002f20:	69fb      	ldr	r3, [r7, #28]
 8002f22:	005b      	lsls	r3, r3, #1
 8002f24:	2203      	movs	r2, #3
 8002f26:	fa02 f303 	lsl.w	r3, r2, r3
 8002f2a:	43db      	mvns	r3, r3
 8002f2c:	69ba      	ldr	r2, [r7, #24]
 8002f2e:	4013      	ands	r3, r2
 8002f30:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002f32:	683b      	ldr	r3, [r7, #0]
 8002f34:	68da      	ldr	r2, [r3, #12]
 8002f36:	69fb      	ldr	r3, [r7, #28]
 8002f38:	005b      	lsls	r3, r3, #1
 8002f3a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f3e:	69ba      	ldr	r2, [r7, #24]
 8002f40:	4313      	orrs	r3, r2
 8002f42:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	69ba      	ldr	r2, [r7, #24]
 8002f48:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	685b      	ldr	r3, [r3, #4]
 8002f4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002f50:	2201      	movs	r2, #1
 8002f52:	69fb      	ldr	r3, [r7, #28]
 8002f54:	fa02 f303 	lsl.w	r3, r2, r3
 8002f58:	43db      	mvns	r3, r3
 8002f5a:	69ba      	ldr	r2, [r7, #24]
 8002f5c:	4013      	ands	r3, r2
 8002f5e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002f60:	683b      	ldr	r3, [r7, #0]
 8002f62:	685b      	ldr	r3, [r3, #4]
 8002f64:	091b      	lsrs	r3, r3, #4
 8002f66:	f003 0201 	and.w	r2, r3, #1
 8002f6a:	69fb      	ldr	r3, [r7, #28]
 8002f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f70:	69ba      	ldr	r2, [r7, #24]
 8002f72:	4313      	orrs	r3, r2
 8002f74:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	69ba      	ldr	r2, [r7, #24]
 8002f7a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002f7c:	683b      	ldr	r3, [r7, #0]
 8002f7e:	685b      	ldr	r3, [r3, #4]
 8002f80:	f003 0303 	and.w	r3, r3, #3
 8002f84:	2b03      	cmp	r3, #3
 8002f86:	d017      	beq.n	8002fb8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	68db      	ldr	r3, [r3, #12]
 8002f8c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002f8e:	69fb      	ldr	r3, [r7, #28]
 8002f90:	005b      	lsls	r3, r3, #1
 8002f92:	2203      	movs	r2, #3
 8002f94:	fa02 f303 	lsl.w	r3, r2, r3
 8002f98:	43db      	mvns	r3, r3
 8002f9a:	69ba      	ldr	r2, [r7, #24]
 8002f9c:	4013      	ands	r3, r2
 8002f9e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002fa0:	683b      	ldr	r3, [r7, #0]
 8002fa2:	689a      	ldr	r2, [r3, #8]
 8002fa4:	69fb      	ldr	r3, [r7, #28]
 8002fa6:	005b      	lsls	r3, r3, #1
 8002fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8002fac:	69ba      	ldr	r2, [r7, #24]
 8002fae:	4313      	orrs	r3, r2
 8002fb0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	69ba      	ldr	r2, [r7, #24]
 8002fb6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002fb8:	683b      	ldr	r3, [r7, #0]
 8002fba:	685b      	ldr	r3, [r3, #4]
 8002fbc:	f003 0303 	and.w	r3, r3, #3
 8002fc0:	2b02      	cmp	r3, #2
 8002fc2:	d123      	bne.n	800300c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002fc4:	69fb      	ldr	r3, [r7, #28]
 8002fc6:	08da      	lsrs	r2, r3, #3
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	3208      	adds	r2, #8
 8002fcc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002fd0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002fd2:	69fb      	ldr	r3, [r7, #28]
 8002fd4:	f003 0307 	and.w	r3, r3, #7
 8002fd8:	009b      	lsls	r3, r3, #2
 8002fda:	220f      	movs	r2, #15
 8002fdc:	fa02 f303 	lsl.w	r3, r2, r3
 8002fe0:	43db      	mvns	r3, r3
 8002fe2:	69ba      	ldr	r2, [r7, #24]
 8002fe4:	4013      	ands	r3, r2
 8002fe6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002fe8:	683b      	ldr	r3, [r7, #0]
 8002fea:	691a      	ldr	r2, [r3, #16]
 8002fec:	69fb      	ldr	r3, [r7, #28]
 8002fee:	f003 0307 	and.w	r3, r3, #7
 8002ff2:	009b      	lsls	r3, r3, #2
 8002ff4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ff8:	69ba      	ldr	r2, [r7, #24]
 8002ffa:	4313      	orrs	r3, r2
 8002ffc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002ffe:	69fb      	ldr	r3, [r7, #28]
 8003000:	08da      	lsrs	r2, r3, #3
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	3208      	adds	r2, #8
 8003006:	69b9      	ldr	r1, [r7, #24]
 8003008:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003012:	69fb      	ldr	r3, [r7, #28]
 8003014:	005b      	lsls	r3, r3, #1
 8003016:	2203      	movs	r2, #3
 8003018:	fa02 f303 	lsl.w	r3, r2, r3
 800301c:	43db      	mvns	r3, r3
 800301e:	69ba      	ldr	r2, [r7, #24]
 8003020:	4013      	ands	r3, r2
 8003022:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003024:	683b      	ldr	r3, [r7, #0]
 8003026:	685b      	ldr	r3, [r3, #4]
 8003028:	f003 0203 	and.w	r2, r3, #3
 800302c:	69fb      	ldr	r3, [r7, #28]
 800302e:	005b      	lsls	r3, r3, #1
 8003030:	fa02 f303 	lsl.w	r3, r2, r3
 8003034:	69ba      	ldr	r2, [r7, #24]
 8003036:	4313      	orrs	r3, r2
 8003038:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	69ba      	ldr	r2, [r7, #24]
 800303e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003040:	683b      	ldr	r3, [r7, #0]
 8003042:	685b      	ldr	r3, [r3, #4]
 8003044:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003048:	2b00      	cmp	r3, #0
 800304a:	f000 80b4 	beq.w	80031b6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800304e:	2300      	movs	r3, #0
 8003050:	60fb      	str	r3, [r7, #12]
 8003052:	4b60      	ldr	r3, [pc, #384]	@ (80031d4 <HAL_GPIO_Init+0x30c>)
 8003054:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003056:	4a5f      	ldr	r2, [pc, #380]	@ (80031d4 <HAL_GPIO_Init+0x30c>)
 8003058:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800305c:	6453      	str	r3, [r2, #68]	@ 0x44
 800305e:	4b5d      	ldr	r3, [pc, #372]	@ (80031d4 <HAL_GPIO_Init+0x30c>)
 8003060:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003062:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003066:	60fb      	str	r3, [r7, #12]
 8003068:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800306a:	4a5b      	ldr	r2, [pc, #364]	@ (80031d8 <HAL_GPIO_Init+0x310>)
 800306c:	69fb      	ldr	r3, [r7, #28]
 800306e:	089b      	lsrs	r3, r3, #2
 8003070:	3302      	adds	r3, #2
 8003072:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003076:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003078:	69fb      	ldr	r3, [r7, #28]
 800307a:	f003 0303 	and.w	r3, r3, #3
 800307e:	009b      	lsls	r3, r3, #2
 8003080:	220f      	movs	r2, #15
 8003082:	fa02 f303 	lsl.w	r3, r2, r3
 8003086:	43db      	mvns	r3, r3
 8003088:	69ba      	ldr	r2, [r7, #24]
 800308a:	4013      	ands	r3, r2
 800308c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	4a52      	ldr	r2, [pc, #328]	@ (80031dc <HAL_GPIO_Init+0x314>)
 8003092:	4293      	cmp	r3, r2
 8003094:	d02b      	beq.n	80030ee <HAL_GPIO_Init+0x226>
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	4a51      	ldr	r2, [pc, #324]	@ (80031e0 <HAL_GPIO_Init+0x318>)
 800309a:	4293      	cmp	r3, r2
 800309c:	d025      	beq.n	80030ea <HAL_GPIO_Init+0x222>
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	4a50      	ldr	r2, [pc, #320]	@ (80031e4 <HAL_GPIO_Init+0x31c>)
 80030a2:	4293      	cmp	r3, r2
 80030a4:	d01f      	beq.n	80030e6 <HAL_GPIO_Init+0x21e>
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	4a4f      	ldr	r2, [pc, #316]	@ (80031e8 <HAL_GPIO_Init+0x320>)
 80030aa:	4293      	cmp	r3, r2
 80030ac:	d019      	beq.n	80030e2 <HAL_GPIO_Init+0x21a>
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	4a4e      	ldr	r2, [pc, #312]	@ (80031ec <HAL_GPIO_Init+0x324>)
 80030b2:	4293      	cmp	r3, r2
 80030b4:	d013      	beq.n	80030de <HAL_GPIO_Init+0x216>
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	4a4d      	ldr	r2, [pc, #308]	@ (80031f0 <HAL_GPIO_Init+0x328>)
 80030ba:	4293      	cmp	r3, r2
 80030bc:	d00d      	beq.n	80030da <HAL_GPIO_Init+0x212>
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	4a4c      	ldr	r2, [pc, #304]	@ (80031f4 <HAL_GPIO_Init+0x32c>)
 80030c2:	4293      	cmp	r3, r2
 80030c4:	d007      	beq.n	80030d6 <HAL_GPIO_Init+0x20e>
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	4a4b      	ldr	r2, [pc, #300]	@ (80031f8 <HAL_GPIO_Init+0x330>)
 80030ca:	4293      	cmp	r3, r2
 80030cc:	d101      	bne.n	80030d2 <HAL_GPIO_Init+0x20a>
 80030ce:	2307      	movs	r3, #7
 80030d0:	e00e      	b.n	80030f0 <HAL_GPIO_Init+0x228>
 80030d2:	2308      	movs	r3, #8
 80030d4:	e00c      	b.n	80030f0 <HAL_GPIO_Init+0x228>
 80030d6:	2306      	movs	r3, #6
 80030d8:	e00a      	b.n	80030f0 <HAL_GPIO_Init+0x228>
 80030da:	2305      	movs	r3, #5
 80030dc:	e008      	b.n	80030f0 <HAL_GPIO_Init+0x228>
 80030de:	2304      	movs	r3, #4
 80030e0:	e006      	b.n	80030f0 <HAL_GPIO_Init+0x228>
 80030e2:	2303      	movs	r3, #3
 80030e4:	e004      	b.n	80030f0 <HAL_GPIO_Init+0x228>
 80030e6:	2302      	movs	r3, #2
 80030e8:	e002      	b.n	80030f0 <HAL_GPIO_Init+0x228>
 80030ea:	2301      	movs	r3, #1
 80030ec:	e000      	b.n	80030f0 <HAL_GPIO_Init+0x228>
 80030ee:	2300      	movs	r3, #0
 80030f0:	69fa      	ldr	r2, [r7, #28]
 80030f2:	f002 0203 	and.w	r2, r2, #3
 80030f6:	0092      	lsls	r2, r2, #2
 80030f8:	4093      	lsls	r3, r2
 80030fa:	69ba      	ldr	r2, [r7, #24]
 80030fc:	4313      	orrs	r3, r2
 80030fe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003100:	4935      	ldr	r1, [pc, #212]	@ (80031d8 <HAL_GPIO_Init+0x310>)
 8003102:	69fb      	ldr	r3, [r7, #28]
 8003104:	089b      	lsrs	r3, r3, #2
 8003106:	3302      	adds	r3, #2
 8003108:	69ba      	ldr	r2, [r7, #24]
 800310a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800310e:	4b3b      	ldr	r3, [pc, #236]	@ (80031fc <HAL_GPIO_Init+0x334>)
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003114:	693b      	ldr	r3, [r7, #16]
 8003116:	43db      	mvns	r3, r3
 8003118:	69ba      	ldr	r2, [r7, #24]
 800311a:	4013      	ands	r3, r2
 800311c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800311e:	683b      	ldr	r3, [r7, #0]
 8003120:	685b      	ldr	r3, [r3, #4]
 8003122:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003126:	2b00      	cmp	r3, #0
 8003128:	d003      	beq.n	8003132 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800312a:	69ba      	ldr	r2, [r7, #24]
 800312c:	693b      	ldr	r3, [r7, #16]
 800312e:	4313      	orrs	r3, r2
 8003130:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003132:	4a32      	ldr	r2, [pc, #200]	@ (80031fc <HAL_GPIO_Init+0x334>)
 8003134:	69bb      	ldr	r3, [r7, #24]
 8003136:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003138:	4b30      	ldr	r3, [pc, #192]	@ (80031fc <HAL_GPIO_Init+0x334>)
 800313a:	685b      	ldr	r3, [r3, #4]
 800313c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800313e:	693b      	ldr	r3, [r7, #16]
 8003140:	43db      	mvns	r3, r3
 8003142:	69ba      	ldr	r2, [r7, #24]
 8003144:	4013      	ands	r3, r2
 8003146:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003148:	683b      	ldr	r3, [r7, #0]
 800314a:	685b      	ldr	r3, [r3, #4]
 800314c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003150:	2b00      	cmp	r3, #0
 8003152:	d003      	beq.n	800315c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003154:	69ba      	ldr	r2, [r7, #24]
 8003156:	693b      	ldr	r3, [r7, #16]
 8003158:	4313      	orrs	r3, r2
 800315a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800315c:	4a27      	ldr	r2, [pc, #156]	@ (80031fc <HAL_GPIO_Init+0x334>)
 800315e:	69bb      	ldr	r3, [r7, #24]
 8003160:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003162:	4b26      	ldr	r3, [pc, #152]	@ (80031fc <HAL_GPIO_Init+0x334>)
 8003164:	689b      	ldr	r3, [r3, #8]
 8003166:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003168:	693b      	ldr	r3, [r7, #16]
 800316a:	43db      	mvns	r3, r3
 800316c:	69ba      	ldr	r2, [r7, #24]
 800316e:	4013      	ands	r3, r2
 8003170:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003172:	683b      	ldr	r3, [r7, #0]
 8003174:	685b      	ldr	r3, [r3, #4]
 8003176:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800317a:	2b00      	cmp	r3, #0
 800317c:	d003      	beq.n	8003186 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800317e:	69ba      	ldr	r2, [r7, #24]
 8003180:	693b      	ldr	r3, [r7, #16]
 8003182:	4313      	orrs	r3, r2
 8003184:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003186:	4a1d      	ldr	r2, [pc, #116]	@ (80031fc <HAL_GPIO_Init+0x334>)
 8003188:	69bb      	ldr	r3, [r7, #24]
 800318a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800318c:	4b1b      	ldr	r3, [pc, #108]	@ (80031fc <HAL_GPIO_Init+0x334>)
 800318e:	68db      	ldr	r3, [r3, #12]
 8003190:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003192:	693b      	ldr	r3, [r7, #16]
 8003194:	43db      	mvns	r3, r3
 8003196:	69ba      	ldr	r2, [r7, #24]
 8003198:	4013      	ands	r3, r2
 800319a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800319c:	683b      	ldr	r3, [r7, #0]
 800319e:	685b      	ldr	r3, [r3, #4]
 80031a0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d003      	beq.n	80031b0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80031a8:	69ba      	ldr	r2, [r7, #24]
 80031aa:	693b      	ldr	r3, [r7, #16]
 80031ac:	4313      	orrs	r3, r2
 80031ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80031b0:	4a12      	ldr	r2, [pc, #72]	@ (80031fc <HAL_GPIO_Init+0x334>)
 80031b2:	69bb      	ldr	r3, [r7, #24]
 80031b4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80031b6:	69fb      	ldr	r3, [r7, #28]
 80031b8:	3301      	adds	r3, #1
 80031ba:	61fb      	str	r3, [r7, #28]
 80031bc:	69fb      	ldr	r3, [r7, #28]
 80031be:	2b0f      	cmp	r3, #15
 80031c0:	f67f ae90 	bls.w	8002ee4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80031c4:	bf00      	nop
 80031c6:	bf00      	nop
 80031c8:	3724      	adds	r7, #36	@ 0x24
 80031ca:	46bd      	mov	sp, r7
 80031cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d0:	4770      	bx	lr
 80031d2:	bf00      	nop
 80031d4:	40023800 	.word	0x40023800
 80031d8:	40013800 	.word	0x40013800
 80031dc:	40020000 	.word	0x40020000
 80031e0:	40020400 	.word	0x40020400
 80031e4:	40020800 	.word	0x40020800
 80031e8:	40020c00 	.word	0x40020c00
 80031ec:	40021000 	.word	0x40021000
 80031f0:	40021400 	.word	0x40021400
 80031f4:	40021800 	.word	0x40021800
 80031f8:	40021c00 	.word	0x40021c00
 80031fc:	40013c00 	.word	0x40013c00

08003200 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003200:	b480      	push	{r7}
 8003202:	b083      	sub	sp, #12
 8003204:	af00      	add	r7, sp, #0
 8003206:	6078      	str	r0, [r7, #4]
 8003208:	460b      	mov	r3, r1
 800320a:	807b      	strh	r3, [r7, #2]
 800320c:	4613      	mov	r3, r2
 800320e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003210:	787b      	ldrb	r3, [r7, #1]
 8003212:	2b00      	cmp	r3, #0
 8003214:	d003      	beq.n	800321e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003216:	887a      	ldrh	r2, [r7, #2]
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800321c:	e003      	b.n	8003226 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800321e:	887b      	ldrh	r3, [r7, #2]
 8003220:	041a      	lsls	r2, r3, #16
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	619a      	str	r2, [r3, #24]
}
 8003226:	bf00      	nop
 8003228:	370c      	adds	r7, #12
 800322a:	46bd      	mov	sp, r7
 800322c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003230:	4770      	bx	lr

08003232 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003232:	b480      	push	{r7}
 8003234:	b085      	sub	sp, #20
 8003236:	af00      	add	r7, sp, #0
 8003238:	6078      	str	r0, [r7, #4]
 800323a:	460b      	mov	r3, r1
 800323c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	695b      	ldr	r3, [r3, #20]
 8003242:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003244:	887a      	ldrh	r2, [r7, #2]
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	4013      	ands	r3, r2
 800324a:	041a      	lsls	r2, r3, #16
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	43d9      	mvns	r1, r3
 8003250:	887b      	ldrh	r3, [r7, #2]
 8003252:	400b      	ands	r3, r1
 8003254:	431a      	orrs	r2, r3
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	619a      	str	r2, [r3, #24]
}
 800325a:	bf00      	nop
 800325c:	3714      	adds	r7, #20
 800325e:	46bd      	mov	sp, r7
 8003260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003264:	4770      	bx	lr
	...

08003268 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003268:	b580      	push	{r7, lr}
 800326a:	b084      	sub	sp, #16
 800326c:	af00      	add	r7, sp, #0
 800326e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	2b00      	cmp	r3, #0
 8003274:	d101      	bne.n	800327a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003276:	2301      	movs	r3, #1
 8003278:	e12b      	b.n	80034d2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003280:	b2db      	uxtb	r3, r3
 8003282:	2b00      	cmp	r3, #0
 8003284:	d106      	bne.n	8003294 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	2200      	movs	r2, #0
 800328a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800328e:	6878      	ldr	r0, [r7, #4]
 8003290:	f7fd fd00 	bl	8000c94 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	2224      	movs	r2, #36	@ 0x24
 8003298:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	681a      	ldr	r2, [r3, #0]
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f022 0201 	bic.w	r2, r2, #1
 80032aa:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	681a      	ldr	r2, [r3, #0]
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80032ba:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	681a      	ldr	r2, [r3, #0]
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80032ca:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80032cc:	f000 fd80 	bl	8003dd0 <HAL_RCC_GetPCLK1Freq>
 80032d0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	685b      	ldr	r3, [r3, #4]
 80032d6:	4a81      	ldr	r2, [pc, #516]	@ (80034dc <HAL_I2C_Init+0x274>)
 80032d8:	4293      	cmp	r3, r2
 80032da:	d807      	bhi.n	80032ec <HAL_I2C_Init+0x84>
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	4a80      	ldr	r2, [pc, #512]	@ (80034e0 <HAL_I2C_Init+0x278>)
 80032e0:	4293      	cmp	r3, r2
 80032e2:	bf94      	ite	ls
 80032e4:	2301      	movls	r3, #1
 80032e6:	2300      	movhi	r3, #0
 80032e8:	b2db      	uxtb	r3, r3
 80032ea:	e006      	b.n	80032fa <HAL_I2C_Init+0x92>
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	4a7d      	ldr	r2, [pc, #500]	@ (80034e4 <HAL_I2C_Init+0x27c>)
 80032f0:	4293      	cmp	r3, r2
 80032f2:	bf94      	ite	ls
 80032f4:	2301      	movls	r3, #1
 80032f6:	2300      	movhi	r3, #0
 80032f8:	b2db      	uxtb	r3, r3
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d001      	beq.n	8003302 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80032fe:	2301      	movs	r3, #1
 8003300:	e0e7      	b.n	80034d2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	4a78      	ldr	r2, [pc, #480]	@ (80034e8 <HAL_I2C_Init+0x280>)
 8003306:	fba2 2303 	umull	r2, r3, r2, r3
 800330a:	0c9b      	lsrs	r3, r3, #18
 800330c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	685b      	ldr	r3, [r3, #4]
 8003314:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	68ba      	ldr	r2, [r7, #8]
 800331e:	430a      	orrs	r2, r1
 8003320:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	6a1b      	ldr	r3, [r3, #32]
 8003328:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	685b      	ldr	r3, [r3, #4]
 8003330:	4a6a      	ldr	r2, [pc, #424]	@ (80034dc <HAL_I2C_Init+0x274>)
 8003332:	4293      	cmp	r3, r2
 8003334:	d802      	bhi.n	800333c <HAL_I2C_Init+0xd4>
 8003336:	68bb      	ldr	r3, [r7, #8]
 8003338:	3301      	adds	r3, #1
 800333a:	e009      	b.n	8003350 <HAL_I2C_Init+0xe8>
 800333c:	68bb      	ldr	r3, [r7, #8]
 800333e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003342:	fb02 f303 	mul.w	r3, r2, r3
 8003346:	4a69      	ldr	r2, [pc, #420]	@ (80034ec <HAL_I2C_Init+0x284>)
 8003348:	fba2 2303 	umull	r2, r3, r2, r3
 800334c:	099b      	lsrs	r3, r3, #6
 800334e:	3301      	adds	r3, #1
 8003350:	687a      	ldr	r2, [r7, #4]
 8003352:	6812      	ldr	r2, [r2, #0]
 8003354:	430b      	orrs	r3, r1
 8003356:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	69db      	ldr	r3, [r3, #28]
 800335e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003362:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	685b      	ldr	r3, [r3, #4]
 800336a:	495c      	ldr	r1, [pc, #368]	@ (80034dc <HAL_I2C_Init+0x274>)
 800336c:	428b      	cmp	r3, r1
 800336e:	d819      	bhi.n	80033a4 <HAL_I2C_Init+0x13c>
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	1e59      	subs	r1, r3, #1
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	685b      	ldr	r3, [r3, #4]
 8003378:	005b      	lsls	r3, r3, #1
 800337a:	fbb1 f3f3 	udiv	r3, r1, r3
 800337e:	1c59      	adds	r1, r3, #1
 8003380:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003384:	400b      	ands	r3, r1
 8003386:	2b00      	cmp	r3, #0
 8003388:	d00a      	beq.n	80033a0 <HAL_I2C_Init+0x138>
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	1e59      	subs	r1, r3, #1
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	685b      	ldr	r3, [r3, #4]
 8003392:	005b      	lsls	r3, r3, #1
 8003394:	fbb1 f3f3 	udiv	r3, r1, r3
 8003398:	3301      	adds	r3, #1
 800339a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800339e:	e051      	b.n	8003444 <HAL_I2C_Init+0x1dc>
 80033a0:	2304      	movs	r3, #4
 80033a2:	e04f      	b.n	8003444 <HAL_I2C_Init+0x1dc>
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	689b      	ldr	r3, [r3, #8]
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d111      	bne.n	80033d0 <HAL_I2C_Init+0x168>
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	1e58      	subs	r0, r3, #1
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	6859      	ldr	r1, [r3, #4]
 80033b4:	460b      	mov	r3, r1
 80033b6:	005b      	lsls	r3, r3, #1
 80033b8:	440b      	add	r3, r1
 80033ba:	fbb0 f3f3 	udiv	r3, r0, r3
 80033be:	3301      	adds	r3, #1
 80033c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	bf0c      	ite	eq
 80033c8:	2301      	moveq	r3, #1
 80033ca:	2300      	movne	r3, #0
 80033cc:	b2db      	uxtb	r3, r3
 80033ce:	e012      	b.n	80033f6 <HAL_I2C_Init+0x18e>
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	1e58      	subs	r0, r3, #1
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	6859      	ldr	r1, [r3, #4]
 80033d8:	460b      	mov	r3, r1
 80033da:	009b      	lsls	r3, r3, #2
 80033dc:	440b      	add	r3, r1
 80033de:	0099      	lsls	r1, r3, #2
 80033e0:	440b      	add	r3, r1
 80033e2:	fbb0 f3f3 	udiv	r3, r0, r3
 80033e6:	3301      	adds	r3, #1
 80033e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	bf0c      	ite	eq
 80033f0:	2301      	moveq	r3, #1
 80033f2:	2300      	movne	r3, #0
 80033f4:	b2db      	uxtb	r3, r3
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d001      	beq.n	80033fe <HAL_I2C_Init+0x196>
 80033fa:	2301      	movs	r3, #1
 80033fc:	e022      	b.n	8003444 <HAL_I2C_Init+0x1dc>
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	689b      	ldr	r3, [r3, #8]
 8003402:	2b00      	cmp	r3, #0
 8003404:	d10e      	bne.n	8003424 <HAL_I2C_Init+0x1bc>
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	1e58      	subs	r0, r3, #1
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	6859      	ldr	r1, [r3, #4]
 800340e:	460b      	mov	r3, r1
 8003410:	005b      	lsls	r3, r3, #1
 8003412:	440b      	add	r3, r1
 8003414:	fbb0 f3f3 	udiv	r3, r0, r3
 8003418:	3301      	adds	r3, #1
 800341a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800341e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003422:	e00f      	b.n	8003444 <HAL_I2C_Init+0x1dc>
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	1e58      	subs	r0, r3, #1
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	6859      	ldr	r1, [r3, #4]
 800342c:	460b      	mov	r3, r1
 800342e:	009b      	lsls	r3, r3, #2
 8003430:	440b      	add	r3, r1
 8003432:	0099      	lsls	r1, r3, #2
 8003434:	440b      	add	r3, r1
 8003436:	fbb0 f3f3 	udiv	r3, r0, r3
 800343a:	3301      	adds	r3, #1
 800343c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003440:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003444:	6879      	ldr	r1, [r7, #4]
 8003446:	6809      	ldr	r1, [r1, #0]
 8003448:	4313      	orrs	r3, r2
 800344a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	69da      	ldr	r2, [r3, #28]
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	6a1b      	ldr	r3, [r3, #32]
 800345e:	431a      	orrs	r2, r3
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	430a      	orrs	r2, r1
 8003466:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	689b      	ldr	r3, [r3, #8]
 800346e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003472:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003476:	687a      	ldr	r2, [r7, #4]
 8003478:	6911      	ldr	r1, [r2, #16]
 800347a:	687a      	ldr	r2, [r7, #4]
 800347c:	68d2      	ldr	r2, [r2, #12]
 800347e:	4311      	orrs	r1, r2
 8003480:	687a      	ldr	r2, [r7, #4]
 8003482:	6812      	ldr	r2, [r2, #0]
 8003484:	430b      	orrs	r3, r1
 8003486:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	68db      	ldr	r3, [r3, #12]
 800348e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	695a      	ldr	r2, [r3, #20]
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	699b      	ldr	r3, [r3, #24]
 800349a:	431a      	orrs	r2, r3
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	430a      	orrs	r2, r1
 80034a2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	681a      	ldr	r2, [r3, #0]
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f042 0201 	orr.w	r2, r2, #1
 80034b2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	2200      	movs	r2, #0
 80034b8:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	2220      	movs	r2, #32
 80034be:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	2200      	movs	r2, #0
 80034c6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	2200      	movs	r2, #0
 80034cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80034d0:	2300      	movs	r3, #0
}
 80034d2:	4618      	mov	r0, r3
 80034d4:	3710      	adds	r7, #16
 80034d6:	46bd      	mov	sp, r7
 80034d8:	bd80      	pop	{r7, pc}
 80034da:	bf00      	nop
 80034dc:	000186a0 	.word	0x000186a0
 80034e0:	001e847f 	.word	0x001e847f
 80034e4:	003d08ff 	.word	0x003d08ff
 80034e8:	431bde83 	.word	0x431bde83
 80034ec:	10624dd3 	.word	0x10624dd3

080034f0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80034f0:	b580      	push	{r7, lr}
 80034f2:	b086      	sub	sp, #24
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d101      	bne.n	8003502 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80034fe:	2301      	movs	r3, #1
 8003500:	e267      	b.n	80039d2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f003 0301 	and.w	r3, r3, #1
 800350a:	2b00      	cmp	r3, #0
 800350c:	d075      	beq.n	80035fa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800350e:	4b88      	ldr	r3, [pc, #544]	@ (8003730 <HAL_RCC_OscConfig+0x240>)
 8003510:	689b      	ldr	r3, [r3, #8]
 8003512:	f003 030c 	and.w	r3, r3, #12
 8003516:	2b04      	cmp	r3, #4
 8003518:	d00c      	beq.n	8003534 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800351a:	4b85      	ldr	r3, [pc, #532]	@ (8003730 <HAL_RCC_OscConfig+0x240>)
 800351c:	689b      	ldr	r3, [r3, #8]
 800351e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003522:	2b08      	cmp	r3, #8
 8003524:	d112      	bne.n	800354c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003526:	4b82      	ldr	r3, [pc, #520]	@ (8003730 <HAL_RCC_OscConfig+0x240>)
 8003528:	685b      	ldr	r3, [r3, #4]
 800352a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800352e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003532:	d10b      	bne.n	800354c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003534:	4b7e      	ldr	r3, [pc, #504]	@ (8003730 <HAL_RCC_OscConfig+0x240>)
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800353c:	2b00      	cmp	r3, #0
 800353e:	d05b      	beq.n	80035f8 <HAL_RCC_OscConfig+0x108>
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	685b      	ldr	r3, [r3, #4]
 8003544:	2b00      	cmp	r3, #0
 8003546:	d157      	bne.n	80035f8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003548:	2301      	movs	r3, #1
 800354a:	e242      	b.n	80039d2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	685b      	ldr	r3, [r3, #4]
 8003550:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003554:	d106      	bne.n	8003564 <HAL_RCC_OscConfig+0x74>
 8003556:	4b76      	ldr	r3, [pc, #472]	@ (8003730 <HAL_RCC_OscConfig+0x240>)
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	4a75      	ldr	r2, [pc, #468]	@ (8003730 <HAL_RCC_OscConfig+0x240>)
 800355c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003560:	6013      	str	r3, [r2, #0]
 8003562:	e01d      	b.n	80035a0 <HAL_RCC_OscConfig+0xb0>
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	685b      	ldr	r3, [r3, #4]
 8003568:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800356c:	d10c      	bne.n	8003588 <HAL_RCC_OscConfig+0x98>
 800356e:	4b70      	ldr	r3, [pc, #448]	@ (8003730 <HAL_RCC_OscConfig+0x240>)
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	4a6f      	ldr	r2, [pc, #444]	@ (8003730 <HAL_RCC_OscConfig+0x240>)
 8003574:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003578:	6013      	str	r3, [r2, #0]
 800357a:	4b6d      	ldr	r3, [pc, #436]	@ (8003730 <HAL_RCC_OscConfig+0x240>)
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	4a6c      	ldr	r2, [pc, #432]	@ (8003730 <HAL_RCC_OscConfig+0x240>)
 8003580:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003584:	6013      	str	r3, [r2, #0]
 8003586:	e00b      	b.n	80035a0 <HAL_RCC_OscConfig+0xb0>
 8003588:	4b69      	ldr	r3, [pc, #420]	@ (8003730 <HAL_RCC_OscConfig+0x240>)
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	4a68      	ldr	r2, [pc, #416]	@ (8003730 <HAL_RCC_OscConfig+0x240>)
 800358e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003592:	6013      	str	r3, [r2, #0]
 8003594:	4b66      	ldr	r3, [pc, #408]	@ (8003730 <HAL_RCC_OscConfig+0x240>)
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	4a65      	ldr	r2, [pc, #404]	@ (8003730 <HAL_RCC_OscConfig+0x240>)
 800359a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800359e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	685b      	ldr	r3, [r3, #4]
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d013      	beq.n	80035d0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035a8:	f7fe fd6e 	bl	8002088 <HAL_GetTick>
 80035ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035ae:	e008      	b.n	80035c2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80035b0:	f7fe fd6a 	bl	8002088 <HAL_GetTick>
 80035b4:	4602      	mov	r2, r0
 80035b6:	693b      	ldr	r3, [r7, #16]
 80035b8:	1ad3      	subs	r3, r2, r3
 80035ba:	2b64      	cmp	r3, #100	@ 0x64
 80035bc:	d901      	bls.n	80035c2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80035be:	2303      	movs	r3, #3
 80035c0:	e207      	b.n	80039d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035c2:	4b5b      	ldr	r3, [pc, #364]	@ (8003730 <HAL_RCC_OscConfig+0x240>)
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d0f0      	beq.n	80035b0 <HAL_RCC_OscConfig+0xc0>
 80035ce:	e014      	b.n	80035fa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035d0:	f7fe fd5a 	bl	8002088 <HAL_GetTick>
 80035d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80035d6:	e008      	b.n	80035ea <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80035d8:	f7fe fd56 	bl	8002088 <HAL_GetTick>
 80035dc:	4602      	mov	r2, r0
 80035de:	693b      	ldr	r3, [r7, #16]
 80035e0:	1ad3      	subs	r3, r2, r3
 80035e2:	2b64      	cmp	r3, #100	@ 0x64
 80035e4:	d901      	bls.n	80035ea <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80035e6:	2303      	movs	r3, #3
 80035e8:	e1f3      	b.n	80039d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80035ea:	4b51      	ldr	r3, [pc, #324]	@ (8003730 <HAL_RCC_OscConfig+0x240>)
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d1f0      	bne.n	80035d8 <HAL_RCC_OscConfig+0xe8>
 80035f6:	e000      	b.n	80035fa <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f003 0302 	and.w	r3, r3, #2
 8003602:	2b00      	cmp	r3, #0
 8003604:	d063      	beq.n	80036ce <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003606:	4b4a      	ldr	r3, [pc, #296]	@ (8003730 <HAL_RCC_OscConfig+0x240>)
 8003608:	689b      	ldr	r3, [r3, #8]
 800360a:	f003 030c 	and.w	r3, r3, #12
 800360e:	2b00      	cmp	r3, #0
 8003610:	d00b      	beq.n	800362a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003612:	4b47      	ldr	r3, [pc, #284]	@ (8003730 <HAL_RCC_OscConfig+0x240>)
 8003614:	689b      	ldr	r3, [r3, #8]
 8003616:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800361a:	2b08      	cmp	r3, #8
 800361c:	d11c      	bne.n	8003658 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800361e:	4b44      	ldr	r3, [pc, #272]	@ (8003730 <HAL_RCC_OscConfig+0x240>)
 8003620:	685b      	ldr	r3, [r3, #4]
 8003622:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003626:	2b00      	cmp	r3, #0
 8003628:	d116      	bne.n	8003658 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800362a:	4b41      	ldr	r3, [pc, #260]	@ (8003730 <HAL_RCC_OscConfig+0x240>)
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f003 0302 	and.w	r3, r3, #2
 8003632:	2b00      	cmp	r3, #0
 8003634:	d005      	beq.n	8003642 <HAL_RCC_OscConfig+0x152>
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	68db      	ldr	r3, [r3, #12]
 800363a:	2b01      	cmp	r3, #1
 800363c:	d001      	beq.n	8003642 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800363e:	2301      	movs	r3, #1
 8003640:	e1c7      	b.n	80039d2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003642:	4b3b      	ldr	r3, [pc, #236]	@ (8003730 <HAL_RCC_OscConfig+0x240>)
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	691b      	ldr	r3, [r3, #16]
 800364e:	00db      	lsls	r3, r3, #3
 8003650:	4937      	ldr	r1, [pc, #220]	@ (8003730 <HAL_RCC_OscConfig+0x240>)
 8003652:	4313      	orrs	r3, r2
 8003654:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003656:	e03a      	b.n	80036ce <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	68db      	ldr	r3, [r3, #12]
 800365c:	2b00      	cmp	r3, #0
 800365e:	d020      	beq.n	80036a2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003660:	4b34      	ldr	r3, [pc, #208]	@ (8003734 <HAL_RCC_OscConfig+0x244>)
 8003662:	2201      	movs	r2, #1
 8003664:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003666:	f7fe fd0f 	bl	8002088 <HAL_GetTick>
 800366a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800366c:	e008      	b.n	8003680 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800366e:	f7fe fd0b 	bl	8002088 <HAL_GetTick>
 8003672:	4602      	mov	r2, r0
 8003674:	693b      	ldr	r3, [r7, #16]
 8003676:	1ad3      	subs	r3, r2, r3
 8003678:	2b02      	cmp	r3, #2
 800367a:	d901      	bls.n	8003680 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800367c:	2303      	movs	r3, #3
 800367e:	e1a8      	b.n	80039d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003680:	4b2b      	ldr	r3, [pc, #172]	@ (8003730 <HAL_RCC_OscConfig+0x240>)
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f003 0302 	and.w	r3, r3, #2
 8003688:	2b00      	cmp	r3, #0
 800368a:	d0f0      	beq.n	800366e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800368c:	4b28      	ldr	r3, [pc, #160]	@ (8003730 <HAL_RCC_OscConfig+0x240>)
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	691b      	ldr	r3, [r3, #16]
 8003698:	00db      	lsls	r3, r3, #3
 800369a:	4925      	ldr	r1, [pc, #148]	@ (8003730 <HAL_RCC_OscConfig+0x240>)
 800369c:	4313      	orrs	r3, r2
 800369e:	600b      	str	r3, [r1, #0]
 80036a0:	e015      	b.n	80036ce <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80036a2:	4b24      	ldr	r3, [pc, #144]	@ (8003734 <HAL_RCC_OscConfig+0x244>)
 80036a4:	2200      	movs	r2, #0
 80036a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036a8:	f7fe fcee 	bl	8002088 <HAL_GetTick>
 80036ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80036ae:	e008      	b.n	80036c2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80036b0:	f7fe fcea 	bl	8002088 <HAL_GetTick>
 80036b4:	4602      	mov	r2, r0
 80036b6:	693b      	ldr	r3, [r7, #16]
 80036b8:	1ad3      	subs	r3, r2, r3
 80036ba:	2b02      	cmp	r3, #2
 80036bc:	d901      	bls.n	80036c2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80036be:	2303      	movs	r3, #3
 80036c0:	e187      	b.n	80039d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80036c2:	4b1b      	ldr	r3, [pc, #108]	@ (8003730 <HAL_RCC_OscConfig+0x240>)
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f003 0302 	and.w	r3, r3, #2
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d1f0      	bne.n	80036b0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f003 0308 	and.w	r3, r3, #8
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d036      	beq.n	8003748 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	695b      	ldr	r3, [r3, #20]
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d016      	beq.n	8003710 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80036e2:	4b15      	ldr	r3, [pc, #84]	@ (8003738 <HAL_RCC_OscConfig+0x248>)
 80036e4:	2201      	movs	r2, #1
 80036e6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036e8:	f7fe fcce 	bl	8002088 <HAL_GetTick>
 80036ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80036ee:	e008      	b.n	8003702 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80036f0:	f7fe fcca 	bl	8002088 <HAL_GetTick>
 80036f4:	4602      	mov	r2, r0
 80036f6:	693b      	ldr	r3, [r7, #16]
 80036f8:	1ad3      	subs	r3, r2, r3
 80036fa:	2b02      	cmp	r3, #2
 80036fc:	d901      	bls.n	8003702 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80036fe:	2303      	movs	r3, #3
 8003700:	e167      	b.n	80039d2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003702:	4b0b      	ldr	r3, [pc, #44]	@ (8003730 <HAL_RCC_OscConfig+0x240>)
 8003704:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003706:	f003 0302 	and.w	r3, r3, #2
 800370a:	2b00      	cmp	r3, #0
 800370c:	d0f0      	beq.n	80036f0 <HAL_RCC_OscConfig+0x200>
 800370e:	e01b      	b.n	8003748 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003710:	4b09      	ldr	r3, [pc, #36]	@ (8003738 <HAL_RCC_OscConfig+0x248>)
 8003712:	2200      	movs	r2, #0
 8003714:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003716:	f7fe fcb7 	bl	8002088 <HAL_GetTick>
 800371a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800371c:	e00e      	b.n	800373c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800371e:	f7fe fcb3 	bl	8002088 <HAL_GetTick>
 8003722:	4602      	mov	r2, r0
 8003724:	693b      	ldr	r3, [r7, #16]
 8003726:	1ad3      	subs	r3, r2, r3
 8003728:	2b02      	cmp	r3, #2
 800372a:	d907      	bls.n	800373c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800372c:	2303      	movs	r3, #3
 800372e:	e150      	b.n	80039d2 <HAL_RCC_OscConfig+0x4e2>
 8003730:	40023800 	.word	0x40023800
 8003734:	42470000 	.word	0x42470000
 8003738:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800373c:	4b88      	ldr	r3, [pc, #544]	@ (8003960 <HAL_RCC_OscConfig+0x470>)
 800373e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003740:	f003 0302 	and.w	r3, r3, #2
 8003744:	2b00      	cmp	r3, #0
 8003746:	d1ea      	bne.n	800371e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f003 0304 	and.w	r3, r3, #4
 8003750:	2b00      	cmp	r3, #0
 8003752:	f000 8097 	beq.w	8003884 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003756:	2300      	movs	r3, #0
 8003758:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800375a:	4b81      	ldr	r3, [pc, #516]	@ (8003960 <HAL_RCC_OscConfig+0x470>)
 800375c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800375e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003762:	2b00      	cmp	r3, #0
 8003764:	d10f      	bne.n	8003786 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003766:	2300      	movs	r3, #0
 8003768:	60bb      	str	r3, [r7, #8]
 800376a:	4b7d      	ldr	r3, [pc, #500]	@ (8003960 <HAL_RCC_OscConfig+0x470>)
 800376c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800376e:	4a7c      	ldr	r2, [pc, #496]	@ (8003960 <HAL_RCC_OscConfig+0x470>)
 8003770:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003774:	6413      	str	r3, [r2, #64]	@ 0x40
 8003776:	4b7a      	ldr	r3, [pc, #488]	@ (8003960 <HAL_RCC_OscConfig+0x470>)
 8003778:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800377a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800377e:	60bb      	str	r3, [r7, #8]
 8003780:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003782:	2301      	movs	r3, #1
 8003784:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003786:	4b77      	ldr	r3, [pc, #476]	@ (8003964 <HAL_RCC_OscConfig+0x474>)
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800378e:	2b00      	cmp	r3, #0
 8003790:	d118      	bne.n	80037c4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003792:	4b74      	ldr	r3, [pc, #464]	@ (8003964 <HAL_RCC_OscConfig+0x474>)
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	4a73      	ldr	r2, [pc, #460]	@ (8003964 <HAL_RCC_OscConfig+0x474>)
 8003798:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800379c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800379e:	f7fe fc73 	bl	8002088 <HAL_GetTick>
 80037a2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037a4:	e008      	b.n	80037b8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80037a6:	f7fe fc6f 	bl	8002088 <HAL_GetTick>
 80037aa:	4602      	mov	r2, r0
 80037ac:	693b      	ldr	r3, [r7, #16]
 80037ae:	1ad3      	subs	r3, r2, r3
 80037b0:	2b02      	cmp	r3, #2
 80037b2:	d901      	bls.n	80037b8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80037b4:	2303      	movs	r3, #3
 80037b6:	e10c      	b.n	80039d2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037b8:	4b6a      	ldr	r3, [pc, #424]	@ (8003964 <HAL_RCC_OscConfig+0x474>)
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d0f0      	beq.n	80037a6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	689b      	ldr	r3, [r3, #8]
 80037c8:	2b01      	cmp	r3, #1
 80037ca:	d106      	bne.n	80037da <HAL_RCC_OscConfig+0x2ea>
 80037cc:	4b64      	ldr	r3, [pc, #400]	@ (8003960 <HAL_RCC_OscConfig+0x470>)
 80037ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037d0:	4a63      	ldr	r2, [pc, #396]	@ (8003960 <HAL_RCC_OscConfig+0x470>)
 80037d2:	f043 0301 	orr.w	r3, r3, #1
 80037d6:	6713      	str	r3, [r2, #112]	@ 0x70
 80037d8:	e01c      	b.n	8003814 <HAL_RCC_OscConfig+0x324>
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	689b      	ldr	r3, [r3, #8]
 80037de:	2b05      	cmp	r3, #5
 80037e0:	d10c      	bne.n	80037fc <HAL_RCC_OscConfig+0x30c>
 80037e2:	4b5f      	ldr	r3, [pc, #380]	@ (8003960 <HAL_RCC_OscConfig+0x470>)
 80037e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037e6:	4a5e      	ldr	r2, [pc, #376]	@ (8003960 <HAL_RCC_OscConfig+0x470>)
 80037e8:	f043 0304 	orr.w	r3, r3, #4
 80037ec:	6713      	str	r3, [r2, #112]	@ 0x70
 80037ee:	4b5c      	ldr	r3, [pc, #368]	@ (8003960 <HAL_RCC_OscConfig+0x470>)
 80037f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037f2:	4a5b      	ldr	r2, [pc, #364]	@ (8003960 <HAL_RCC_OscConfig+0x470>)
 80037f4:	f043 0301 	orr.w	r3, r3, #1
 80037f8:	6713      	str	r3, [r2, #112]	@ 0x70
 80037fa:	e00b      	b.n	8003814 <HAL_RCC_OscConfig+0x324>
 80037fc:	4b58      	ldr	r3, [pc, #352]	@ (8003960 <HAL_RCC_OscConfig+0x470>)
 80037fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003800:	4a57      	ldr	r2, [pc, #348]	@ (8003960 <HAL_RCC_OscConfig+0x470>)
 8003802:	f023 0301 	bic.w	r3, r3, #1
 8003806:	6713      	str	r3, [r2, #112]	@ 0x70
 8003808:	4b55      	ldr	r3, [pc, #340]	@ (8003960 <HAL_RCC_OscConfig+0x470>)
 800380a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800380c:	4a54      	ldr	r2, [pc, #336]	@ (8003960 <HAL_RCC_OscConfig+0x470>)
 800380e:	f023 0304 	bic.w	r3, r3, #4
 8003812:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	689b      	ldr	r3, [r3, #8]
 8003818:	2b00      	cmp	r3, #0
 800381a:	d015      	beq.n	8003848 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800381c:	f7fe fc34 	bl	8002088 <HAL_GetTick>
 8003820:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003822:	e00a      	b.n	800383a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003824:	f7fe fc30 	bl	8002088 <HAL_GetTick>
 8003828:	4602      	mov	r2, r0
 800382a:	693b      	ldr	r3, [r7, #16]
 800382c:	1ad3      	subs	r3, r2, r3
 800382e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003832:	4293      	cmp	r3, r2
 8003834:	d901      	bls.n	800383a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003836:	2303      	movs	r3, #3
 8003838:	e0cb      	b.n	80039d2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800383a:	4b49      	ldr	r3, [pc, #292]	@ (8003960 <HAL_RCC_OscConfig+0x470>)
 800383c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800383e:	f003 0302 	and.w	r3, r3, #2
 8003842:	2b00      	cmp	r3, #0
 8003844:	d0ee      	beq.n	8003824 <HAL_RCC_OscConfig+0x334>
 8003846:	e014      	b.n	8003872 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003848:	f7fe fc1e 	bl	8002088 <HAL_GetTick>
 800384c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800384e:	e00a      	b.n	8003866 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003850:	f7fe fc1a 	bl	8002088 <HAL_GetTick>
 8003854:	4602      	mov	r2, r0
 8003856:	693b      	ldr	r3, [r7, #16]
 8003858:	1ad3      	subs	r3, r2, r3
 800385a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800385e:	4293      	cmp	r3, r2
 8003860:	d901      	bls.n	8003866 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003862:	2303      	movs	r3, #3
 8003864:	e0b5      	b.n	80039d2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003866:	4b3e      	ldr	r3, [pc, #248]	@ (8003960 <HAL_RCC_OscConfig+0x470>)
 8003868:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800386a:	f003 0302 	and.w	r3, r3, #2
 800386e:	2b00      	cmp	r3, #0
 8003870:	d1ee      	bne.n	8003850 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003872:	7dfb      	ldrb	r3, [r7, #23]
 8003874:	2b01      	cmp	r3, #1
 8003876:	d105      	bne.n	8003884 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003878:	4b39      	ldr	r3, [pc, #228]	@ (8003960 <HAL_RCC_OscConfig+0x470>)
 800387a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800387c:	4a38      	ldr	r2, [pc, #224]	@ (8003960 <HAL_RCC_OscConfig+0x470>)
 800387e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003882:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	699b      	ldr	r3, [r3, #24]
 8003888:	2b00      	cmp	r3, #0
 800388a:	f000 80a1 	beq.w	80039d0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800388e:	4b34      	ldr	r3, [pc, #208]	@ (8003960 <HAL_RCC_OscConfig+0x470>)
 8003890:	689b      	ldr	r3, [r3, #8]
 8003892:	f003 030c 	and.w	r3, r3, #12
 8003896:	2b08      	cmp	r3, #8
 8003898:	d05c      	beq.n	8003954 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	699b      	ldr	r3, [r3, #24]
 800389e:	2b02      	cmp	r3, #2
 80038a0:	d141      	bne.n	8003926 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038a2:	4b31      	ldr	r3, [pc, #196]	@ (8003968 <HAL_RCC_OscConfig+0x478>)
 80038a4:	2200      	movs	r2, #0
 80038a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038a8:	f7fe fbee 	bl	8002088 <HAL_GetTick>
 80038ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038ae:	e008      	b.n	80038c2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80038b0:	f7fe fbea 	bl	8002088 <HAL_GetTick>
 80038b4:	4602      	mov	r2, r0
 80038b6:	693b      	ldr	r3, [r7, #16]
 80038b8:	1ad3      	subs	r3, r2, r3
 80038ba:	2b02      	cmp	r3, #2
 80038bc:	d901      	bls.n	80038c2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80038be:	2303      	movs	r3, #3
 80038c0:	e087      	b.n	80039d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038c2:	4b27      	ldr	r3, [pc, #156]	@ (8003960 <HAL_RCC_OscConfig+0x470>)
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d1f0      	bne.n	80038b0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	69da      	ldr	r2, [r3, #28]
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	6a1b      	ldr	r3, [r3, #32]
 80038d6:	431a      	orrs	r2, r3
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038dc:	019b      	lsls	r3, r3, #6
 80038de:	431a      	orrs	r2, r3
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038e4:	085b      	lsrs	r3, r3, #1
 80038e6:	3b01      	subs	r3, #1
 80038e8:	041b      	lsls	r3, r3, #16
 80038ea:	431a      	orrs	r2, r3
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038f0:	061b      	lsls	r3, r3, #24
 80038f2:	491b      	ldr	r1, [pc, #108]	@ (8003960 <HAL_RCC_OscConfig+0x470>)
 80038f4:	4313      	orrs	r3, r2
 80038f6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80038f8:	4b1b      	ldr	r3, [pc, #108]	@ (8003968 <HAL_RCC_OscConfig+0x478>)
 80038fa:	2201      	movs	r2, #1
 80038fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038fe:	f7fe fbc3 	bl	8002088 <HAL_GetTick>
 8003902:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003904:	e008      	b.n	8003918 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003906:	f7fe fbbf 	bl	8002088 <HAL_GetTick>
 800390a:	4602      	mov	r2, r0
 800390c:	693b      	ldr	r3, [r7, #16]
 800390e:	1ad3      	subs	r3, r2, r3
 8003910:	2b02      	cmp	r3, #2
 8003912:	d901      	bls.n	8003918 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003914:	2303      	movs	r3, #3
 8003916:	e05c      	b.n	80039d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003918:	4b11      	ldr	r3, [pc, #68]	@ (8003960 <HAL_RCC_OscConfig+0x470>)
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003920:	2b00      	cmp	r3, #0
 8003922:	d0f0      	beq.n	8003906 <HAL_RCC_OscConfig+0x416>
 8003924:	e054      	b.n	80039d0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003926:	4b10      	ldr	r3, [pc, #64]	@ (8003968 <HAL_RCC_OscConfig+0x478>)
 8003928:	2200      	movs	r2, #0
 800392a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800392c:	f7fe fbac 	bl	8002088 <HAL_GetTick>
 8003930:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003932:	e008      	b.n	8003946 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003934:	f7fe fba8 	bl	8002088 <HAL_GetTick>
 8003938:	4602      	mov	r2, r0
 800393a:	693b      	ldr	r3, [r7, #16]
 800393c:	1ad3      	subs	r3, r2, r3
 800393e:	2b02      	cmp	r3, #2
 8003940:	d901      	bls.n	8003946 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003942:	2303      	movs	r3, #3
 8003944:	e045      	b.n	80039d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003946:	4b06      	ldr	r3, [pc, #24]	@ (8003960 <HAL_RCC_OscConfig+0x470>)
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800394e:	2b00      	cmp	r3, #0
 8003950:	d1f0      	bne.n	8003934 <HAL_RCC_OscConfig+0x444>
 8003952:	e03d      	b.n	80039d0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	699b      	ldr	r3, [r3, #24]
 8003958:	2b01      	cmp	r3, #1
 800395a:	d107      	bne.n	800396c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800395c:	2301      	movs	r3, #1
 800395e:	e038      	b.n	80039d2 <HAL_RCC_OscConfig+0x4e2>
 8003960:	40023800 	.word	0x40023800
 8003964:	40007000 	.word	0x40007000
 8003968:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800396c:	4b1b      	ldr	r3, [pc, #108]	@ (80039dc <HAL_RCC_OscConfig+0x4ec>)
 800396e:	685b      	ldr	r3, [r3, #4]
 8003970:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	699b      	ldr	r3, [r3, #24]
 8003976:	2b01      	cmp	r3, #1
 8003978:	d028      	beq.n	80039cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003984:	429a      	cmp	r2, r3
 8003986:	d121      	bne.n	80039cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003992:	429a      	cmp	r2, r3
 8003994:	d11a      	bne.n	80039cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003996:	68fa      	ldr	r2, [r7, #12]
 8003998:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800399c:	4013      	ands	r3, r2
 800399e:	687a      	ldr	r2, [r7, #4]
 80039a0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80039a2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80039a4:	4293      	cmp	r3, r2
 80039a6:	d111      	bne.n	80039cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039b2:	085b      	lsrs	r3, r3, #1
 80039b4:	3b01      	subs	r3, #1
 80039b6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80039b8:	429a      	cmp	r2, r3
 80039ba:	d107      	bne.n	80039cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039c6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80039c8:	429a      	cmp	r2, r3
 80039ca:	d001      	beq.n	80039d0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80039cc:	2301      	movs	r3, #1
 80039ce:	e000      	b.n	80039d2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80039d0:	2300      	movs	r3, #0
}
 80039d2:	4618      	mov	r0, r3
 80039d4:	3718      	adds	r7, #24
 80039d6:	46bd      	mov	sp, r7
 80039d8:	bd80      	pop	{r7, pc}
 80039da:	bf00      	nop
 80039dc:	40023800 	.word	0x40023800

080039e0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80039e0:	b580      	push	{r7, lr}
 80039e2:	b084      	sub	sp, #16
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	6078      	str	r0, [r7, #4]
 80039e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d101      	bne.n	80039f4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80039f0:	2301      	movs	r3, #1
 80039f2:	e0cc      	b.n	8003b8e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80039f4:	4b68      	ldr	r3, [pc, #416]	@ (8003b98 <HAL_RCC_ClockConfig+0x1b8>)
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f003 0307 	and.w	r3, r3, #7
 80039fc:	683a      	ldr	r2, [r7, #0]
 80039fe:	429a      	cmp	r2, r3
 8003a00:	d90c      	bls.n	8003a1c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a02:	4b65      	ldr	r3, [pc, #404]	@ (8003b98 <HAL_RCC_ClockConfig+0x1b8>)
 8003a04:	683a      	ldr	r2, [r7, #0]
 8003a06:	b2d2      	uxtb	r2, r2
 8003a08:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a0a:	4b63      	ldr	r3, [pc, #396]	@ (8003b98 <HAL_RCC_ClockConfig+0x1b8>)
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f003 0307 	and.w	r3, r3, #7
 8003a12:	683a      	ldr	r2, [r7, #0]
 8003a14:	429a      	cmp	r2, r3
 8003a16:	d001      	beq.n	8003a1c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003a18:	2301      	movs	r3, #1
 8003a1a:	e0b8      	b.n	8003b8e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f003 0302 	and.w	r3, r3, #2
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d020      	beq.n	8003a6a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f003 0304 	and.w	r3, r3, #4
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d005      	beq.n	8003a40 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003a34:	4b59      	ldr	r3, [pc, #356]	@ (8003b9c <HAL_RCC_ClockConfig+0x1bc>)
 8003a36:	689b      	ldr	r3, [r3, #8]
 8003a38:	4a58      	ldr	r2, [pc, #352]	@ (8003b9c <HAL_RCC_ClockConfig+0x1bc>)
 8003a3a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003a3e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f003 0308 	and.w	r3, r3, #8
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d005      	beq.n	8003a58 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003a4c:	4b53      	ldr	r3, [pc, #332]	@ (8003b9c <HAL_RCC_ClockConfig+0x1bc>)
 8003a4e:	689b      	ldr	r3, [r3, #8]
 8003a50:	4a52      	ldr	r2, [pc, #328]	@ (8003b9c <HAL_RCC_ClockConfig+0x1bc>)
 8003a52:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003a56:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a58:	4b50      	ldr	r3, [pc, #320]	@ (8003b9c <HAL_RCC_ClockConfig+0x1bc>)
 8003a5a:	689b      	ldr	r3, [r3, #8]
 8003a5c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	689b      	ldr	r3, [r3, #8]
 8003a64:	494d      	ldr	r1, [pc, #308]	@ (8003b9c <HAL_RCC_ClockConfig+0x1bc>)
 8003a66:	4313      	orrs	r3, r2
 8003a68:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f003 0301 	and.w	r3, r3, #1
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d044      	beq.n	8003b00 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	685b      	ldr	r3, [r3, #4]
 8003a7a:	2b01      	cmp	r3, #1
 8003a7c:	d107      	bne.n	8003a8e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a7e:	4b47      	ldr	r3, [pc, #284]	@ (8003b9c <HAL_RCC_ClockConfig+0x1bc>)
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d119      	bne.n	8003abe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a8a:	2301      	movs	r3, #1
 8003a8c:	e07f      	b.n	8003b8e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	685b      	ldr	r3, [r3, #4]
 8003a92:	2b02      	cmp	r3, #2
 8003a94:	d003      	beq.n	8003a9e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003a9a:	2b03      	cmp	r3, #3
 8003a9c:	d107      	bne.n	8003aae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a9e:	4b3f      	ldr	r3, [pc, #252]	@ (8003b9c <HAL_RCC_ClockConfig+0x1bc>)
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d109      	bne.n	8003abe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003aaa:	2301      	movs	r3, #1
 8003aac:	e06f      	b.n	8003b8e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003aae:	4b3b      	ldr	r3, [pc, #236]	@ (8003b9c <HAL_RCC_ClockConfig+0x1bc>)
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f003 0302 	and.w	r3, r3, #2
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d101      	bne.n	8003abe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003aba:	2301      	movs	r3, #1
 8003abc:	e067      	b.n	8003b8e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003abe:	4b37      	ldr	r3, [pc, #220]	@ (8003b9c <HAL_RCC_ClockConfig+0x1bc>)
 8003ac0:	689b      	ldr	r3, [r3, #8]
 8003ac2:	f023 0203 	bic.w	r2, r3, #3
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	685b      	ldr	r3, [r3, #4]
 8003aca:	4934      	ldr	r1, [pc, #208]	@ (8003b9c <HAL_RCC_ClockConfig+0x1bc>)
 8003acc:	4313      	orrs	r3, r2
 8003ace:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003ad0:	f7fe fada 	bl	8002088 <HAL_GetTick>
 8003ad4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ad6:	e00a      	b.n	8003aee <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ad8:	f7fe fad6 	bl	8002088 <HAL_GetTick>
 8003adc:	4602      	mov	r2, r0
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	1ad3      	subs	r3, r2, r3
 8003ae2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ae6:	4293      	cmp	r3, r2
 8003ae8:	d901      	bls.n	8003aee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003aea:	2303      	movs	r3, #3
 8003aec:	e04f      	b.n	8003b8e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003aee:	4b2b      	ldr	r3, [pc, #172]	@ (8003b9c <HAL_RCC_ClockConfig+0x1bc>)
 8003af0:	689b      	ldr	r3, [r3, #8]
 8003af2:	f003 020c 	and.w	r2, r3, #12
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	685b      	ldr	r3, [r3, #4]
 8003afa:	009b      	lsls	r3, r3, #2
 8003afc:	429a      	cmp	r2, r3
 8003afe:	d1eb      	bne.n	8003ad8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003b00:	4b25      	ldr	r3, [pc, #148]	@ (8003b98 <HAL_RCC_ClockConfig+0x1b8>)
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f003 0307 	and.w	r3, r3, #7
 8003b08:	683a      	ldr	r2, [r7, #0]
 8003b0a:	429a      	cmp	r2, r3
 8003b0c:	d20c      	bcs.n	8003b28 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b0e:	4b22      	ldr	r3, [pc, #136]	@ (8003b98 <HAL_RCC_ClockConfig+0x1b8>)
 8003b10:	683a      	ldr	r2, [r7, #0]
 8003b12:	b2d2      	uxtb	r2, r2
 8003b14:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b16:	4b20      	ldr	r3, [pc, #128]	@ (8003b98 <HAL_RCC_ClockConfig+0x1b8>)
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f003 0307 	and.w	r3, r3, #7
 8003b1e:	683a      	ldr	r2, [r7, #0]
 8003b20:	429a      	cmp	r2, r3
 8003b22:	d001      	beq.n	8003b28 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003b24:	2301      	movs	r3, #1
 8003b26:	e032      	b.n	8003b8e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f003 0304 	and.w	r3, r3, #4
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d008      	beq.n	8003b46 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003b34:	4b19      	ldr	r3, [pc, #100]	@ (8003b9c <HAL_RCC_ClockConfig+0x1bc>)
 8003b36:	689b      	ldr	r3, [r3, #8]
 8003b38:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	68db      	ldr	r3, [r3, #12]
 8003b40:	4916      	ldr	r1, [pc, #88]	@ (8003b9c <HAL_RCC_ClockConfig+0x1bc>)
 8003b42:	4313      	orrs	r3, r2
 8003b44:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f003 0308 	and.w	r3, r3, #8
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d009      	beq.n	8003b66 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003b52:	4b12      	ldr	r3, [pc, #72]	@ (8003b9c <HAL_RCC_ClockConfig+0x1bc>)
 8003b54:	689b      	ldr	r3, [r3, #8]
 8003b56:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	691b      	ldr	r3, [r3, #16]
 8003b5e:	00db      	lsls	r3, r3, #3
 8003b60:	490e      	ldr	r1, [pc, #56]	@ (8003b9c <HAL_RCC_ClockConfig+0x1bc>)
 8003b62:	4313      	orrs	r3, r2
 8003b64:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003b66:	f000 f821 	bl	8003bac <HAL_RCC_GetSysClockFreq>
 8003b6a:	4602      	mov	r2, r0
 8003b6c:	4b0b      	ldr	r3, [pc, #44]	@ (8003b9c <HAL_RCC_ClockConfig+0x1bc>)
 8003b6e:	689b      	ldr	r3, [r3, #8]
 8003b70:	091b      	lsrs	r3, r3, #4
 8003b72:	f003 030f 	and.w	r3, r3, #15
 8003b76:	490a      	ldr	r1, [pc, #40]	@ (8003ba0 <HAL_RCC_ClockConfig+0x1c0>)
 8003b78:	5ccb      	ldrb	r3, [r1, r3]
 8003b7a:	fa22 f303 	lsr.w	r3, r2, r3
 8003b7e:	4a09      	ldr	r2, [pc, #36]	@ (8003ba4 <HAL_RCC_ClockConfig+0x1c4>)
 8003b80:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003b82:	4b09      	ldr	r3, [pc, #36]	@ (8003ba8 <HAL_RCC_ClockConfig+0x1c8>)
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	4618      	mov	r0, r3
 8003b88:	f7fe fa3a 	bl	8002000 <HAL_InitTick>

  return HAL_OK;
 8003b8c:	2300      	movs	r3, #0
}
 8003b8e:	4618      	mov	r0, r3
 8003b90:	3710      	adds	r7, #16
 8003b92:	46bd      	mov	sp, r7
 8003b94:	bd80      	pop	{r7, pc}
 8003b96:	bf00      	nop
 8003b98:	40023c00 	.word	0x40023c00
 8003b9c:	40023800 	.word	0x40023800
 8003ba0:	08009bec 	.word	0x08009bec
 8003ba4:	20000008 	.word	0x20000008
 8003ba8:	2000000c 	.word	0x2000000c

08003bac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003bac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003bb0:	b094      	sub	sp, #80	@ 0x50
 8003bb2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003bb4:	2300      	movs	r3, #0
 8003bb6:	647b      	str	r3, [r7, #68]	@ 0x44
 8003bb8:	2300      	movs	r3, #0
 8003bba:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003bbc:	2300      	movs	r3, #0
 8003bbe:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8003bc0:	2300      	movs	r3, #0
 8003bc2:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003bc4:	4b79      	ldr	r3, [pc, #484]	@ (8003dac <HAL_RCC_GetSysClockFreq+0x200>)
 8003bc6:	689b      	ldr	r3, [r3, #8]
 8003bc8:	f003 030c 	and.w	r3, r3, #12
 8003bcc:	2b08      	cmp	r3, #8
 8003bce:	d00d      	beq.n	8003bec <HAL_RCC_GetSysClockFreq+0x40>
 8003bd0:	2b08      	cmp	r3, #8
 8003bd2:	f200 80e1 	bhi.w	8003d98 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d002      	beq.n	8003be0 <HAL_RCC_GetSysClockFreq+0x34>
 8003bda:	2b04      	cmp	r3, #4
 8003bdc:	d003      	beq.n	8003be6 <HAL_RCC_GetSysClockFreq+0x3a>
 8003bde:	e0db      	b.n	8003d98 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003be0:	4b73      	ldr	r3, [pc, #460]	@ (8003db0 <HAL_RCC_GetSysClockFreq+0x204>)
 8003be2:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8003be4:	e0db      	b.n	8003d9e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003be6:	4b73      	ldr	r3, [pc, #460]	@ (8003db4 <HAL_RCC_GetSysClockFreq+0x208>)
 8003be8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003bea:	e0d8      	b.n	8003d9e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003bec:	4b6f      	ldr	r3, [pc, #444]	@ (8003dac <HAL_RCC_GetSysClockFreq+0x200>)
 8003bee:	685b      	ldr	r3, [r3, #4]
 8003bf0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003bf4:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003bf6:	4b6d      	ldr	r3, [pc, #436]	@ (8003dac <HAL_RCC_GetSysClockFreq+0x200>)
 8003bf8:	685b      	ldr	r3, [r3, #4]
 8003bfa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d063      	beq.n	8003cca <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c02:	4b6a      	ldr	r3, [pc, #424]	@ (8003dac <HAL_RCC_GetSysClockFreq+0x200>)
 8003c04:	685b      	ldr	r3, [r3, #4]
 8003c06:	099b      	lsrs	r3, r3, #6
 8003c08:	2200      	movs	r2, #0
 8003c0a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003c0c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003c0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c10:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c14:	633b      	str	r3, [r7, #48]	@ 0x30
 8003c16:	2300      	movs	r3, #0
 8003c18:	637b      	str	r3, [r7, #52]	@ 0x34
 8003c1a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003c1e:	4622      	mov	r2, r4
 8003c20:	462b      	mov	r3, r5
 8003c22:	f04f 0000 	mov.w	r0, #0
 8003c26:	f04f 0100 	mov.w	r1, #0
 8003c2a:	0159      	lsls	r1, r3, #5
 8003c2c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003c30:	0150      	lsls	r0, r2, #5
 8003c32:	4602      	mov	r2, r0
 8003c34:	460b      	mov	r3, r1
 8003c36:	4621      	mov	r1, r4
 8003c38:	1a51      	subs	r1, r2, r1
 8003c3a:	6139      	str	r1, [r7, #16]
 8003c3c:	4629      	mov	r1, r5
 8003c3e:	eb63 0301 	sbc.w	r3, r3, r1
 8003c42:	617b      	str	r3, [r7, #20]
 8003c44:	f04f 0200 	mov.w	r2, #0
 8003c48:	f04f 0300 	mov.w	r3, #0
 8003c4c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003c50:	4659      	mov	r1, fp
 8003c52:	018b      	lsls	r3, r1, #6
 8003c54:	4651      	mov	r1, sl
 8003c56:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003c5a:	4651      	mov	r1, sl
 8003c5c:	018a      	lsls	r2, r1, #6
 8003c5e:	4651      	mov	r1, sl
 8003c60:	ebb2 0801 	subs.w	r8, r2, r1
 8003c64:	4659      	mov	r1, fp
 8003c66:	eb63 0901 	sbc.w	r9, r3, r1
 8003c6a:	f04f 0200 	mov.w	r2, #0
 8003c6e:	f04f 0300 	mov.w	r3, #0
 8003c72:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003c76:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003c7a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003c7e:	4690      	mov	r8, r2
 8003c80:	4699      	mov	r9, r3
 8003c82:	4623      	mov	r3, r4
 8003c84:	eb18 0303 	adds.w	r3, r8, r3
 8003c88:	60bb      	str	r3, [r7, #8]
 8003c8a:	462b      	mov	r3, r5
 8003c8c:	eb49 0303 	adc.w	r3, r9, r3
 8003c90:	60fb      	str	r3, [r7, #12]
 8003c92:	f04f 0200 	mov.w	r2, #0
 8003c96:	f04f 0300 	mov.w	r3, #0
 8003c9a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003c9e:	4629      	mov	r1, r5
 8003ca0:	024b      	lsls	r3, r1, #9
 8003ca2:	4621      	mov	r1, r4
 8003ca4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003ca8:	4621      	mov	r1, r4
 8003caa:	024a      	lsls	r2, r1, #9
 8003cac:	4610      	mov	r0, r2
 8003cae:	4619      	mov	r1, r3
 8003cb0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003cb2:	2200      	movs	r2, #0
 8003cb4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003cb6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003cb8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003cbc:	f7fc fa84 	bl	80001c8 <__aeabi_uldivmod>
 8003cc0:	4602      	mov	r2, r0
 8003cc2:	460b      	mov	r3, r1
 8003cc4:	4613      	mov	r3, r2
 8003cc6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003cc8:	e058      	b.n	8003d7c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003cca:	4b38      	ldr	r3, [pc, #224]	@ (8003dac <HAL_RCC_GetSysClockFreq+0x200>)
 8003ccc:	685b      	ldr	r3, [r3, #4]
 8003cce:	099b      	lsrs	r3, r3, #6
 8003cd0:	2200      	movs	r2, #0
 8003cd2:	4618      	mov	r0, r3
 8003cd4:	4611      	mov	r1, r2
 8003cd6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003cda:	623b      	str	r3, [r7, #32]
 8003cdc:	2300      	movs	r3, #0
 8003cde:	627b      	str	r3, [r7, #36]	@ 0x24
 8003ce0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003ce4:	4642      	mov	r2, r8
 8003ce6:	464b      	mov	r3, r9
 8003ce8:	f04f 0000 	mov.w	r0, #0
 8003cec:	f04f 0100 	mov.w	r1, #0
 8003cf0:	0159      	lsls	r1, r3, #5
 8003cf2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003cf6:	0150      	lsls	r0, r2, #5
 8003cf8:	4602      	mov	r2, r0
 8003cfa:	460b      	mov	r3, r1
 8003cfc:	4641      	mov	r1, r8
 8003cfe:	ebb2 0a01 	subs.w	sl, r2, r1
 8003d02:	4649      	mov	r1, r9
 8003d04:	eb63 0b01 	sbc.w	fp, r3, r1
 8003d08:	f04f 0200 	mov.w	r2, #0
 8003d0c:	f04f 0300 	mov.w	r3, #0
 8003d10:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003d14:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003d18:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003d1c:	ebb2 040a 	subs.w	r4, r2, sl
 8003d20:	eb63 050b 	sbc.w	r5, r3, fp
 8003d24:	f04f 0200 	mov.w	r2, #0
 8003d28:	f04f 0300 	mov.w	r3, #0
 8003d2c:	00eb      	lsls	r3, r5, #3
 8003d2e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003d32:	00e2      	lsls	r2, r4, #3
 8003d34:	4614      	mov	r4, r2
 8003d36:	461d      	mov	r5, r3
 8003d38:	4643      	mov	r3, r8
 8003d3a:	18e3      	adds	r3, r4, r3
 8003d3c:	603b      	str	r3, [r7, #0]
 8003d3e:	464b      	mov	r3, r9
 8003d40:	eb45 0303 	adc.w	r3, r5, r3
 8003d44:	607b      	str	r3, [r7, #4]
 8003d46:	f04f 0200 	mov.w	r2, #0
 8003d4a:	f04f 0300 	mov.w	r3, #0
 8003d4e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003d52:	4629      	mov	r1, r5
 8003d54:	028b      	lsls	r3, r1, #10
 8003d56:	4621      	mov	r1, r4
 8003d58:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003d5c:	4621      	mov	r1, r4
 8003d5e:	028a      	lsls	r2, r1, #10
 8003d60:	4610      	mov	r0, r2
 8003d62:	4619      	mov	r1, r3
 8003d64:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003d66:	2200      	movs	r2, #0
 8003d68:	61bb      	str	r3, [r7, #24]
 8003d6a:	61fa      	str	r2, [r7, #28]
 8003d6c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003d70:	f7fc fa2a 	bl	80001c8 <__aeabi_uldivmod>
 8003d74:	4602      	mov	r2, r0
 8003d76:	460b      	mov	r3, r1
 8003d78:	4613      	mov	r3, r2
 8003d7a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003d7c:	4b0b      	ldr	r3, [pc, #44]	@ (8003dac <HAL_RCC_GetSysClockFreq+0x200>)
 8003d7e:	685b      	ldr	r3, [r3, #4]
 8003d80:	0c1b      	lsrs	r3, r3, #16
 8003d82:	f003 0303 	and.w	r3, r3, #3
 8003d86:	3301      	adds	r3, #1
 8003d88:	005b      	lsls	r3, r3, #1
 8003d8a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8003d8c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003d8e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003d90:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d94:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003d96:	e002      	b.n	8003d9e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003d98:	4b05      	ldr	r3, [pc, #20]	@ (8003db0 <HAL_RCC_GetSysClockFreq+0x204>)
 8003d9a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003d9c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003d9e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003da0:	4618      	mov	r0, r3
 8003da2:	3750      	adds	r7, #80	@ 0x50
 8003da4:	46bd      	mov	sp, r7
 8003da6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003daa:	bf00      	nop
 8003dac:	40023800 	.word	0x40023800
 8003db0:	00f42400 	.word	0x00f42400
 8003db4:	007a1200 	.word	0x007a1200

08003db8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003db8:	b480      	push	{r7}
 8003dba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003dbc:	4b03      	ldr	r3, [pc, #12]	@ (8003dcc <HAL_RCC_GetHCLKFreq+0x14>)
 8003dbe:	681b      	ldr	r3, [r3, #0]
}
 8003dc0:	4618      	mov	r0, r3
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc8:	4770      	bx	lr
 8003dca:	bf00      	nop
 8003dcc:	20000008 	.word	0x20000008

08003dd0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003dd0:	b580      	push	{r7, lr}
 8003dd2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003dd4:	f7ff fff0 	bl	8003db8 <HAL_RCC_GetHCLKFreq>
 8003dd8:	4602      	mov	r2, r0
 8003dda:	4b05      	ldr	r3, [pc, #20]	@ (8003df0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003ddc:	689b      	ldr	r3, [r3, #8]
 8003dde:	0a9b      	lsrs	r3, r3, #10
 8003de0:	f003 0307 	and.w	r3, r3, #7
 8003de4:	4903      	ldr	r1, [pc, #12]	@ (8003df4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003de6:	5ccb      	ldrb	r3, [r1, r3]
 8003de8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003dec:	4618      	mov	r0, r3
 8003dee:	bd80      	pop	{r7, pc}
 8003df0:	40023800 	.word	0x40023800
 8003df4:	08009bfc 	.word	0x08009bfc

08003df8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003df8:	b580      	push	{r7, lr}
 8003dfa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003dfc:	f7ff ffdc 	bl	8003db8 <HAL_RCC_GetHCLKFreq>
 8003e00:	4602      	mov	r2, r0
 8003e02:	4b05      	ldr	r3, [pc, #20]	@ (8003e18 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003e04:	689b      	ldr	r3, [r3, #8]
 8003e06:	0b5b      	lsrs	r3, r3, #13
 8003e08:	f003 0307 	and.w	r3, r3, #7
 8003e0c:	4903      	ldr	r1, [pc, #12]	@ (8003e1c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003e0e:	5ccb      	ldrb	r3, [r1, r3]
 8003e10:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003e14:	4618      	mov	r0, r3
 8003e16:	bd80      	pop	{r7, pc}
 8003e18:	40023800 	.word	0x40023800
 8003e1c:	08009bfc 	.word	0x08009bfc

08003e20 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003e20:	b580      	push	{r7, lr}
 8003e22:	b082      	sub	sp, #8
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d101      	bne.n	8003e32 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003e2e:	2301      	movs	r3, #1
 8003e30:	e07b      	b.n	8003f2a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d108      	bne.n	8003e4c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	685b      	ldr	r3, [r3, #4]
 8003e3e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003e42:	d009      	beq.n	8003e58 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	2200      	movs	r2, #0
 8003e48:	61da      	str	r2, [r3, #28]
 8003e4a:	e005      	b.n	8003e58 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	2200      	movs	r2, #0
 8003e50:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	2200      	movs	r2, #0
 8003e56:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	2200      	movs	r2, #0
 8003e5c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003e64:	b2db      	uxtb	r3, r3
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d106      	bne.n	8003e78 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	2200      	movs	r2, #0
 8003e6e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003e72:	6878      	ldr	r0, [r7, #4]
 8003e74:	f7fd fce8 	bl	8001848 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	2202      	movs	r2, #2
 8003e7c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	681a      	ldr	r2, [r3, #0]
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003e8e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	685b      	ldr	r3, [r3, #4]
 8003e94:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	689b      	ldr	r3, [r3, #8]
 8003e9c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003ea0:	431a      	orrs	r2, r3
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	68db      	ldr	r3, [r3, #12]
 8003ea6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003eaa:	431a      	orrs	r2, r3
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	691b      	ldr	r3, [r3, #16]
 8003eb0:	f003 0302 	and.w	r3, r3, #2
 8003eb4:	431a      	orrs	r2, r3
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	695b      	ldr	r3, [r3, #20]
 8003eba:	f003 0301 	and.w	r3, r3, #1
 8003ebe:	431a      	orrs	r2, r3
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	699b      	ldr	r3, [r3, #24]
 8003ec4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003ec8:	431a      	orrs	r2, r3
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	69db      	ldr	r3, [r3, #28]
 8003ece:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003ed2:	431a      	orrs	r2, r3
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	6a1b      	ldr	r3, [r3, #32]
 8003ed8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003edc:	ea42 0103 	orr.w	r1, r2, r3
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ee4:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	430a      	orrs	r2, r1
 8003eee:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	699b      	ldr	r3, [r3, #24]
 8003ef4:	0c1b      	lsrs	r3, r3, #16
 8003ef6:	f003 0104 	and.w	r1, r3, #4
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003efe:	f003 0210 	and.w	r2, r3, #16
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	430a      	orrs	r2, r1
 8003f08:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	69da      	ldr	r2, [r3, #28]
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003f18:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	2200      	movs	r2, #0
 8003f1e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	2201      	movs	r2, #1
 8003f24:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8003f28:	2300      	movs	r3, #0
}
 8003f2a:	4618      	mov	r0, r3
 8003f2c:	3708      	adds	r7, #8
 8003f2e:	46bd      	mov	sp, r7
 8003f30:	bd80      	pop	{r7, pc}

08003f32 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003f32:	b580      	push	{r7, lr}
 8003f34:	b088      	sub	sp, #32
 8003f36:	af00      	add	r7, sp, #0
 8003f38:	60f8      	str	r0, [r7, #12]
 8003f3a:	60b9      	str	r1, [r7, #8]
 8003f3c:	603b      	str	r3, [r7, #0]
 8003f3e:	4613      	mov	r3, r2
 8003f40:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003f42:	2300      	movs	r3, #0
 8003f44:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003f4c:	2b01      	cmp	r3, #1
 8003f4e:	d101      	bne.n	8003f54 <HAL_SPI_Transmit+0x22>
 8003f50:	2302      	movs	r3, #2
 8003f52:	e126      	b.n	80041a2 <HAL_SPI_Transmit+0x270>
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	2201      	movs	r2, #1
 8003f58:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003f5c:	f7fe f894 	bl	8002088 <HAL_GetTick>
 8003f60:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003f62:	88fb      	ldrh	r3, [r7, #6]
 8003f64:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003f6c:	b2db      	uxtb	r3, r3
 8003f6e:	2b01      	cmp	r3, #1
 8003f70:	d002      	beq.n	8003f78 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003f72:	2302      	movs	r3, #2
 8003f74:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003f76:	e10b      	b.n	8004190 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8003f78:	68bb      	ldr	r3, [r7, #8]
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d002      	beq.n	8003f84 <HAL_SPI_Transmit+0x52>
 8003f7e:	88fb      	ldrh	r3, [r7, #6]
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d102      	bne.n	8003f8a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003f84:	2301      	movs	r3, #1
 8003f86:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003f88:	e102      	b.n	8004190 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	2203      	movs	r2, #3
 8003f8e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	2200      	movs	r2, #0
 8003f96:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	68ba      	ldr	r2, [r7, #8]
 8003f9c:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	88fa      	ldrh	r2, [r7, #6]
 8003fa2:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	88fa      	ldrh	r2, [r7, #6]
 8003fa8:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	2200      	movs	r2, #0
 8003fae:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	2200      	movs	r2, #0
 8003fb4:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	2200      	movs	r2, #0
 8003fba:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	2200      	movs	r2, #0
 8003fc0:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	2200      	movs	r2, #0
 8003fc6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	689b      	ldr	r3, [r3, #8]
 8003fcc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003fd0:	d10f      	bne.n	8003ff2 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	681a      	ldr	r2, [r3, #0]
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003fe0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	681a      	ldr	r2, [r3, #0]
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003ff0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ffc:	2b40      	cmp	r3, #64	@ 0x40
 8003ffe:	d007      	beq.n	8004010 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	681a      	ldr	r2, [r3, #0]
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800400e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	68db      	ldr	r3, [r3, #12]
 8004014:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004018:	d14b      	bne.n	80040b2 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	685b      	ldr	r3, [r3, #4]
 800401e:	2b00      	cmp	r3, #0
 8004020:	d002      	beq.n	8004028 <HAL_SPI_Transmit+0xf6>
 8004022:	8afb      	ldrh	r3, [r7, #22]
 8004024:	2b01      	cmp	r3, #1
 8004026:	d13e      	bne.n	80040a6 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800402c:	881a      	ldrh	r2, [r3, #0]
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004038:	1c9a      	adds	r2, r3, #2
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004042:	b29b      	uxth	r3, r3
 8004044:	3b01      	subs	r3, #1
 8004046:	b29a      	uxth	r2, r3
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800404c:	e02b      	b.n	80040a6 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	689b      	ldr	r3, [r3, #8]
 8004054:	f003 0302 	and.w	r3, r3, #2
 8004058:	2b02      	cmp	r3, #2
 800405a:	d112      	bne.n	8004082 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004060:	881a      	ldrh	r2, [r3, #0]
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800406c:	1c9a      	adds	r2, r3, #2
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004076:	b29b      	uxth	r3, r3
 8004078:	3b01      	subs	r3, #1
 800407a:	b29a      	uxth	r2, r3
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	86da      	strh	r2, [r3, #54]	@ 0x36
 8004080:	e011      	b.n	80040a6 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004082:	f7fe f801 	bl	8002088 <HAL_GetTick>
 8004086:	4602      	mov	r2, r0
 8004088:	69bb      	ldr	r3, [r7, #24]
 800408a:	1ad3      	subs	r3, r2, r3
 800408c:	683a      	ldr	r2, [r7, #0]
 800408e:	429a      	cmp	r2, r3
 8004090:	d803      	bhi.n	800409a <HAL_SPI_Transmit+0x168>
 8004092:	683b      	ldr	r3, [r7, #0]
 8004094:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004098:	d102      	bne.n	80040a0 <HAL_SPI_Transmit+0x16e>
 800409a:	683b      	ldr	r3, [r7, #0]
 800409c:	2b00      	cmp	r3, #0
 800409e:	d102      	bne.n	80040a6 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80040a0:	2303      	movs	r3, #3
 80040a2:	77fb      	strb	r3, [r7, #31]
          goto error;
 80040a4:	e074      	b.n	8004190 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80040aa:	b29b      	uxth	r3, r3
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d1ce      	bne.n	800404e <HAL_SPI_Transmit+0x11c>
 80040b0:	e04c      	b.n	800414c <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	685b      	ldr	r3, [r3, #4]
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d002      	beq.n	80040c0 <HAL_SPI_Transmit+0x18e>
 80040ba:	8afb      	ldrh	r3, [r7, #22]
 80040bc:	2b01      	cmp	r3, #1
 80040be:	d140      	bne.n	8004142 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	330c      	adds	r3, #12
 80040ca:	7812      	ldrb	r2, [r2, #0]
 80040cc:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040d2:	1c5a      	adds	r2, r3, #1
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80040dc:	b29b      	uxth	r3, r3
 80040de:	3b01      	subs	r3, #1
 80040e0:	b29a      	uxth	r2, r3
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 80040e6:	e02c      	b.n	8004142 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	689b      	ldr	r3, [r3, #8]
 80040ee:	f003 0302 	and.w	r3, r3, #2
 80040f2:	2b02      	cmp	r3, #2
 80040f4:	d113      	bne.n	800411e <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	330c      	adds	r3, #12
 8004100:	7812      	ldrb	r2, [r2, #0]
 8004102:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004108:	1c5a      	adds	r2, r3, #1
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004112:	b29b      	uxth	r3, r3
 8004114:	3b01      	subs	r3, #1
 8004116:	b29a      	uxth	r2, r3
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	86da      	strh	r2, [r3, #54]	@ 0x36
 800411c:	e011      	b.n	8004142 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800411e:	f7fd ffb3 	bl	8002088 <HAL_GetTick>
 8004122:	4602      	mov	r2, r0
 8004124:	69bb      	ldr	r3, [r7, #24]
 8004126:	1ad3      	subs	r3, r2, r3
 8004128:	683a      	ldr	r2, [r7, #0]
 800412a:	429a      	cmp	r2, r3
 800412c:	d803      	bhi.n	8004136 <HAL_SPI_Transmit+0x204>
 800412e:	683b      	ldr	r3, [r7, #0]
 8004130:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004134:	d102      	bne.n	800413c <HAL_SPI_Transmit+0x20a>
 8004136:	683b      	ldr	r3, [r7, #0]
 8004138:	2b00      	cmp	r3, #0
 800413a:	d102      	bne.n	8004142 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800413c:	2303      	movs	r3, #3
 800413e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004140:	e026      	b.n	8004190 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004146:	b29b      	uxth	r3, r3
 8004148:	2b00      	cmp	r3, #0
 800414a:	d1cd      	bne.n	80040e8 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800414c:	69ba      	ldr	r2, [r7, #24]
 800414e:	6839      	ldr	r1, [r7, #0]
 8004150:	68f8      	ldr	r0, [r7, #12]
 8004152:	f000 fbcb 	bl	80048ec <SPI_EndRxTxTransaction>
 8004156:	4603      	mov	r3, r0
 8004158:	2b00      	cmp	r3, #0
 800415a:	d002      	beq.n	8004162 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	2220      	movs	r2, #32
 8004160:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	689b      	ldr	r3, [r3, #8]
 8004166:	2b00      	cmp	r3, #0
 8004168:	d10a      	bne.n	8004180 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800416a:	2300      	movs	r3, #0
 800416c:	613b      	str	r3, [r7, #16]
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	68db      	ldr	r3, [r3, #12]
 8004174:	613b      	str	r3, [r7, #16]
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	689b      	ldr	r3, [r3, #8]
 800417c:	613b      	str	r3, [r7, #16]
 800417e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004184:	2b00      	cmp	r3, #0
 8004186:	d002      	beq.n	800418e <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8004188:	2301      	movs	r3, #1
 800418a:	77fb      	strb	r3, [r7, #31]
 800418c:	e000      	b.n	8004190 <HAL_SPI_Transmit+0x25e>
  }

error:
 800418e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	2201      	movs	r2, #1
 8004194:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	2200      	movs	r2, #0
 800419c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 80041a0:	7ffb      	ldrb	r3, [r7, #31]
}
 80041a2:	4618      	mov	r0, r3
 80041a4:	3720      	adds	r7, #32
 80041a6:	46bd      	mov	sp, r7
 80041a8:	bd80      	pop	{r7, pc}

080041aa <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80041aa:	b580      	push	{r7, lr}
 80041ac:	b088      	sub	sp, #32
 80041ae:	af02      	add	r7, sp, #8
 80041b0:	60f8      	str	r0, [r7, #12]
 80041b2:	60b9      	str	r1, [r7, #8]
 80041b4:	603b      	str	r3, [r7, #0]
 80041b6:	4613      	mov	r3, r2
 80041b8:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80041ba:	2300      	movs	r3, #0
 80041bc:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	685b      	ldr	r3, [r3, #4]
 80041c2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80041c6:	d112      	bne.n	80041ee <HAL_SPI_Receive+0x44>
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	689b      	ldr	r3, [r3, #8]
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d10e      	bne.n	80041ee <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	2204      	movs	r2, #4
 80041d4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80041d8:	88fa      	ldrh	r2, [r7, #6]
 80041da:	683b      	ldr	r3, [r7, #0]
 80041dc:	9300      	str	r3, [sp, #0]
 80041de:	4613      	mov	r3, r2
 80041e0:	68ba      	ldr	r2, [r7, #8]
 80041e2:	68b9      	ldr	r1, [r7, #8]
 80041e4:	68f8      	ldr	r0, [r7, #12]
 80041e6:	f000 f8f1 	bl	80043cc <HAL_SPI_TransmitReceive>
 80041ea:	4603      	mov	r3, r0
 80041ec:	e0ea      	b.n	80043c4 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80041f4:	2b01      	cmp	r3, #1
 80041f6:	d101      	bne.n	80041fc <HAL_SPI_Receive+0x52>
 80041f8:	2302      	movs	r3, #2
 80041fa:	e0e3      	b.n	80043c4 <HAL_SPI_Receive+0x21a>
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	2201      	movs	r2, #1
 8004200:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004204:	f7fd ff40 	bl	8002088 <HAL_GetTick>
 8004208:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004210:	b2db      	uxtb	r3, r3
 8004212:	2b01      	cmp	r3, #1
 8004214:	d002      	beq.n	800421c <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8004216:	2302      	movs	r3, #2
 8004218:	75fb      	strb	r3, [r7, #23]
    goto error;
 800421a:	e0ca      	b.n	80043b2 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 800421c:	68bb      	ldr	r3, [r7, #8]
 800421e:	2b00      	cmp	r3, #0
 8004220:	d002      	beq.n	8004228 <HAL_SPI_Receive+0x7e>
 8004222:	88fb      	ldrh	r3, [r7, #6]
 8004224:	2b00      	cmp	r3, #0
 8004226:	d102      	bne.n	800422e <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8004228:	2301      	movs	r3, #1
 800422a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800422c:	e0c1      	b.n	80043b2 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	2204      	movs	r2, #4
 8004232:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	2200      	movs	r2, #0
 800423a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	68ba      	ldr	r2, [r7, #8]
 8004240:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	88fa      	ldrh	r2, [r7, #6]
 8004246:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	88fa      	ldrh	r2, [r7, #6]
 800424c:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	2200      	movs	r2, #0
 8004252:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	2200      	movs	r2, #0
 8004258:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	2200      	movs	r2, #0
 800425e:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	2200      	movs	r2, #0
 8004264:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	2200      	movs	r2, #0
 800426a:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	689b      	ldr	r3, [r3, #8]
 8004270:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004274:	d10f      	bne.n	8004296 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	681a      	ldr	r2, [r3, #0]
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004284:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	681a      	ldr	r2, [r3, #0]
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8004294:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80042a0:	2b40      	cmp	r3, #64	@ 0x40
 80042a2:	d007      	beq.n	80042b4 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	681a      	ldr	r2, [r3, #0]
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80042b2:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	68db      	ldr	r3, [r3, #12]
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d162      	bne.n	8004382 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80042bc:	e02e      	b.n	800431c <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	689b      	ldr	r3, [r3, #8]
 80042c4:	f003 0301 	and.w	r3, r3, #1
 80042c8:	2b01      	cmp	r3, #1
 80042ca:	d115      	bne.n	80042f8 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f103 020c 	add.w	r2, r3, #12
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80042d8:	7812      	ldrb	r2, [r2, #0]
 80042da:	b2d2      	uxtb	r2, r2
 80042dc:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80042e2:	1c5a      	adds	r2, r3, #1
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80042ec:	b29b      	uxth	r3, r3
 80042ee:	3b01      	subs	r3, #1
 80042f0:	b29a      	uxth	r2, r3
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80042f6:	e011      	b.n	800431c <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80042f8:	f7fd fec6 	bl	8002088 <HAL_GetTick>
 80042fc:	4602      	mov	r2, r0
 80042fe:	693b      	ldr	r3, [r7, #16]
 8004300:	1ad3      	subs	r3, r2, r3
 8004302:	683a      	ldr	r2, [r7, #0]
 8004304:	429a      	cmp	r2, r3
 8004306:	d803      	bhi.n	8004310 <HAL_SPI_Receive+0x166>
 8004308:	683b      	ldr	r3, [r7, #0]
 800430a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800430e:	d102      	bne.n	8004316 <HAL_SPI_Receive+0x16c>
 8004310:	683b      	ldr	r3, [r7, #0]
 8004312:	2b00      	cmp	r3, #0
 8004314:	d102      	bne.n	800431c <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8004316:	2303      	movs	r3, #3
 8004318:	75fb      	strb	r3, [r7, #23]
          goto error;
 800431a:	e04a      	b.n	80043b2 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004320:	b29b      	uxth	r3, r3
 8004322:	2b00      	cmp	r3, #0
 8004324:	d1cb      	bne.n	80042be <HAL_SPI_Receive+0x114>
 8004326:	e031      	b.n	800438c <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	689b      	ldr	r3, [r3, #8]
 800432e:	f003 0301 	and.w	r3, r3, #1
 8004332:	2b01      	cmp	r3, #1
 8004334:	d113      	bne.n	800435e <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	68da      	ldr	r2, [r3, #12]
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004340:	b292      	uxth	r2, r2
 8004342:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004348:	1c9a      	adds	r2, r3, #2
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004352:	b29b      	uxth	r3, r3
 8004354:	3b01      	subs	r3, #1
 8004356:	b29a      	uxth	r2, r3
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800435c:	e011      	b.n	8004382 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800435e:	f7fd fe93 	bl	8002088 <HAL_GetTick>
 8004362:	4602      	mov	r2, r0
 8004364:	693b      	ldr	r3, [r7, #16]
 8004366:	1ad3      	subs	r3, r2, r3
 8004368:	683a      	ldr	r2, [r7, #0]
 800436a:	429a      	cmp	r2, r3
 800436c:	d803      	bhi.n	8004376 <HAL_SPI_Receive+0x1cc>
 800436e:	683b      	ldr	r3, [r7, #0]
 8004370:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004374:	d102      	bne.n	800437c <HAL_SPI_Receive+0x1d2>
 8004376:	683b      	ldr	r3, [r7, #0]
 8004378:	2b00      	cmp	r3, #0
 800437a:	d102      	bne.n	8004382 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 800437c:	2303      	movs	r3, #3
 800437e:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004380:	e017      	b.n	80043b2 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004386:	b29b      	uxth	r3, r3
 8004388:	2b00      	cmp	r3, #0
 800438a:	d1cd      	bne.n	8004328 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800438c:	693a      	ldr	r2, [r7, #16]
 800438e:	6839      	ldr	r1, [r7, #0]
 8004390:	68f8      	ldr	r0, [r7, #12]
 8004392:	f000 fa45 	bl	8004820 <SPI_EndRxTransaction>
 8004396:	4603      	mov	r3, r0
 8004398:	2b00      	cmp	r3, #0
 800439a:	d002      	beq.n	80043a2 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	2220      	movs	r2, #32
 80043a0:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d002      	beq.n	80043b0 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 80043aa:	2301      	movs	r3, #1
 80043ac:	75fb      	strb	r3, [r7, #23]
 80043ae:	e000      	b.n	80043b2 <HAL_SPI_Receive+0x208>
  }

error :
 80043b0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	2201      	movs	r2, #1
 80043b6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  __HAL_UNLOCK(hspi);
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	2200      	movs	r2, #0
 80043be:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 80043c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80043c4:	4618      	mov	r0, r3
 80043c6:	3718      	adds	r7, #24
 80043c8:	46bd      	mov	sp, r7
 80043ca:	bd80      	pop	{r7, pc}

080043cc <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80043cc:	b580      	push	{r7, lr}
 80043ce:	b08c      	sub	sp, #48	@ 0x30
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	60f8      	str	r0, [r7, #12]
 80043d4:	60b9      	str	r1, [r7, #8]
 80043d6:	607a      	str	r2, [r7, #4]
 80043d8:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80043da:	2301      	movs	r3, #1
 80043dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80043de:	2300      	movs	r3, #0
 80043e0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80043ea:	2b01      	cmp	r3, #1
 80043ec:	d101      	bne.n	80043f2 <HAL_SPI_TransmitReceive+0x26>
 80043ee:	2302      	movs	r3, #2
 80043f0:	e18a      	b.n	8004708 <HAL_SPI_TransmitReceive+0x33c>
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	2201      	movs	r2, #1
 80043f6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80043fa:	f7fd fe45 	bl	8002088 <HAL_GetTick>
 80043fe:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004406:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  tmp_mode            = hspi->Init.Mode;
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	685b      	ldr	r3, [r3, #4]
 800440e:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8004410:	887b      	ldrh	r3, [r7, #2]
 8004412:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004414:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004418:	2b01      	cmp	r3, #1
 800441a:	d00f      	beq.n	800443c <HAL_SPI_TransmitReceive+0x70>
 800441c:	69fb      	ldr	r3, [r7, #28]
 800441e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004422:	d107      	bne.n	8004434 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	689b      	ldr	r3, [r3, #8]
 8004428:	2b00      	cmp	r3, #0
 800442a:	d103      	bne.n	8004434 <HAL_SPI_TransmitReceive+0x68>
 800442c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004430:	2b04      	cmp	r3, #4
 8004432:	d003      	beq.n	800443c <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8004434:	2302      	movs	r3, #2
 8004436:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 800443a:	e15b      	b.n	80046f4 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800443c:	68bb      	ldr	r3, [r7, #8]
 800443e:	2b00      	cmp	r3, #0
 8004440:	d005      	beq.n	800444e <HAL_SPI_TransmitReceive+0x82>
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	2b00      	cmp	r3, #0
 8004446:	d002      	beq.n	800444e <HAL_SPI_TransmitReceive+0x82>
 8004448:	887b      	ldrh	r3, [r7, #2]
 800444a:	2b00      	cmp	r3, #0
 800444c:	d103      	bne.n	8004456 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800444e:	2301      	movs	r3, #1
 8004450:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8004454:	e14e      	b.n	80046f4 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800445c:	b2db      	uxtb	r3, r3
 800445e:	2b04      	cmp	r3, #4
 8004460:	d003      	beq.n	800446a <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	2205      	movs	r2, #5
 8004466:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	2200      	movs	r2, #0
 800446e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	687a      	ldr	r2, [r7, #4]
 8004474:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	887a      	ldrh	r2, [r7, #2]
 800447a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	887a      	ldrh	r2, [r7, #2]
 8004480:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	68ba      	ldr	r2, [r7, #8]
 8004486:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	887a      	ldrh	r2, [r7, #2]
 800448c:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	887a      	ldrh	r2, [r7, #2]
 8004492:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	2200      	movs	r2, #0
 8004498:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	2200      	movs	r2, #0
 800449e:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80044aa:	2b40      	cmp	r3, #64	@ 0x40
 80044ac:	d007      	beq.n	80044be <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	681a      	ldr	r2, [r3, #0]
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80044bc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	68db      	ldr	r3, [r3, #12]
 80044c2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80044c6:	d178      	bne.n	80045ba <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	685b      	ldr	r3, [r3, #4]
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d002      	beq.n	80044d6 <HAL_SPI_TransmitReceive+0x10a>
 80044d0:	8b7b      	ldrh	r3, [r7, #26]
 80044d2:	2b01      	cmp	r3, #1
 80044d4:	d166      	bne.n	80045a4 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044da:	881a      	ldrh	r2, [r3, #0]
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044e6:	1c9a      	adds	r2, r3, #2
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80044f0:	b29b      	uxth	r3, r3
 80044f2:	3b01      	subs	r3, #1
 80044f4:	b29a      	uxth	r2, r3
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80044fa:	e053      	b.n	80045a4 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	689b      	ldr	r3, [r3, #8]
 8004502:	f003 0302 	and.w	r3, r3, #2
 8004506:	2b02      	cmp	r3, #2
 8004508:	d11b      	bne.n	8004542 <HAL_SPI_TransmitReceive+0x176>
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800450e:	b29b      	uxth	r3, r3
 8004510:	2b00      	cmp	r3, #0
 8004512:	d016      	beq.n	8004542 <HAL_SPI_TransmitReceive+0x176>
 8004514:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004516:	2b01      	cmp	r3, #1
 8004518:	d113      	bne.n	8004542 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800451e:	881a      	ldrh	r2, [r3, #0]
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800452a:	1c9a      	adds	r2, r3, #2
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004534:	b29b      	uxth	r3, r3
 8004536:	3b01      	subs	r3, #1
 8004538:	b29a      	uxth	r2, r3
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800453e:	2300      	movs	r3, #0
 8004540:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	689b      	ldr	r3, [r3, #8]
 8004548:	f003 0301 	and.w	r3, r3, #1
 800454c:	2b01      	cmp	r3, #1
 800454e:	d119      	bne.n	8004584 <HAL_SPI_TransmitReceive+0x1b8>
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004554:	b29b      	uxth	r3, r3
 8004556:	2b00      	cmp	r3, #0
 8004558:	d014      	beq.n	8004584 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	68da      	ldr	r2, [r3, #12]
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004564:	b292      	uxth	r2, r2
 8004566:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800456c:	1c9a      	adds	r2, r3, #2
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004576:	b29b      	uxth	r3, r3
 8004578:	3b01      	subs	r3, #1
 800457a:	b29a      	uxth	r2, r3
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004580:	2301      	movs	r3, #1
 8004582:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004584:	f7fd fd80 	bl	8002088 <HAL_GetTick>
 8004588:	4602      	mov	r2, r0
 800458a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800458c:	1ad3      	subs	r3, r2, r3
 800458e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004590:	429a      	cmp	r2, r3
 8004592:	d807      	bhi.n	80045a4 <HAL_SPI_TransmitReceive+0x1d8>
 8004594:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004596:	f1b3 3fff 	cmp.w	r3, #4294967295
 800459a:	d003      	beq.n	80045a4 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800459c:	2303      	movs	r3, #3
 800459e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        goto error;
 80045a2:	e0a7      	b.n	80046f4 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80045a8:	b29b      	uxth	r3, r3
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d1a6      	bne.n	80044fc <HAL_SPI_TransmitReceive+0x130>
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80045b2:	b29b      	uxth	r3, r3
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d1a1      	bne.n	80044fc <HAL_SPI_TransmitReceive+0x130>
 80045b8:	e07c      	b.n	80046b4 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	685b      	ldr	r3, [r3, #4]
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d002      	beq.n	80045c8 <HAL_SPI_TransmitReceive+0x1fc>
 80045c2:	8b7b      	ldrh	r3, [r7, #26]
 80045c4:	2b01      	cmp	r3, #1
 80045c6:	d16b      	bne.n	80046a0 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	330c      	adds	r3, #12
 80045d2:	7812      	ldrb	r2, [r2, #0]
 80045d4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045da:	1c5a      	adds	r2, r3, #1
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80045e4:	b29b      	uxth	r3, r3
 80045e6:	3b01      	subs	r3, #1
 80045e8:	b29a      	uxth	r2, r3
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80045ee:	e057      	b.n	80046a0 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	689b      	ldr	r3, [r3, #8]
 80045f6:	f003 0302 	and.w	r3, r3, #2
 80045fa:	2b02      	cmp	r3, #2
 80045fc:	d11c      	bne.n	8004638 <HAL_SPI_TransmitReceive+0x26c>
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004602:	b29b      	uxth	r3, r3
 8004604:	2b00      	cmp	r3, #0
 8004606:	d017      	beq.n	8004638 <HAL_SPI_TransmitReceive+0x26c>
 8004608:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800460a:	2b01      	cmp	r3, #1
 800460c:	d114      	bne.n	8004638 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	330c      	adds	r3, #12
 8004618:	7812      	ldrb	r2, [r2, #0]
 800461a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004620:	1c5a      	adds	r2, r3, #1
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800462a:	b29b      	uxth	r3, r3
 800462c:	3b01      	subs	r3, #1
 800462e:	b29a      	uxth	r2, r3
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004634:	2300      	movs	r3, #0
 8004636:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	689b      	ldr	r3, [r3, #8]
 800463e:	f003 0301 	and.w	r3, r3, #1
 8004642:	2b01      	cmp	r3, #1
 8004644:	d119      	bne.n	800467a <HAL_SPI_TransmitReceive+0x2ae>
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800464a:	b29b      	uxth	r3, r3
 800464c:	2b00      	cmp	r3, #0
 800464e:	d014      	beq.n	800467a <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	68da      	ldr	r2, [r3, #12]
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800465a:	b2d2      	uxtb	r2, r2
 800465c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004662:	1c5a      	adds	r2, r3, #1
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800466c:	b29b      	uxth	r3, r3
 800466e:	3b01      	subs	r3, #1
 8004670:	b29a      	uxth	r2, r3
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004676:	2301      	movs	r3, #1
 8004678:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800467a:	f7fd fd05 	bl	8002088 <HAL_GetTick>
 800467e:	4602      	mov	r2, r0
 8004680:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004682:	1ad3      	subs	r3, r2, r3
 8004684:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004686:	429a      	cmp	r2, r3
 8004688:	d803      	bhi.n	8004692 <HAL_SPI_TransmitReceive+0x2c6>
 800468a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800468c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004690:	d102      	bne.n	8004698 <HAL_SPI_TransmitReceive+0x2cc>
 8004692:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004694:	2b00      	cmp	r3, #0
 8004696:	d103      	bne.n	80046a0 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8004698:	2303      	movs	r3, #3
 800469a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        goto error;
 800469e:	e029      	b.n	80046f4 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80046a4:	b29b      	uxth	r3, r3
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d1a2      	bne.n	80045f0 <HAL_SPI_TransmitReceive+0x224>
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80046ae:	b29b      	uxth	r3, r3
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d19d      	bne.n	80045f0 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80046b4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80046b6:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80046b8:	68f8      	ldr	r0, [r7, #12]
 80046ba:	f000 f917 	bl	80048ec <SPI_EndRxTxTransaction>
 80046be:	4603      	mov	r3, r0
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d006      	beq.n	80046d2 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80046c4:	2301      	movs	r3, #1
 80046c6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	2220      	movs	r2, #32
 80046ce:	655a      	str	r2, [r3, #84]	@ 0x54
    goto error;
 80046d0:	e010      	b.n	80046f4 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	689b      	ldr	r3, [r3, #8]
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d10b      	bne.n	80046f2 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80046da:	2300      	movs	r3, #0
 80046dc:	617b      	str	r3, [r7, #20]
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	68db      	ldr	r3, [r3, #12]
 80046e4:	617b      	str	r3, [r7, #20]
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	689b      	ldr	r3, [r3, #8]
 80046ec:	617b      	str	r3, [r7, #20]
 80046ee:	697b      	ldr	r3, [r7, #20]
 80046f0:	e000      	b.n	80046f4 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80046f2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	2201      	movs	r2, #1
 80046f8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  __HAL_UNLOCK(hspi);
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	2200      	movs	r2, #0
 8004700:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8004704:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 8004708:	4618      	mov	r0, r3
 800470a:	3730      	adds	r7, #48	@ 0x30
 800470c:	46bd      	mov	sp, r7
 800470e:	bd80      	pop	{r7, pc}

08004710 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004710:	b580      	push	{r7, lr}
 8004712:	b088      	sub	sp, #32
 8004714:	af00      	add	r7, sp, #0
 8004716:	60f8      	str	r0, [r7, #12]
 8004718:	60b9      	str	r1, [r7, #8]
 800471a:	603b      	str	r3, [r7, #0]
 800471c:	4613      	mov	r3, r2
 800471e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004720:	f7fd fcb2 	bl	8002088 <HAL_GetTick>
 8004724:	4602      	mov	r2, r0
 8004726:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004728:	1a9b      	subs	r3, r3, r2
 800472a:	683a      	ldr	r2, [r7, #0]
 800472c:	4413      	add	r3, r2
 800472e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004730:	f7fd fcaa 	bl	8002088 <HAL_GetTick>
 8004734:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004736:	4b39      	ldr	r3, [pc, #228]	@ (800481c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	015b      	lsls	r3, r3, #5
 800473c:	0d1b      	lsrs	r3, r3, #20
 800473e:	69fa      	ldr	r2, [r7, #28]
 8004740:	fb02 f303 	mul.w	r3, r2, r3
 8004744:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004746:	e054      	b.n	80047f2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004748:	683b      	ldr	r3, [r7, #0]
 800474a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800474e:	d050      	beq.n	80047f2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004750:	f7fd fc9a 	bl	8002088 <HAL_GetTick>
 8004754:	4602      	mov	r2, r0
 8004756:	69bb      	ldr	r3, [r7, #24]
 8004758:	1ad3      	subs	r3, r2, r3
 800475a:	69fa      	ldr	r2, [r7, #28]
 800475c:	429a      	cmp	r2, r3
 800475e:	d902      	bls.n	8004766 <SPI_WaitFlagStateUntilTimeout+0x56>
 8004760:	69fb      	ldr	r3, [r7, #28]
 8004762:	2b00      	cmp	r3, #0
 8004764:	d13d      	bne.n	80047e2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	685a      	ldr	r2, [r3, #4]
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004774:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	685b      	ldr	r3, [r3, #4]
 800477a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800477e:	d111      	bne.n	80047a4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	689b      	ldr	r3, [r3, #8]
 8004784:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004788:	d004      	beq.n	8004794 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	689b      	ldr	r3, [r3, #8]
 800478e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004792:	d107      	bne.n	80047a4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	681a      	ldr	r2, [r3, #0]
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80047a2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047a8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80047ac:	d10f      	bne.n	80047ce <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	681a      	ldr	r2, [r3, #0]
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80047bc:	601a      	str	r2, [r3, #0]
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	681a      	ldr	r2, [r3, #0]
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80047cc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	2201      	movs	r2, #1
 80047d2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	2200      	movs	r2, #0
 80047da:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 80047de:	2303      	movs	r3, #3
 80047e0:	e017      	b.n	8004812 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80047e2:	697b      	ldr	r3, [r7, #20]
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d101      	bne.n	80047ec <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80047e8:	2300      	movs	r3, #0
 80047ea:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80047ec:	697b      	ldr	r3, [r7, #20]
 80047ee:	3b01      	subs	r3, #1
 80047f0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	689a      	ldr	r2, [r3, #8]
 80047f8:	68bb      	ldr	r3, [r7, #8]
 80047fa:	4013      	ands	r3, r2
 80047fc:	68ba      	ldr	r2, [r7, #8]
 80047fe:	429a      	cmp	r2, r3
 8004800:	bf0c      	ite	eq
 8004802:	2301      	moveq	r3, #1
 8004804:	2300      	movne	r3, #0
 8004806:	b2db      	uxtb	r3, r3
 8004808:	461a      	mov	r2, r3
 800480a:	79fb      	ldrb	r3, [r7, #7]
 800480c:	429a      	cmp	r2, r3
 800480e:	d19b      	bne.n	8004748 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004810:	2300      	movs	r3, #0
}
 8004812:	4618      	mov	r0, r3
 8004814:	3720      	adds	r7, #32
 8004816:	46bd      	mov	sp, r7
 8004818:	bd80      	pop	{r7, pc}
 800481a:	bf00      	nop
 800481c:	20000008 	.word	0x20000008

08004820 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004820:	b580      	push	{r7, lr}
 8004822:	b086      	sub	sp, #24
 8004824:	af02      	add	r7, sp, #8
 8004826:	60f8      	str	r0, [r7, #12]
 8004828:	60b9      	str	r1, [r7, #8]
 800482a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	685b      	ldr	r3, [r3, #4]
 8004830:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004834:	d111      	bne.n	800485a <SPI_EndRxTransaction+0x3a>
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	689b      	ldr	r3, [r3, #8]
 800483a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800483e:	d004      	beq.n	800484a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	689b      	ldr	r3, [r3, #8]
 8004844:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004848:	d107      	bne.n	800485a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	681a      	ldr	r2, [r3, #0]
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004858:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	685b      	ldr	r3, [r3, #4]
 800485e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004862:	d12a      	bne.n	80048ba <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	689b      	ldr	r3, [r3, #8]
 8004868:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800486c:	d012      	beq.n	8004894 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	9300      	str	r3, [sp, #0]
 8004872:	68bb      	ldr	r3, [r7, #8]
 8004874:	2200      	movs	r2, #0
 8004876:	2180      	movs	r1, #128	@ 0x80
 8004878:	68f8      	ldr	r0, [r7, #12]
 800487a:	f7ff ff49 	bl	8004710 <SPI_WaitFlagStateUntilTimeout>
 800487e:	4603      	mov	r3, r0
 8004880:	2b00      	cmp	r3, #0
 8004882:	d02d      	beq.n	80048e0 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004888:	f043 0220 	orr.w	r2, r3, #32
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8004890:	2303      	movs	r3, #3
 8004892:	e026      	b.n	80048e2 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	9300      	str	r3, [sp, #0]
 8004898:	68bb      	ldr	r3, [r7, #8]
 800489a:	2200      	movs	r2, #0
 800489c:	2101      	movs	r1, #1
 800489e:	68f8      	ldr	r0, [r7, #12]
 80048a0:	f7ff ff36 	bl	8004710 <SPI_WaitFlagStateUntilTimeout>
 80048a4:	4603      	mov	r3, r0
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d01a      	beq.n	80048e0 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80048ae:	f043 0220 	orr.w	r2, r3, #32
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 80048b6:	2303      	movs	r3, #3
 80048b8:	e013      	b.n	80048e2 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	9300      	str	r3, [sp, #0]
 80048be:	68bb      	ldr	r3, [r7, #8]
 80048c0:	2200      	movs	r2, #0
 80048c2:	2101      	movs	r1, #1
 80048c4:	68f8      	ldr	r0, [r7, #12]
 80048c6:	f7ff ff23 	bl	8004710 <SPI_WaitFlagStateUntilTimeout>
 80048ca:	4603      	mov	r3, r0
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d007      	beq.n	80048e0 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80048d4:	f043 0220 	orr.w	r2, r3, #32
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80048dc:	2303      	movs	r3, #3
 80048de:	e000      	b.n	80048e2 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80048e0:	2300      	movs	r3, #0
}
 80048e2:	4618      	mov	r0, r3
 80048e4:	3710      	adds	r7, #16
 80048e6:	46bd      	mov	sp, r7
 80048e8:	bd80      	pop	{r7, pc}
	...

080048ec <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80048ec:	b580      	push	{r7, lr}
 80048ee:	b088      	sub	sp, #32
 80048f0:	af02      	add	r7, sp, #8
 80048f2:	60f8      	str	r0, [r7, #12]
 80048f4:	60b9      	str	r1, [r7, #8]
 80048f6:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80048f8:	4b1b      	ldr	r3, [pc, #108]	@ (8004968 <SPI_EndRxTxTransaction+0x7c>)
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	4a1b      	ldr	r2, [pc, #108]	@ (800496c <SPI_EndRxTxTransaction+0x80>)
 80048fe:	fba2 2303 	umull	r2, r3, r2, r3
 8004902:	0d5b      	lsrs	r3, r3, #21
 8004904:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8004908:	fb02 f303 	mul.w	r3, r2, r3
 800490c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	685b      	ldr	r3, [r3, #4]
 8004912:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004916:	d112      	bne.n	800493e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	9300      	str	r3, [sp, #0]
 800491c:	68bb      	ldr	r3, [r7, #8]
 800491e:	2200      	movs	r2, #0
 8004920:	2180      	movs	r1, #128	@ 0x80
 8004922:	68f8      	ldr	r0, [r7, #12]
 8004924:	f7ff fef4 	bl	8004710 <SPI_WaitFlagStateUntilTimeout>
 8004928:	4603      	mov	r3, r0
 800492a:	2b00      	cmp	r3, #0
 800492c:	d016      	beq.n	800495c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004932:	f043 0220 	orr.w	r2, r3, #32
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 800493a:	2303      	movs	r3, #3
 800493c:	e00f      	b.n	800495e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800493e:	697b      	ldr	r3, [r7, #20]
 8004940:	2b00      	cmp	r3, #0
 8004942:	d00a      	beq.n	800495a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8004944:	697b      	ldr	r3, [r7, #20]
 8004946:	3b01      	subs	r3, #1
 8004948:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	689b      	ldr	r3, [r3, #8]
 8004950:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004954:	2b80      	cmp	r3, #128	@ 0x80
 8004956:	d0f2      	beq.n	800493e <SPI_EndRxTxTransaction+0x52>
 8004958:	e000      	b.n	800495c <SPI_EndRxTxTransaction+0x70>
        break;
 800495a:	bf00      	nop
  }

  return HAL_OK;
 800495c:	2300      	movs	r3, #0
}
 800495e:	4618      	mov	r0, r3
 8004960:	3718      	adds	r7, #24
 8004962:	46bd      	mov	sp, r7
 8004964:	bd80      	pop	{r7, pc}
 8004966:	bf00      	nop
 8004968:	20000008 	.word	0x20000008
 800496c:	165e9f81 	.word	0x165e9f81

08004970 <HAL_SRAM_Init>:
  * @param  Timing Pointer to SRAM control timing structure 
  * @param  ExtTiming Pointer to SRAM extended mode timing structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing, FMC_NORSRAM_TimingTypeDef *ExtTiming)
{ 
 8004970:	b580      	push	{r7, lr}
 8004972:	b084      	sub	sp, #16
 8004974:	af00      	add	r7, sp, #0
 8004976:	60f8      	str	r0, [r7, #12]
 8004978:	60b9      	str	r1, [r7, #8]
 800497a:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if(hsram == NULL)
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	2b00      	cmp	r3, #0
 8004980:	d101      	bne.n	8004986 <HAL_SRAM_Init+0x16>
  {
     return HAL_ERROR;
 8004982:	2301      	movs	r3, #1
 8004984:	e034      	b.n	80049f0 <HAL_SRAM_Init+0x80>
  }
  
  if(hsram->State == HAL_SRAM_STATE_RESET)
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	f893 3049 	ldrb.w	r3, [r3, #73]	@ 0x49
 800498c:	b2db      	uxtb	r3, r3
 800498e:	2b00      	cmp	r3, #0
 8004990:	d106      	bne.n	80049a0 <HAL_SRAM_Init+0x30>
  {  
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	2200      	movs	r2, #0
 8004996:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 800499a:	68f8      	ldr	r0, [r7, #12]
 800499c:	f7fc f808 	bl	80009b0 <HAL_SRAM_MspInit>
#endif
  }
  
  /* Initialize SRAM control Interface */
  FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	681a      	ldr	r2, [r3, #0]
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	3308      	adds	r3, #8
 80049a8:	4619      	mov	r1, r3
 80049aa:	4610      	mov	r0, r2
 80049ac:	f002 f84e 	bl	8006a4c <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank); 
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	6818      	ldr	r0, [r3, #0]
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	689b      	ldr	r3, [r3, #8]
 80049b8:	461a      	mov	r2, r3
 80049ba:	68b9      	ldr	r1, [r7, #8]
 80049bc:	f002 f898 	bl	8006af0 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,  hsram->Init.ExtendedMode);  
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	6858      	ldr	r0, [r3, #4]
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	689a      	ldr	r2, [r3, #8]
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049cc:	6879      	ldr	r1, [r7, #4]
 80049ce:	f002 f8cd 	bl	8006b6c <FSMC_NORSRAM_Extended_Timing_Init>
  
  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank); 
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	68fa      	ldr	r2, [r7, #12]
 80049d8:	6892      	ldr	r2, [r2, #8]
 80049da:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	68fa      	ldr	r2, [r7, #12]
 80049e4:	6892      	ldr	r2, [r2, #8]
 80049e6:	f041 0101 	orr.w	r1, r1, #1
 80049ea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  
  return HAL_OK;
 80049ee:	2300      	movs	r3, #0
}
 80049f0:	4618      	mov	r0, r3
 80049f2:	3710      	adds	r7, #16
 80049f4:	46bd      	mov	sp, r7
 80049f6:	bd80      	pop	{r7, pc}

080049f8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80049f8:	b580      	push	{r7, lr}
 80049fa:	b082      	sub	sp, #8
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d101      	bne.n	8004a0a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004a06:	2301      	movs	r3, #1
 8004a08:	e041      	b.n	8004a8e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004a10:	b2db      	uxtb	r3, r3
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d106      	bne.n	8004a24 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	2200      	movs	r2, #0
 8004a1a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004a1e:	6878      	ldr	r0, [r7, #4]
 8004a20:	f7fd f8d6 	bl	8001bd0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	2202      	movs	r2, #2
 8004a28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681a      	ldr	r2, [r3, #0]
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	3304      	adds	r3, #4
 8004a34:	4619      	mov	r1, r3
 8004a36:	4610      	mov	r0, r2
 8004a38:	f000 fc1a 	bl	8005270 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	2201      	movs	r2, #1
 8004a40:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	2201      	movs	r2, #1
 8004a48:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	2201      	movs	r2, #1
 8004a50:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	2201      	movs	r2, #1
 8004a58:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	2201      	movs	r2, #1
 8004a60:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	2201      	movs	r2, #1
 8004a68:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	2201      	movs	r2, #1
 8004a70:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	2201      	movs	r2, #1
 8004a78:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	2201      	movs	r2, #1
 8004a80:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	2201      	movs	r2, #1
 8004a88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004a8c:	2300      	movs	r3, #0
}
 8004a8e:	4618      	mov	r0, r3
 8004a90:	3708      	adds	r7, #8
 8004a92:	46bd      	mov	sp, r7
 8004a94:	bd80      	pop	{r7, pc}
	...

08004a98 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004a98:	b480      	push	{r7}
 8004a9a:	b085      	sub	sp, #20
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004aa6:	b2db      	uxtb	r3, r3
 8004aa8:	2b01      	cmp	r3, #1
 8004aaa:	d001      	beq.n	8004ab0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004aac:	2301      	movs	r3, #1
 8004aae:	e046      	b.n	8004b3e <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	2202      	movs	r2, #2
 8004ab4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	4a23      	ldr	r2, [pc, #140]	@ (8004b4c <HAL_TIM_Base_Start+0xb4>)
 8004abe:	4293      	cmp	r3, r2
 8004ac0:	d022      	beq.n	8004b08 <HAL_TIM_Base_Start+0x70>
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004aca:	d01d      	beq.n	8004b08 <HAL_TIM_Base_Start+0x70>
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	4a1f      	ldr	r2, [pc, #124]	@ (8004b50 <HAL_TIM_Base_Start+0xb8>)
 8004ad2:	4293      	cmp	r3, r2
 8004ad4:	d018      	beq.n	8004b08 <HAL_TIM_Base_Start+0x70>
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	4a1e      	ldr	r2, [pc, #120]	@ (8004b54 <HAL_TIM_Base_Start+0xbc>)
 8004adc:	4293      	cmp	r3, r2
 8004ade:	d013      	beq.n	8004b08 <HAL_TIM_Base_Start+0x70>
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	4a1c      	ldr	r2, [pc, #112]	@ (8004b58 <HAL_TIM_Base_Start+0xc0>)
 8004ae6:	4293      	cmp	r3, r2
 8004ae8:	d00e      	beq.n	8004b08 <HAL_TIM_Base_Start+0x70>
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	4a1b      	ldr	r2, [pc, #108]	@ (8004b5c <HAL_TIM_Base_Start+0xc4>)
 8004af0:	4293      	cmp	r3, r2
 8004af2:	d009      	beq.n	8004b08 <HAL_TIM_Base_Start+0x70>
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	4a19      	ldr	r2, [pc, #100]	@ (8004b60 <HAL_TIM_Base_Start+0xc8>)
 8004afa:	4293      	cmp	r3, r2
 8004afc:	d004      	beq.n	8004b08 <HAL_TIM_Base_Start+0x70>
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	4a18      	ldr	r2, [pc, #96]	@ (8004b64 <HAL_TIM_Base_Start+0xcc>)
 8004b04:	4293      	cmp	r3, r2
 8004b06:	d111      	bne.n	8004b2c <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	689b      	ldr	r3, [r3, #8]
 8004b0e:	f003 0307 	and.w	r3, r3, #7
 8004b12:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	2b06      	cmp	r3, #6
 8004b18:	d010      	beq.n	8004b3c <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	681a      	ldr	r2, [r3, #0]
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f042 0201 	orr.w	r2, r2, #1
 8004b28:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b2a:	e007      	b.n	8004b3c <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	681a      	ldr	r2, [r3, #0]
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	f042 0201 	orr.w	r2, r2, #1
 8004b3a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004b3c:	2300      	movs	r3, #0
}
 8004b3e:	4618      	mov	r0, r3
 8004b40:	3714      	adds	r7, #20
 8004b42:	46bd      	mov	sp, r7
 8004b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b48:	4770      	bx	lr
 8004b4a:	bf00      	nop
 8004b4c:	40010000 	.word	0x40010000
 8004b50:	40000400 	.word	0x40000400
 8004b54:	40000800 	.word	0x40000800
 8004b58:	40000c00 	.word	0x40000c00
 8004b5c:	40010400 	.word	0x40010400
 8004b60:	40014000 	.word	0x40014000
 8004b64:	40001800 	.word	0x40001800

08004b68 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004b68:	b480      	push	{r7}
 8004b6a:	b085      	sub	sp, #20
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004b76:	b2db      	uxtb	r3, r3
 8004b78:	2b01      	cmp	r3, #1
 8004b7a:	d001      	beq.n	8004b80 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004b7c:	2301      	movs	r3, #1
 8004b7e:	e04e      	b.n	8004c1e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	2202      	movs	r2, #2
 8004b84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	68da      	ldr	r2, [r3, #12]
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	f042 0201 	orr.w	r2, r2, #1
 8004b96:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	4a23      	ldr	r2, [pc, #140]	@ (8004c2c <HAL_TIM_Base_Start_IT+0xc4>)
 8004b9e:	4293      	cmp	r3, r2
 8004ba0:	d022      	beq.n	8004be8 <HAL_TIM_Base_Start_IT+0x80>
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004baa:	d01d      	beq.n	8004be8 <HAL_TIM_Base_Start_IT+0x80>
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	4a1f      	ldr	r2, [pc, #124]	@ (8004c30 <HAL_TIM_Base_Start_IT+0xc8>)
 8004bb2:	4293      	cmp	r3, r2
 8004bb4:	d018      	beq.n	8004be8 <HAL_TIM_Base_Start_IT+0x80>
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	4a1e      	ldr	r2, [pc, #120]	@ (8004c34 <HAL_TIM_Base_Start_IT+0xcc>)
 8004bbc:	4293      	cmp	r3, r2
 8004bbe:	d013      	beq.n	8004be8 <HAL_TIM_Base_Start_IT+0x80>
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	4a1c      	ldr	r2, [pc, #112]	@ (8004c38 <HAL_TIM_Base_Start_IT+0xd0>)
 8004bc6:	4293      	cmp	r3, r2
 8004bc8:	d00e      	beq.n	8004be8 <HAL_TIM_Base_Start_IT+0x80>
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	4a1b      	ldr	r2, [pc, #108]	@ (8004c3c <HAL_TIM_Base_Start_IT+0xd4>)
 8004bd0:	4293      	cmp	r3, r2
 8004bd2:	d009      	beq.n	8004be8 <HAL_TIM_Base_Start_IT+0x80>
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	4a19      	ldr	r2, [pc, #100]	@ (8004c40 <HAL_TIM_Base_Start_IT+0xd8>)
 8004bda:	4293      	cmp	r3, r2
 8004bdc:	d004      	beq.n	8004be8 <HAL_TIM_Base_Start_IT+0x80>
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	4a18      	ldr	r2, [pc, #96]	@ (8004c44 <HAL_TIM_Base_Start_IT+0xdc>)
 8004be4:	4293      	cmp	r3, r2
 8004be6:	d111      	bne.n	8004c0c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	689b      	ldr	r3, [r3, #8]
 8004bee:	f003 0307 	and.w	r3, r3, #7
 8004bf2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	2b06      	cmp	r3, #6
 8004bf8:	d010      	beq.n	8004c1c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	681a      	ldr	r2, [r3, #0]
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	f042 0201 	orr.w	r2, r2, #1
 8004c08:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c0a:	e007      	b.n	8004c1c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	681a      	ldr	r2, [r3, #0]
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	f042 0201 	orr.w	r2, r2, #1
 8004c1a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004c1c:	2300      	movs	r3, #0
}
 8004c1e:	4618      	mov	r0, r3
 8004c20:	3714      	adds	r7, #20
 8004c22:	46bd      	mov	sp, r7
 8004c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c28:	4770      	bx	lr
 8004c2a:	bf00      	nop
 8004c2c:	40010000 	.word	0x40010000
 8004c30:	40000400 	.word	0x40000400
 8004c34:	40000800 	.word	0x40000800
 8004c38:	40000c00 	.word	0x40000c00
 8004c3c:	40010400 	.word	0x40010400
 8004c40:	40014000 	.word	0x40014000
 8004c44:	40001800 	.word	0x40001800

08004c48 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004c48:	b580      	push	{r7, lr}
 8004c4a:	b082      	sub	sp, #8
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d101      	bne.n	8004c5a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004c56:	2301      	movs	r3, #1
 8004c58:	e041      	b.n	8004cde <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004c60:	b2db      	uxtb	r3, r3
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d106      	bne.n	8004c74 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	2200      	movs	r2, #0
 8004c6a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004c6e:	6878      	ldr	r0, [r7, #4]
 8004c70:	f000 f839 	bl	8004ce6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	2202      	movs	r2, #2
 8004c78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681a      	ldr	r2, [r3, #0]
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	3304      	adds	r3, #4
 8004c84:	4619      	mov	r1, r3
 8004c86:	4610      	mov	r0, r2
 8004c88:	f000 faf2 	bl	8005270 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	2201      	movs	r2, #1
 8004c90:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	2201      	movs	r2, #1
 8004c98:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	2201      	movs	r2, #1
 8004ca0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	2201      	movs	r2, #1
 8004ca8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	2201      	movs	r2, #1
 8004cb0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	2201      	movs	r2, #1
 8004cb8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	2201      	movs	r2, #1
 8004cc0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	2201      	movs	r2, #1
 8004cc8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	2201      	movs	r2, #1
 8004cd0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	2201      	movs	r2, #1
 8004cd8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004cdc:	2300      	movs	r3, #0
}
 8004cde:	4618      	mov	r0, r3
 8004ce0:	3708      	adds	r7, #8
 8004ce2:	46bd      	mov	sp, r7
 8004ce4:	bd80      	pop	{r7, pc}

08004ce6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004ce6:	b480      	push	{r7}
 8004ce8:	b083      	sub	sp, #12
 8004cea:	af00      	add	r7, sp, #0
 8004cec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004cee:	bf00      	nop
 8004cf0:	370c      	adds	r7, #12
 8004cf2:	46bd      	mov	sp, r7
 8004cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf8:	4770      	bx	lr

08004cfa <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004cfa:	b580      	push	{r7, lr}
 8004cfc:	b082      	sub	sp, #8
 8004cfe:	af00      	add	r7, sp, #0
 8004d00:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	691b      	ldr	r3, [r3, #16]
 8004d08:	f003 0302 	and.w	r3, r3, #2
 8004d0c:	2b02      	cmp	r3, #2
 8004d0e:	d122      	bne.n	8004d56 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	68db      	ldr	r3, [r3, #12]
 8004d16:	f003 0302 	and.w	r3, r3, #2
 8004d1a:	2b02      	cmp	r3, #2
 8004d1c:	d11b      	bne.n	8004d56 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	f06f 0202 	mvn.w	r2, #2
 8004d26:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	2201      	movs	r2, #1
 8004d2c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	699b      	ldr	r3, [r3, #24]
 8004d34:	f003 0303 	and.w	r3, r3, #3
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d003      	beq.n	8004d44 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004d3c:	6878      	ldr	r0, [r7, #4]
 8004d3e:	f000 fa78 	bl	8005232 <HAL_TIM_IC_CaptureCallback>
 8004d42:	e005      	b.n	8004d50 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d44:	6878      	ldr	r0, [r7, #4]
 8004d46:	f000 fa6a 	bl	800521e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d4a:	6878      	ldr	r0, [r7, #4]
 8004d4c:	f000 fa7b 	bl	8005246 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	2200      	movs	r2, #0
 8004d54:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	691b      	ldr	r3, [r3, #16]
 8004d5c:	f003 0304 	and.w	r3, r3, #4
 8004d60:	2b04      	cmp	r3, #4
 8004d62:	d122      	bne.n	8004daa <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	68db      	ldr	r3, [r3, #12]
 8004d6a:	f003 0304 	and.w	r3, r3, #4
 8004d6e:	2b04      	cmp	r3, #4
 8004d70:	d11b      	bne.n	8004daa <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	f06f 0204 	mvn.w	r2, #4
 8004d7a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	2202      	movs	r2, #2
 8004d80:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	699b      	ldr	r3, [r3, #24]
 8004d88:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d003      	beq.n	8004d98 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004d90:	6878      	ldr	r0, [r7, #4]
 8004d92:	f000 fa4e 	bl	8005232 <HAL_TIM_IC_CaptureCallback>
 8004d96:	e005      	b.n	8004da4 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d98:	6878      	ldr	r0, [r7, #4]
 8004d9a:	f000 fa40 	bl	800521e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d9e:	6878      	ldr	r0, [r7, #4]
 8004da0:	f000 fa51 	bl	8005246 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	2200      	movs	r2, #0
 8004da8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	691b      	ldr	r3, [r3, #16]
 8004db0:	f003 0308 	and.w	r3, r3, #8
 8004db4:	2b08      	cmp	r3, #8
 8004db6:	d122      	bne.n	8004dfe <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	68db      	ldr	r3, [r3, #12]
 8004dbe:	f003 0308 	and.w	r3, r3, #8
 8004dc2:	2b08      	cmp	r3, #8
 8004dc4:	d11b      	bne.n	8004dfe <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	f06f 0208 	mvn.w	r2, #8
 8004dce:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	2204      	movs	r2, #4
 8004dd4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	69db      	ldr	r3, [r3, #28]
 8004ddc:	f003 0303 	and.w	r3, r3, #3
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d003      	beq.n	8004dec <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004de4:	6878      	ldr	r0, [r7, #4]
 8004de6:	f000 fa24 	bl	8005232 <HAL_TIM_IC_CaptureCallback>
 8004dea:	e005      	b.n	8004df8 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004dec:	6878      	ldr	r0, [r7, #4]
 8004dee:	f000 fa16 	bl	800521e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004df2:	6878      	ldr	r0, [r7, #4]
 8004df4:	f000 fa27 	bl	8005246 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	2200      	movs	r2, #0
 8004dfc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	691b      	ldr	r3, [r3, #16]
 8004e04:	f003 0310 	and.w	r3, r3, #16
 8004e08:	2b10      	cmp	r3, #16
 8004e0a:	d122      	bne.n	8004e52 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	68db      	ldr	r3, [r3, #12]
 8004e12:	f003 0310 	and.w	r3, r3, #16
 8004e16:	2b10      	cmp	r3, #16
 8004e18:	d11b      	bne.n	8004e52 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	f06f 0210 	mvn.w	r2, #16
 8004e22:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	2208      	movs	r2, #8
 8004e28:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	69db      	ldr	r3, [r3, #28]
 8004e30:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d003      	beq.n	8004e40 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004e38:	6878      	ldr	r0, [r7, #4]
 8004e3a:	f000 f9fa 	bl	8005232 <HAL_TIM_IC_CaptureCallback>
 8004e3e:	e005      	b.n	8004e4c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e40:	6878      	ldr	r0, [r7, #4]
 8004e42:	f000 f9ec 	bl	800521e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e46:	6878      	ldr	r0, [r7, #4]
 8004e48:	f000 f9fd 	bl	8005246 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	2200      	movs	r2, #0
 8004e50:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	691b      	ldr	r3, [r3, #16]
 8004e58:	f003 0301 	and.w	r3, r3, #1
 8004e5c:	2b01      	cmp	r3, #1
 8004e5e:	d10e      	bne.n	8004e7e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	68db      	ldr	r3, [r3, #12]
 8004e66:	f003 0301 	and.w	r3, r3, #1
 8004e6a:	2b01      	cmp	r3, #1
 8004e6c:	d107      	bne.n	8004e7e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	f06f 0201 	mvn.w	r2, #1
 8004e76:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004e78:	6878      	ldr	r0, [r7, #4]
 8004e7a:	f7fc fc85 	bl	8001788 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	691b      	ldr	r3, [r3, #16]
 8004e84:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e88:	2b80      	cmp	r3, #128	@ 0x80
 8004e8a:	d10e      	bne.n	8004eaa <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	68db      	ldr	r3, [r3, #12]
 8004e92:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e96:	2b80      	cmp	r3, #128	@ 0x80
 8004e98:	d107      	bne.n	8004eaa <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004ea2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004ea4:	6878      	ldr	r0, [r7, #4]
 8004ea6:	f000 fd53 	bl	8005950 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	691b      	ldr	r3, [r3, #16]
 8004eb0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004eb4:	2b40      	cmp	r3, #64	@ 0x40
 8004eb6:	d10e      	bne.n	8004ed6 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	68db      	ldr	r3, [r3, #12]
 8004ebe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ec2:	2b40      	cmp	r3, #64	@ 0x40
 8004ec4:	d107      	bne.n	8004ed6 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004ece:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004ed0:	6878      	ldr	r0, [r7, #4]
 8004ed2:	f000 f9c2 	bl	800525a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	691b      	ldr	r3, [r3, #16]
 8004edc:	f003 0320 	and.w	r3, r3, #32
 8004ee0:	2b20      	cmp	r3, #32
 8004ee2:	d10e      	bne.n	8004f02 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	68db      	ldr	r3, [r3, #12]
 8004eea:	f003 0320 	and.w	r3, r3, #32
 8004eee:	2b20      	cmp	r3, #32
 8004ef0:	d107      	bne.n	8004f02 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	f06f 0220 	mvn.w	r2, #32
 8004efa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004efc:	6878      	ldr	r0, [r7, #4]
 8004efe:	f000 fd1d 	bl	800593c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004f02:	bf00      	nop
 8004f04:	3708      	adds	r7, #8
 8004f06:	46bd      	mov	sp, r7
 8004f08:	bd80      	pop	{r7, pc}
	...

08004f0c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004f0c:	b580      	push	{r7, lr}
 8004f0e:	b086      	sub	sp, #24
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	60f8      	str	r0, [r7, #12]
 8004f14:	60b9      	str	r1, [r7, #8]
 8004f16:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004f18:	2300      	movs	r3, #0
 8004f1a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004f22:	2b01      	cmp	r3, #1
 8004f24:	d101      	bne.n	8004f2a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004f26:	2302      	movs	r3, #2
 8004f28:	e0ae      	b.n	8005088 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	2201      	movs	r2, #1
 8004f2e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	2b0c      	cmp	r3, #12
 8004f36:	f200 809f 	bhi.w	8005078 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004f3a:	a201      	add	r2, pc, #4	@ (adr r2, 8004f40 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004f3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f40:	08004f75 	.word	0x08004f75
 8004f44:	08005079 	.word	0x08005079
 8004f48:	08005079 	.word	0x08005079
 8004f4c:	08005079 	.word	0x08005079
 8004f50:	08004fb5 	.word	0x08004fb5
 8004f54:	08005079 	.word	0x08005079
 8004f58:	08005079 	.word	0x08005079
 8004f5c:	08005079 	.word	0x08005079
 8004f60:	08004ff7 	.word	0x08004ff7
 8004f64:	08005079 	.word	0x08005079
 8004f68:	08005079 	.word	0x08005079
 8004f6c:	08005079 	.word	0x08005079
 8004f70:	08005037 	.word	0x08005037
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	68b9      	ldr	r1, [r7, #8]
 8004f7a:	4618      	mov	r0, r3
 8004f7c:	f000 fa18 	bl	80053b0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	699a      	ldr	r2, [r3, #24]
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	f042 0208 	orr.w	r2, r2, #8
 8004f8e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	699a      	ldr	r2, [r3, #24]
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	f022 0204 	bic.w	r2, r2, #4
 8004f9e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	6999      	ldr	r1, [r3, #24]
 8004fa6:	68bb      	ldr	r3, [r7, #8]
 8004fa8:	691a      	ldr	r2, [r3, #16]
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	430a      	orrs	r2, r1
 8004fb0:	619a      	str	r2, [r3, #24]
      break;
 8004fb2:	e064      	b.n	800507e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	68b9      	ldr	r1, [r7, #8]
 8004fba:	4618      	mov	r0, r3
 8004fbc:	f000 fa68 	bl	8005490 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	699a      	ldr	r2, [r3, #24]
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004fce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	699a      	ldr	r2, [r3, #24]
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004fde:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	6999      	ldr	r1, [r3, #24]
 8004fe6:	68bb      	ldr	r3, [r7, #8]
 8004fe8:	691b      	ldr	r3, [r3, #16]
 8004fea:	021a      	lsls	r2, r3, #8
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	430a      	orrs	r2, r1
 8004ff2:	619a      	str	r2, [r3, #24]
      break;
 8004ff4:	e043      	b.n	800507e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	68b9      	ldr	r1, [r7, #8]
 8004ffc:	4618      	mov	r0, r3
 8004ffe:	f000 fabd 	bl	800557c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	69da      	ldr	r2, [r3, #28]
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	f042 0208 	orr.w	r2, r2, #8
 8005010:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	69da      	ldr	r2, [r3, #28]
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	f022 0204 	bic.w	r2, r2, #4
 8005020:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	69d9      	ldr	r1, [r3, #28]
 8005028:	68bb      	ldr	r3, [r7, #8]
 800502a:	691a      	ldr	r2, [r3, #16]
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	430a      	orrs	r2, r1
 8005032:	61da      	str	r2, [r3, #28]
      break;
 8005034:	e023      	b.n	800507e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	68b9      	ldr	r1, [r7, #8]
 800503c:	4618      	mov	r0, r3
 800503e:	f000 fb11 	bl	8005664 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	69da      	ldr	r2, [r3, #28]
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005050:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	69da      	ldr	r2, [r3, #28]
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005060:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	69d9      	ldr	r1, [r3, #28]
 8005068:	68bb      	ldr	r3, [r7, #8]
 800506a:	691b      	ldr	r3, [r3, #16]
 800506c:	021a      	lsls	r2, r3, #8
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	430a      	orrs	r2, r1
 8005074:	61da      	str	r2, [r3, #28]
      break;
 8005076:	e002      	b.n	800507e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005078:	2301      	movs	r3, #1
 800507a:	75fb      	strb	r3, [r7, #23]
      break;
 800507c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	2200      	movs	r2, #0
 8005082:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005086:	7dfb      	ldrb	r3, [r7, #23]
}
 8005088:	4618      	mov	r0, r3
 800508a:	3718      	adds	r7, #24
 800508c:	46bd      	mov	sp, r7
 800508e:	bd80      	pop	{r7, pc}

08005090 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005090:	b580      	push	{r7, lr}
 8005092:	b084      	sub	sp, #16
 8005094:	af00      	add	r7, sp, #0
 8005096:	6078      	str	r0, [r7, #4]
 8005098:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800509a:	2300      	movs	r3, #0
 800509c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80050a4:	2b01      	cmp	r3, #1
 80050a6:	d101      	bne.n	80050ac <HAL_TIM_ConfigClockSource+0x1c>
 80050a8:	2302      	movs	r3, #2
 80050aa:	e0b4      	b.n	8005216 <HAL_TIM_ConfigClockSource+0x186>
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	2201      	movs	r2, #1
 80050b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	2202      	movs	r2, #2
 80050b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	689b      	ldr	r3, [r3, #8]
 80050c2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80050c4:	68bb      	ldr	r3, [r7, #8]
 80050c6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80050ca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80050cc:	68bb      	ldr	r3, [r7, #8]
 80050ce:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80050d2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	68ba      	ldr	r2, [r7, #8]
 80050da:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80050dc:	683b      	ldr	r3, [r7, #0]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80050e4:	d03e      	beq.n	8005164 <HAL_TIM_ConfigClockSource+0xd4>
 80050e6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80050ea:	f200 8087 	bhi.w	80051fc <HAL_TIM_ConfigClockSource+0x16c>
 80050ee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80050f2:	f000 8086 	beq.w	8005202 <HAL_TIM_ConfigClockSource+0x172>
 80050f6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80050fa:	d87f      	bhi.n	80051fc <HAL_TIM_ConfigClockSource+0x16c>
 80050fc:	2b70      	cmp	r3, #112	@ 0x70
 80050fe:	d01a      	beq.n	8005136 <HAL_TIM_ConfigClockSource+0xa6>
 8005100:	2b70      	cmp	r3, #112	@ 0x70
 8005102:	d87b      	bhi.n	80051fc <HAL_TIM_ConfigClockSource+0x16c>
 8005104:	2b60      	cmp	r3, #96	@ 0x60
 8005106:	d050      	beq.n	80051aa <HAL_TIM_ConfigClockSource+0x11a>
 8005108:	2b60      	cmp	r3, #96	@ 0x60
 800510a:	d877      	bhi.n	80051fc <HAL_TIM_ConfigClockSource+0x16c>
 800510c:	2b50      	cmp	r3, #80	@ 0x50
 800510e:	d03c      	beq.n	800518a <HAL_TIM_ConfigClockSource+0xfa>
 8005110:	2b50      	cmp	r3, #80	@ 0x50
 8005112:	d873      	bhi.n	80051fc <HAL_TIM_ConfigClockSource+0x16c>
 8005114:	2b40      	cmp	r3, #64	@ 0x40
 8005116:	d058      	beq.n	80051ca <HAL_TIM_ConfigClockSource+0x13a>
 8005118:	2b40      	cmp	r3, #64	@ 0x40
 800511a:	d86f      	bhi.n	80051fc <HAL_TIM_ConfigClockSource+0x16c>
 800511c:	2b30      	cmp	r3, #48	@ 0x30
 800511e:	d064      	beq.n	80051ea <HAL_TIM_ConfigClockSource+0x15a>
 8005120:	2b30      	cmp	r3, #48	@ 0x30
 8005122:	d86b      	bhi.n	80051fc <HAL_TIM_ConfigClockSource+0x16c>
 8005124:	2b20      	cmp	r3, #32
 8005126:	d060      	beq.n	80051ea <HAL_TIM_ConfigClockSource+0x15a>
 8005128:	2b20      	cmp	r3, #32
 800512a:	d867      	bhi.n	80051fc <HAL_TIM_ConfigClockSource+0x16c>
 800512c:	2b00      	cmp	r3, #0
 800512e:	d05c      	beq.n	80051ea <HAL_TIM_ConfigClockSource+0x15a>
 8005130:	2b10      	cmp	r3, #16
 8005132:	d05a      	beq.n	80051ea <HAL_TIM_ConfigClockSource+0x15a>
 8005134:	e062      	b.n	80051fc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	6818      	ldr	r0, [r3, #0]
 800513a:	683b      	ldr	r3, [r7, #0]
 800513c:	6899      	ldr	r1, [r3, #8]
 800513e:	683b      	ldr	r3, [r7, #0]
 8005140:	685a      	ldr	r2, [r3, #4]
 8005142:	683b      	ldr	r3, [r7, #0]
 8005144:	68db      	ldr	r3, [r3, #12]
 8005146:	f000 fb5d 	bl	8005804 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	689b      	ldr	r3, [r3, #8]
 8005150:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005152:	68bb      	ldr	r3, [r7, #8]
 8005154:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005158:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	68ba      	ldr	r2, [r7, #8]
 8005160:	609a      	str	r2, [r3, #8]
      break;
 8005162:	e04f      	b.n	8005204 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	6818      	ldr	r0, [r3, #0]
 8005168:	683b      	ldr	r3, [r7, #0]
 800516a:	6899      	ldr	r1, [r3, #8]
 800516c:	683b      	ldr	r3, [r7, #0]
 800516e:	685a      	ldr	r2, [r3, #4]
 8005170:	683b      	ldr	r3, [r7, #0]
 8005172:	68db      	ldr	r3, [r3, #12]
 8005174:	f000 fb46 	bl	8005804 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	689a      	ldr	r2, [r3, #8]
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005186:	609a      	str	r2, [r3, #8]
      break;
 8005188:	e03c      	b.n	8005204 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	6818      	ldr	r0, [r3, #0]
 800518e:	683b      	ldr	r3, [r7, #0]
 8005190:	6859      	ldr	r1, [r3, #4]
 8005192:	683b      	ldr	r3, [r7, #0]
 8005194:	68db      	ldr	r3, [r3, #12]
 8005196:	461a      	mov	r2, r3
 8005198:	f000 faba 	bl	8005710 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	2150      	movs	r1, #80	@ 0x50
 80051a2:	4618      	mov	r0, r3
 80051a4:	f000 fb13 	bl	80057ce <TIM_ITRx_SetConfig>
      break;
 80051a8:	e02c      	b.n	8005204 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	6818      	ldr	r0, [r3, #0]
 80051ae:	683b      	ldr	r3, [r7, #0]
 80051b0:	6859      	ldr	r1, [r3, #4]
 80051b2:	683b      	ldr	r3, [r7, #0]
 80051b4:	68db      	ldr	r3, [r3, #12]
 80051b6:	461a      	mov	r2, r3
 80051b8:	f000 fad9 	bl	800576e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	2160      	movs	r1, #96	@ 0x60
 80051c2:	4618      	mov	r0, r3
 80051c4:	f000 fb03 	bl	80057ce <TIM_ITRx_SetConfig>
      break;
 80051c8:	e01c      	b.n	8005204 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	6818      	ldr	r0, [r3, #0]
 80051ce:	683b      	ldr	r3, [r7, #0]
 80051d0:	6859      	ldr	r1, [r3, #4]
 80051d2:	683b      	ldr	r3, [r7, #0]
 80051d4:	68db      	ldr	r3, [r3, #12]
 80051d6:	461a      	mov	r2, r3
 80051d8:	f000 fa9a 	bl	8005710 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	2140      	movs	r1, #64	@ 0x40
 80051e2:	4618      	mov	r0, r3
 80051e4:	f000 faf3 	bl	80057ce <TIM_ITRx_SetConfig>
      break;
 80051e8:	e00c      	b.n	8005204 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681a      	ldr	r2, [r3, #0]
 80051ee:	683b      	ldr	r3, [r7, #0]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	4619      	mov	r1, r3
 80051f4:	4610      	mov	r0, r2
 80051f6:	f000 faea 	bl	80057ce <TIM_ITRx_SetConfig>
      break;
 80051fa:	e003      	b.n	8005204 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80051fc:	2301      	movs	r3, #1
 80051fe:	73fb      	strb	r3, [r7, #15]
      break;
 8005200:	e000      	b.n	8005204 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005202:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	2201      	movs	r2, #1
 8005208:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	2200      	movs	r2, #0
 8005210:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005214:	7bfb      	ldrb	r3, [r7, #15]
}
 8005216:	4618      	mov	r0, r3
 8005218:	3710      	adds	r7, #16
 800521a:	46bd      	mov	sp, r7
 800521c:	bd80      	pop	{r7, pc}

0800521e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800521e:	b480      	push	{r7}
 8005220:	b083      	sub	sp, #12
 8005222:	af00      	add	r7, sp, #0
 8005224:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005226:	bf00      	nop
 8005228:	370c      	adds	r7, #12
 800522a:	46bd      	mov	sp, r7
 800522c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005230:	4770      	bx	lr

08005232 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005232:	b480      	push	{r7}
 8005234:	b083      	sub	sp, #12
 8005236:	af00      	add	r7, sp, #0
 8005238:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800523a:	bf00      	nop
 800523c:	370c      	adds	r7, #12
 800523e:	46bd      	mov	sp, r7
 8005240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005244:	4770      	bx	lr

08005246 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005246:	b480      	push	{r7}
 8005248:	b083      	sub	sp, #12
 800524a:	af00      	add	r7, sp, #0
 800524c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800524e:	bf00      	nop
 8005250:	370c      	adds	r7, #12
 8005252:	46bd      	mov	sp, r7
 8005254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005258:	4770      	bx	lr

0800525a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800525a:	b480      	push	{r7}
 800525c:	b083      	sub	sp, #12
 800525e:	af00      	add	r7, sp, #0
 8005260:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005262:	bf00      	nop
 8005264:	370c      	adds	r7, #12
 8005266:	46bd      	mov	sp, r7
 8005268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800526c:	4770      	bx	lr
	...

08005270 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005270:	b480      	push	{r7}
 8005272:	b085      	sub	sp, #20
 8005274:	af00      	add	r7, sp, #0
 8005276:	6078      	str	r0, [r7, #4]
 8005278:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	4a40      	ldr	r2, [pc, #256]	@ (8005384 <TIM_Base_SetConfig+0x114>)
 8005284:	4293      	cmp	r3, r2
 8005286:	d013      	beq.n	80052b0 <TIM_Base_SetConfig+0x40>
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800528e:	d00f      	beq.n	80052b0 <TIM_Base_SetConfig+0x40>
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	4a3d      	ldr	r2, [pc, #244]	@ (8005388 <TIM_Base_SetConfig+0x118>)
 8005294:	4293      	cmp	r3, r2
 8005296:	d00b      	beq.n	80052b0 <TIM_Base_SetConfig+0x40>
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	4a3c      	ldr	r2, [pc, #240]	@ (800538c <TIM_Base_SetConfig+0x11c>)
 800529c:	4293      	cmp	r3, r2
 800529e:	d007      	beq.n	80052b0 <TIM_Base_SetConfig+0x40>
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	4a3b      	ldr	r2, [pc, #236]	@ (8005390 <TIM_Base_SetConfig+0x120>)
 80052a4:	4293      	cmp	r3, r2
 80052a6:	d003      	beq.n	80052b0 <TIM_Base_SetConfig+0x40>
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	4a3a      	ldr	r2, [pc, #232]	@ (8005394 <TIM_Base_SetConfig+0x124>)
 80052ac:	4293      	cmp	r3, r2
 80052ae:	d108      	bne.n	80052c2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80052b6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80052b8:	683b      	ldr	r3, [r7, #0]
 80052ba:	685b      	ldr	r3, [r3, #4]
 80052bc:	68fa      	ldr	r2, [r7, #12]
 80052be:	4313      	orrs	r3, r2
 80052c0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	4a2f      	ldr	r2, [pc, #188]	@ (8005384 <TIM_Base_SetConfig+0x114>)
 80052c6:	4293      	cmp	r3, r2
 80052c8:	d02b      	beq.n	8005322 <TIM_Base_SetConfig+0xb2>
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80052d0:	d027      	beq.n	8005322 <TIM_Base_SetConfig+0xb2>
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	4a2c      	ldr	r2, [pc, #176]	@ (8005388 <TIM_Base_SetConfig+0x118>)
 80052d6:	4293      	cmp	r3, r2
 80052d8:	d023      	beq.n	8005322 <TIM_Base_SetConfig+0xb2>
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	4a2b      	ldr	r2, [pc, #172]	@ (800538c <TIM_Base_SetConfig+0x11c>)
 80052de:	4293      	cmp	r3, r2
 80052e0:	d01f      	beq.n	8005322 <TIM_Base_SetConfig+0xb2>
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	4a2a      	ldr	r2, [pc, #168]	@ (8005390 <TIM_Base_SetConfig+0x120>)
 80052e6:	4293      	cmp	r3, r2
 80052e8:	d01b      	beq.n	8005322 <TIM_Base_SetConfig+0xb2>
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	4a29      	ldr	r2, [pc, #164]	@ (8005394 <TIM_Base_SetConfig+0x124>)
 80052ee:	4293      	cmp	r3, r2
 80052f0:	d017      	beq.n	8005322 <TIM_Base_SetConfig+0xb2>
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	4a28      	ldr	r2, [pc, #160]	@ (8005398 <TIM_Base_SetConfig+0x128>)
 80052f6:	4293      	cmp	r3, r2
 80052f8:	d013      	beq.n	8005322 <TIM_Base_SetConfig+0xb2>
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	4a27      	ldr	r2, [pc, #156]	@ (800539c <TIM_Base_SetConfig+0x12c>)
 80052fe:	4293      	cmp	r3, r2
 8005300:	d00f      	beq.n	8005322 <TIM_Base_SetConfig+0xb2>
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	4a26      	ldr	r2, [pc, #152]	@ (80053a0 <TIM_Base_SetConfig+0x130>)
 8005306:	4293      	cmp	r3, r2
 8005308:	d00b      	beq.n	8005322 <TIM_Base_SetConfig+0xb2>
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	4a25      	ldr	r2, [pc, #148]	@ (80053a4 <TIM_Base_SetConfig+0x134>)
 800530e:	4293      	cmp	r3, r2
 8005310:	d007      	beq.n	8005322 <TIM_Base_SetConfig+0xb2>
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	4a24      	ldr	r2, [pc, #144]	@ (80053a8 <TIM_Base_SetConfig+0x138>)
 8005316:	4293      	cmp	r3, r2
 8005318:	d003      	beq.n	8005322 <TIM_Base_SetConfig+0xb2>
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	4a23      	ldr	r2, [pc, #140]	@ (80053ac <TIM_Base_SetConfig+0x13c>)
 800531e:	4293      	cmp	r3, r2
 8005320:	d108      	bne.n	8005334 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005328:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800532a:	683b      	ldr	r3, [r7, #0]
 800532c:	68db      	ldr	r3, [r3, #12]
 800532e:	68fa      	ldr	r2, [r7, #12]
 8005330:	4313      	orrs	r3, r2
 8005332:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800533a:	683b      	ldr	r3, [r7, #0]
 800533c:	695b      	ldr	r3, [r3, #20]
 800533e:	4313      	orrs	r3, r2
 8005340:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	68fa      	ldr	r2, [r7, #12]
 8005346:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005348:	683b      	ldr	r3, [r7, #0]
 800534a:	689a      	ldr	r2, [r3, #8]
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005350:	683b      	ldr	r3, [r7, #0]
 8005352:	681a      	ldr	r2, [r3, #0]
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	4a0a      	ldr	r2, [pc, #40]	@ (8005384 <TIM_Base_SetConfig+0x114>)
 800535c:	4293      	cmp	r3, r2
 800535e:	d003      	beq.n	8005368 <TIM_Base_SetConfig+0xf8>
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	4a0c      	ldr	r2, [pc, #48]	@ (8005394 <TIM_Base_SetConfig+0x124>)
 8005364:	4293      	cmp	r3, r2
 8005366:	d103      	bne.n	8005370 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005368:	683b      	ldr	r3, [r7, #0]
 800536a:	691a      	ldr	r2, [r3, #16]
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	2201      	movs	r2, #1
 8005374:	615a      	str	r2, [r3, #20]
}
 8005376:	bf00      	nop
 8005378:	3714      	adds	r7, #20
 800537a:	46bd      	mov	sp, r7
 800537c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005380:	4770      	bx	lr
 8005382:	bf00      	nop
 8005384:	40010000 	.word	0x40010000
 8005388:	40000400 	.word	0x40000400
 800538c:	40000800 	.word	0x40000800
 8005390:	40000c00 	.word	0x40000c00
 8005394:	40010400 	.word	0x40010400
 8005398:	40014000 	.word	0x40014000
 800539c:	40014400 	.word	0x40014400
 80053a0:	40014800 	.word	0x40014800
 80053a4:	40001800 	.word	0x40001800
 80053a8:	40001c00 	.word	0x40001c00
 80053ac:	40002000 	.word	0x40002000

080053b0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80053b0:	b480      	push	{r7}
 80053b2:	b087      	sub	sp, #28
 80053b4:	af00      	add	r7, sp, #0
 80053b6:	6078      	str	r0, [r7, #4]
 80053b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	6a1b      	ldr	r3, [r3, #32]
 80053be:	f023 0201 	bic.w	r2, r3, #1
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	6a1b      	ldr	r3, [r3, #32]
 80053ca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	685b      	ldr	r3, [r3, #4]
 80053d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	699b      	ldr	r3, [r3, #24]
 80053d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80053de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	f023 0303 	bic.w	r3, r3, #3
 80053e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80053e8:	683b      	ldr	r3, [r7, #0]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	68fa      	ldr	r2, [r7, #12]
 80053ee:	4313      	orrs	r3, r2
 80053f0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80053f2:	697b      	ldr	r3, [r7, #20]
 80053f4:	f023 0302 	bic.w	r3, r3, #2
 80053f8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80053fa:	683b      	ldr	r3, [r7, #0]
 80053fc:	689b      	ldr	r3, [r3, #8]
 80053fe:	697a      	ldr	r2, [r7, #20]
 8005400:	4313      	orrs	r3, r2
 8005402:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	4a20      	ldr	r2, [pc, #128]	@ (8005488 <TIM_OC1_SetConfig+0xd8>)
 8005408:	4293      	cmp	r3, r2
 800540a:	d003      	beq.n	8005414 <TIM_OC1_SetConfig+0x64>
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	4a1f      	ldr	r2, [pc, #124]	@ (800548c <TIM_OC1_SetConfig+0xdc>)
 8005410:	4293      	cmp	r3, r2
 8005412:	d10c      	bne.n	800542e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005414:	697b      	ldr	r3, [r7, #20]
 8005416:	f023 0308 	bic.w	r3, r3, #8
 800541a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800541c:	683b      	ldr	r3, [r7, #0]
 800541e:	68db      	ldr	r3, [r3, #12]
 8005420:	697a      	ldr	r2, [r7, #20]
 8005422:	4313      	orrs	r3, r2
 8005424:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005426:	697b      	ldr	r3, [r7, #20]
 8005428:	f023 0304 	bic.w	r3, r3, #4
 800542c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	4a15      	ldr	r2, [pc, #84]	@ (8005488 <TIM_OC1_SetConfig+0xd8>)
 8005432:	4293      	cmp	r3, r2
 8005434:	d003      	beq.n	800543e <TIM_OC1_SetConfig+0x8e>
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	4a14      	ldr	r2, [pc, #80]	@ (800548c <TIM_OC1_SetConfig+0xdc>)
 800543a:	4293      	cmp	r3, r2
 800543c:	d111      	bne.n	8005462 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800543e:	693b      	ldr	r3, [r7, #16]
 8005440:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005444:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005446:	693b      	ldr	r3, [r7, #16]
 8005448:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800544c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800544e:	683b      	ldr	r3, [r7, #0]
 8005450:	695b      	ldr	r3, [r3, #20]
 8005452:	693a      	ldr	r2, [r7, #16]
 8005454:	4313      	orrs	r3, r2
 8005456:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005458:	683b      	ldr	r3, [r7, #0]
 800545a:	699b      	ldr	r3, [r3, #24]
 800545c:	693a      	ldr	r2, [r7, #16]
 800545e:	4313      	orrs	r3, r2
 8005460:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	693a      	ldr	r2, [r7, #16]
 8005466:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	68fa      	ldr	r2, [r7, #12]
 800546c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800546e:	683b      	ldr	r3, [r7, #0]
 8005470:	685a      	ldr	r2, [r3, #4]
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	697a      	ldr	r2, [r7, #20]
 800547a:	621a      	str	r2, [r3, #32]
}
 800547c:	bf00      	nop
 800547e:	371c      	adds	r7, #28
 8005480:	46bd      	mov	sp, r7
 8005482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005486:	4770      	bx	lr
 8005488:	40010000 	.word	0x40010000
 800548c:	40010400 	.word	0x40010400

08005490 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005490:	b480      	push	{r7}
 8005492:	b087      	sub	sp, #28
 8005494:	af00      	add	r7, sp, #0
 8005496:	6078      	str	r0, [r7, #4]
 8005498:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	6a1b      	ldr	r3, [r3, #32]
 800549e:	f023 0210 	bic.w	r2, r3, #16
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	6a1b      	ldr	r3, [r3, #32]
 80054aa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	685b      	ldr	r3, [r3, #4]
 80054b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	699b      	ldr	r3, [r3, #24]
 80054b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80054be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80054c6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80054c8:	683b      	ldr	r3, [r7, #0]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	021b      	lsls	r3, r3, #8
 80054ce:	68fa      	ldr	r2, [r7, #12]
 80054d0:	4313      	orrs	r3, r2
 80054d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80054d4:	697b      	ldr	r3, [r7, #20]
 80054d6:	f023 0320 	bic.w	r3, r3, #32
 80054da:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80054dc:	683b      	ldr	r3, [r7, #0]
 80054de:	689b      	ldr	r3, [r3, #8]
 80054e0:	011b      	lsls	r3, r3, #4
 80054e2:	697a      	ldr	r2, [r7, #20]
 80054e4:	4313      	orrs	r3, r2
 80054e6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	4a22      	ldr	r2, [pc, #136]	@ (8005574 <TIM_OC2_SetConfig+0xe4>)
 80054ec:	4293      	cmp	r3, r2
 80054ee:	d003      	beq.n	80054f8 <TIM_OC2_SetConfig+0x68>
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	4a21      	ldr	r2, [pc, #132]	@ (8005578 <TIM_OC2_SetConfig+0xe8>)
 80054f4:	4293      	cmp	r3, r2
 80054f6:	d10d      	bne.n	8005514 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80054f8:	697b      	ldr	r3, [r7, #20]
 80054fa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80054fe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005500:	683b      	ldr	r3, [r7, #0]
 8005502:	68db      	ldr	r3, [r3, #12]
 8005504:	011b      	lsls	r3, r3, #4
 8005506:	697a      	ldr	r2, [r7, #20]
 8005508:	4313      	orrs	r3, r2
 800550a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800550c:	697b      	ldr	r3, [r7, #20]
 800550e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005512:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	4a17      	ldr	r2, [pc, #92]	@ (8005574 <TIM_OC2_SetConfig+0xe4>)
 8005518:	4293      	cmp	r3, r2
 800551a:	d003      	beq.n	8005524 <TIM_OC2_SetConfig+0x94>
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	4a16      	ldr	r2, [pc, #88]	@ (8005578 <TIM_OC2_SetConfig+0xe8>)
 8005520:	4293      	cmp	r3, r2
 8005522:	d113      	bne.n	800554c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005524:	693b      	ldr	r3, [r7, #16]
 8005526:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800552a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800552c:	693b      	ldr	r3, [r7, #16]
 800552e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005532:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005534:	683b      	ldr	r3, [r7, #0]
 8005536:	695b      	ldr	r3, [r3, #20]
 8005538:	009b      	lsls	r3, r3, #2
 800553a:	693a      	ldr	r2, [r7, #16]
 800553c:	4313      	orrs	r3, r2
 800553e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005540:	683b      	ldr	r3, [r7, #0]
 8005542:	699b      	ldr	r3, [r3, #24]
 8005544:	009b      	lsls	r3, r3, #2
 8005546:	693a      	ldr	r2, [r7, #16]
 8005548:	4313      	orrs	r3, r2
 800554a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	693a      	ldr	r2, [r7, #16]
 8005550:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	68fa      	ldr	r2, [r7, #12]
 8005556:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005558:	683b      	ldr	r3, [r7, #0]
 800555a:	685a      	ldr	r2, [r3, #4]
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	697a      	ldr	r2, [r7, #20]
 8005564:	621a      	str	r2, [r3, #32]
}
 8005566:	bf00      	nop
 8005568:	371c      	adds	r7, #28
 800556a:	46bd      	mov	sp, r7
 800556c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005570:	4770      	bx	lr
 8005572:	bf00      	nop
 8005574:	40010000 	.word	0x40010000
 8005578:	40010400 	.word	0x40010400

0800557c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800557c:	b480      	push	{r7}
 800557e:	b087      	sub	sp, #28
 8005580:	af00      	add	r7, sp, #0
 8005582:	6078      	str	r0, [r7, #4]
 8005584:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	6a1b      	ldr	r3, [r3, #32]
 800558a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	6a1b      	ldr	r3, [r3, #32]
 8005596:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	685b      	ldr	r3, [r3, #4]
 800559c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	69db      	ldr	r3, [r3, #28]
 80055a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80055aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	f023 0303 	bic.w	r3, r3, #3
 80055b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80055b4:	683b      	ldr	r3, [r7, #0]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	68fa      	ldr	r2, [r7, #12]
 80055ba:	4313      	orrs	r3, r2
 80055bc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80055be:	697b      	ldr	r3, [r7, #20]
 80055c0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80055c4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80055c6:	683b      	ldr	r3, [r7, #0]
 80055c8:	689b      	ldr	r3, [r3, #8]
 80055ca:	021b      	lsls	r3, r3, #8
 80055cc:	697a      	ldr	r2, [r7, #20]
 80055ce:	4313      	orrs	r3, r2
 80055d0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	4a21      	ldr	r2, [pc, #132]	@ (800565c <TIM_OC3_SetConfig+0xe0>)
 80055d6:	4293      	cmp	r3, r2
 80055d8:	d003      	beq.n	80055e2 <TIM_OC3_SetConfig+0x66>
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	4a20      	ldr	r2, [pc, #128]	@ (8005660 <TIM_OC3_SetConfig+0xe4>)
 80055de:	4293      	cmp	r3, r2
 80055e0:	d10d      	bne.n	80055fe <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80055e2:	697b      	ldr	r3, [r7, #20]
 80055e4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80055e8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80055ea:	683b      	ldr	r3, [r7, #0]
 80055ec:	68db      	ldr	r3, [r3, #12]
 80055ee:	021b      	lsls	r3, r3, #8
 80055f0:	697a      	ldr	r2, [r7, #20]
 80055f2:	4313      	orrs	r3, r2
 80055f4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80055f6:	697b      	ldr	r3, [r7, #20]
 80055f8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80055fc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	4a16      	ldr	r2, [pc, #88]	@ (800565c <TIM_OC3_SetConfig+0xe0>)
 8005602:	4293      	cmp	r3, r2
 8005604:	d003      	beq.n	800560e <TIM_OC3_SetConfig+0x92>
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	4a15      	ldr	r2, [pc, #84]	@ (8005660 <TIM_OC3_SetConfig+0xe4>)
 800560a:	4293      	cmp	r3, r2
 800560c:	d113      	bne.n	8005636 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800560e:	693b      	ldr	r3, [r7, #16]
 8005610:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005614:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005616:	693b      	ldr	r3, [r7, #16]
 8005618:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800561c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800561e:	683b      	ldr	r3, [r7, #0]
 8005620:	695b      	ldr	r3, [r3, #20]
 8005622:	011b      	lsls	r3, r3, #4
 8005624:	693a      	ldr	r2, [r7, #16]
 8005626:	4313      	orrs	r3, r2
 8005628:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800562a:	683b      	ldr	r3, [r7, #0]
 800562c:	699b      	ldr	r3, [r3, #24]
 800562e:	011b      	lsls	r3, r3, #4
 8005630:	693a      	ldr	r2, [r7, #16]
 8005632:	4313      	orrs	r3, r2
 8005634:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	693a      	ldr	r2, [r7, #16]
 800563a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	68fa      	ldr	r2, [r7, #12]
 8005640:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005642:	683b      	ldr	r3, [r7, #0]
 8005644:	685a      	ldr	r2, [r3, #4]
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	697a      	ldr	r2, [r7, #20]
 800564e:	621a      	str	r2, [r3, #32]
}
 8005650:	bf00      	nop
 8005652:	371c      	adds	r7, #28
 8005654:	46bd      	mov	sp, r7
 8005656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800565a:	4770      	bx	lr
 800565c:	40010000 	.word	0x40010000
 8005660:	40010400 	.word	0x40010400

08005664 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005664:	b480      	push	{r7}
 8005666:	b087      	sub	sp, #28
 8005668:	af00      	add	r7, sp, #0
 800566a:	6078      	str	r0, [r7, #4]
 800566c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	6a1b      	ldr	r3, [r3, #32]
 8005672:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	6a1b      	ldr	r3, [r3, #32]
 800567e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	685b      	ldr	r3, [r3, #4]
 8005684:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	69db      	ldr	r3, [r3, #28]
 800568a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005692:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800569a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800569c:	683b      	ldr	r3, [r7, #0]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	021b      	lsls	r3, r3, #8
 80056a2:	68fa      	ldr	r2, [r7, #12]
 80056a4:	4313      	orrs	r3, r2
 80056a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80056a8:	693b      	ldr	r3, [r7, #16]
 80056aa:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80056ae:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80056b0:	683b      	ldr	r3, [r7, #0]
 80056b2:	689b      	ldr	r3, [r3, #8]
 80056b4:	031b      	lsls	r3, r3, #12
 80056b6:	693a      	ldr	r2, [r7, #16]
 80056b8:	4313      	orrs	r3, r2
 80056ba:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	4a12      	ldr	r2, [pc, #72]	@ (8005708 <TIM_OC4_SetConfig+0xa4>)
 80056c0:	4293      	cmp	r3, r2
 80056c2:	d003      	beq.n	80056cc <TIM_OC4_SetConfig+0x68>
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	4a11      	ldr	r2, [pc, #68]	@ (800570c <TIM_OC4_SetConfig+0xa8>)
 80056c8:	4293      	cmp	r3, r2
 80056ca:	d109      	bne.n	80056e0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80056cc:	697b      	ldr	r3, [r7, #20]
 80056ce:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80056d2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80056d4:	683b      	ldr	r3, [r7, #0]
 80056d6:	695b      	ldr	r3, [r3, #20]
 80056d8:	019b      	lsls	r3, r3, #6
 80056da:	697a      	ldr	r2, [r7, #20]
 80056dc:	4313      	orrs	r3, r2
 80056de:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	697a      	ldr	r2, [r7, #20]
 80056e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	68fa      	ldr	r2, [r7, #12]
 80056ea:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80056ec:	683b      	ldr	r3, [r7, #0]
 80056ee:	685a      	ldr	r2, [r3, #4]
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	693a      	ldr	r2, [r7, #16]
 80056f8:	621a      	str	r2, [r3, #32]
}
 80056fa:	bf00      	nop
 80056fc:	371c      	adds	r7, #28
 80056fe:	46bd      	mov	sp, r7
 8005700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005704:	4770      	bx	lr
 8005706:	bf00      	nop
 8005708:	40010000 	.word	0x40010000
 800570c:	40010400 	.word	0x40010400

08005710 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005710:	b480      	push	{r7}
 8005712:	b087      	sub	sp, #28
 8005714:	af00      	add	r7, sp, #0
 8005716:	60f8      	str	r0, [r7, #12]
 8005718:	60b9      	str	r1, [r7, #8]
 800571a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	6a1b      	ldr	r3, [r3, #32]
 8005720:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	6a1b      	ldr	r3, [r3, #32]
 8005726:	f023 0201 	bic.w	r2, r3, #1
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	699b      	ldr	r3, [r3, #24]
 8005732:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005734:	693b      	ldr	r3, [r7, #16]
 8005736:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800573a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	011b      	lsls	r3, r3, #4
 8005740:	693a      	ldr	r2, [r7, #16]
 8005742:	4313      	orrs	r3, r2
 8005744:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005746:	697b      	ldr	r3, [r7, #20]
 8005748:	f023 030a 	bic.w	r3, r3, #10
 800574c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800574e:	697a      	ldr	r2, [r7, #20]
 8005750:	68bb      	ldr	r3, [r7, #8]
 8005752:	4313      	orrs	r3, r2
 8005754:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	693a      	ldr	r2, [r7, #16]
 800575a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	697a      	ldr	r2, [r7, #20]
 8005760:	621a      	str	r2, [r3, #32]
}
 8005762:	bf00      	nop
 8005764:	371c      	adds	r7, #28
 8005766:	46bd      	mov	sp, r7
 8005768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800576c:	4770      	bx	lr

0800576e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800576e:	b480      	push	{r7}
 8005770:	b087      	sub	sp, #28
 8005772:	af00      	add	r7, sp, #0
 8005774:	60f8      	str	r0, [r7, #12]
 8005776:	60b9      	str	r1, [r7, #8]
 8005778:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	6a1b      	ldr	r3, [r3, #32]
 800577e:	f023 0210 	bic.w	r2, r3, #16
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	699b      	ldr	r3, [r3, #24]
 800578a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	6a1b      	ldr	r3, [r3, #32]
 8005790:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005792:	697b      	ldr	r3, [r7, #20]
 8005794:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005798:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	031b      	lsls	r3, r3, #12
 800579e:	697a      	ldr	r2, [r7, #20]
 80057a0:	4313      	orrs	r3, r2
 80057a2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80057a4:	693b      	ldr	r3, [r7, #16]
 80057a6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80057aa:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80057ac:	68bb      	ldr	r3, [r7, #8]
 80057ae:	011b      	lsls	r3, r3, #4
 80057b0:	693a      	ldr	r2, [r7, #16]
 80057b2:	4313      	orrs	r3, r2
 80057b4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	697a      	ldr	r2, [r7, #20]
 80057ba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	693a      	ldr	r2, [r7, #16]
 80057c0:	621a      	str	r2, [r3, #32]
}
 80057c2:	bf00      	nop
 80057c4:	371c      	adds	r7, #28
 80057c6:	46bd      	mov	sp, r7
 80057c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057cc:	4770      	bx	lr

080057ce <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80057ce:	b480      	push	{r7}
 80057d0:	b085      	sub	sp, #20
 80057d2:	af00      	add	r7, sp, #0
 80057d4:	6078      	str	r0, [r7, #4]
 80057d6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	689b      	ldr	r3, [r3, #8]
 80057dc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80057e4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80057e6:	683a      	ldr	r2, [r7, #0]
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	4313      	orrs	r3, r2
 80057ec:	f043 0307 	orr.w	r3, r3, #7
 80057f0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	68fa      	ldr	r2, [r7, #12]
 80057f6:	609a      	str	r2, [r3, #8]
}
 80057f8:	bf00      	nop
 80057fa:	3714      	adds	r7, #20
 80057fc:	46bd      	mov	sp, r7
 80057fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005802:	4770      	bx	lr

08005804 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005804:	b480      	push	{r7}
 8005806:	b087      	sub	sp, #28
 8005808:	af00      	add	r7, sp, #0
 800580a:	60f8      	str	r0, [r7, #12]
 800580c:	60b9      	str	r1, [r7, #8]
 800580e:	607a      	str	r2, [r7, #4]
 8005810:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	689b      	ldr	r3, [r3, #8]
 8005816:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005818:	697b      	ldr	r3, [r7, #20]
 800581a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800581e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005820:	683b      	ldr	r3, [r7, #0]
 8005822:	021a      	lsls	r2, r3, #8
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	431a      	orrs	r2, r3
 8005828:	68bb      	ldr	r3, [r7, #8]
 800582a:	4313      	orrs	r3, r2
 800582c:	697a      	ldr	r2, [r7, #20]
 800582e:	4313      	orrs	r3, r2
 8005830:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	697a      	ldr	r2, [r7, #20]
 8005836:	609a      	str	r2, [r3, #8]
}
 8005838:	bf00      	nop
 800583a:	371c      	adds	r7, #28
 800583c:	46bd      	mov	sp, r7
 800583e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005842:	4770      	bx	lr

08005844 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005844:	b480      	push	{r7}
 8005846:	b085      	sub	sp, #20
 8005848:	af00      	add	r7, sp, #0
 800584a:	6078      	str	r0, [r7, #4]
 800584c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005854:	2b01      	cmp	r3, #1
 8005856:	d101      	bne.n	800585c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005858:	2302      	movs	r3, #2
 800585a:	e05a      	b.n	8005912 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	2201      	movs	r2, #1
 8005860:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	2202      	movs	r2, #2
 8005868:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	685b      	ldr	r3, [r3, #4]
 8005872:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	689b      	ldr	r3, [r3, #8]
 800587a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005882:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005884:	683b      	ldr	r3, [r7, #0]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	68fa      	ldr	r2, [r7, #12]
 800588a:	4313      	orrs	r3, r2
 800588c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	68fa      	ldr	r2, [r7, #12]
 8005894:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	4a21      	ldr	r2, [pc, #132]	@ (8005920 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800589c:	4293      	cmp	r3, r2
 800589e:	d022      	beq.n	80058e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80058a8:	d01d      	beq.n	80058e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	4a1d      	ldr	r2, [pc, #116]	@ (8005924 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80058b0:	4293      	cmp	r3, r2
 80058b2:	d018      	beq.n	80058e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	4a1b      	ldr	r2, [pc, #108]	@ (8005928 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80058ba:	4293      	cmp	r3, r2
 80058bc:	d013      	beq.n	80058e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	4a1a      	ldr	r2, [pc, #104]	@ (800592c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80058c4:	4293      	cmp	r3, r2
 80058c6:	d00e      	beq.n	80058e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	4a18      	ldr	r2, [pc, #96]	@ (8005930 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80058ce:	4293      	cmp	r3, r2
 80058d0:	d009      	beq.n	80058e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	4a17      	ldr	r2, [pc, #92]	@ (8005934 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80058d8:	4293      	cmp	r3, r2
 80058da:	d004      	beq.n	80058e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	4a15      	ldr	r2, [pc, #84]	@ (8005938 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80058e2:	4293      	cmp	r3, r2
 80058e4:	d10c      	bne.n	8005900 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80058e6:	68bb      	ldr	r3, [r7, #8]
 80058e8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80058ec:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80058ee:	683b      	ldr	r3, [r7, #0]
 80058f0:	685b      	ldr	r3, [r3, #4]
 80058f2:	68ba      	ldr	r2, [r7, #8]
 80058f4:	4313      	orrs	r3, r2
 80058f6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	68ba      	ldr	r2, [r7, #8]
 80058fe:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	2201      	movs	r2, #1
 8005904:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	2200      	movs	r2, #0
 800590c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005910:	2300      	movs	r3, #0
}
 8005912:	4618      	mov	r0, r3
 8005914:	3714      	adds	r7, #20
 8005916:	46bd      	mov	sp, r7
 8005918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800591c:	4770      	bx	lr
 800591e:	bf00      	nop
 8005920:	40010000 	.word	0x40010000
 8005924:	40000400 	.word	0x40000400
 8005928:	40000800 	.word	0x40000800
 800592c:	40000c00 	.word	0x40000c00
 8005930:	40010400 	.word	0x40010400
 8005934:	40014000 	.word	0x40014000
 8005938:	40001800 	.word	0x40001800

0800593c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800593c:	b480      	push	{r7}
 800593e:	b083      	sub	sp, #12
 8005940:	af00      	add	r7, sp, #0
 8005942:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005944:	bf00      	nop
 8005946:	370c      	adds	r7, #12
 8005948:	46bd      	mov	sp, r7
 800594a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800594e:	4770      	bx	lr

08005950 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005950:	b480      	push	{r7}
 8005952:	b083      	sub	sp, #12
 8005954:	af00      	add	r7, sp, #0
 8005956:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005958:	bf00      	nop
 800595a:	370c      	adds	r7, #12
 800595c:	46bd      	mov	sp, r7
 800595e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005962:	4770      	bx	lr

08005964 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005964:	b580      	push	{r7, lr}
 8005966:	b082      	sub	sp, #8
 8005968:	af00      	add	r7, sp, #0
 800596a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	2b00      	cmp	r3, #0
 8005970:	d101      	bne.n	8005976 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005972:	2301      	movs	r3, #1
 8005974:	e03f      	b.n	80059f6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800597c:	b2db      	uxtb	r3, r3
 800597e:	2b00      	cmp	r3, #0
 8005980:	d106      	bne.n	8005990 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	2200      	movs	r2, #0
 8005986:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800598a:	6878      	ldr	r0, [r7, #4]
 800598c:	f7fc fa60 	bl	8001e50 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	2224      	movs	r2, #36	@ 0x24
 8005994:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	68da      	ldr	r2, [r3, #12]
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80059a6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80059a8:	6878      	ldr	r0, [r7, #4]
 80059aa:	f000 fddb 	bl	8006564 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	691a      	ldr	r2, [r3, #16]
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80059bc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	695a      	ldr	r2, [r3, #20]
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80059cc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	68da      	ldr	r2, [r3, #12]
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80059dc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	2200      	movs	r2, #0
 80059e2:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->gState = HAL_UART_STATE_READY;
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	2220      	movs	r2, #32
 80059e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	2220      	movs	r2, #32
 80059f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80059f4:	2300      	movs	r3, #0
}
 80059f6:	4618      	mov	r0, r3
 80059f8:	3708      	adds	r7, #8
 80059fa:	46bd      	mov	sp, r7
 80059fc:	bd80      	pop	{r7, pc}

080059fe <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80059fe:	b580      	push	{r7, lr}
 8005a00:	b08a      	sub	sp, #40	@ 0x28
 8005a02:	af02      	add	r7, sp, #8
 8005a04:	60f8      	str	r0, [r7, #12]
 8005a06:	60b9      	str	r1, [r7, #8]
 8005a08:	603b      	str	r3, [r7, #0]
 8005a0a:	4613      	mov	r3, r2
 8005a0c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005a0e:	2300      	movs	r3, #0
 8005a10:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005a18:	b2db      	uxtb	r3, r3
 8005a1a:	2b20      	cmp	r3, #32
 8005a1c:	d17c      	bne.n	8005b18 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005a1e:	68bb      	ldr	r3, [r7, #8]
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d002      	beq.n	8005a2a <HAL_UART_Transmit+0x2c>
 8005a24:	88fb      	ldrh	r3, [r7, #6]
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d101      	bne.n	8005a2e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005a2a:	2301      	movs	r3, #1
 8005a2c:	e075      	b.n	8005b1a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005a34:	2b01      	cmp	r3, #1
 8005a36:	d101      	bne.n	8005a3c <HAL_UART_Transmit+0x3e>
 8005a38:	2302      	movs	r3, #2
 8005a3a:	e06e      	b.n	8005b1a <HAL_UART_Transmit+0x11c>
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	2201      	movs	r2, #1
 8005a40:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	2200      	movs	r2, #0
 8005a48:	641a      	str	r2, [r3, #64]	@ 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	2221      	movs	r2, #33	@ 0x21
 8005a4e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005a52:	f7fc fb19 	bl	8002088 <HAL_GetTick>
 8005a56:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	88fa      	ldrh	r2, [r7, #6]
 8005a5c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	88fa      	ldrh	r2, [r7, #6]
 8005a62:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	689b      	ldr	r3, [r3, #8]
 8005a68:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005a6c:	d108      	bne.n	8005a80 <HAL_UART_Transmit+0x82>
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	691b      	ldr	r3, [r3, #16]
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d104      	bne.n	8005a80 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8005a76:	2300      	movs	r3, #0
 8005a78:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005a7a:	68bb      	ldr	r3, [r7, #8]
 8005a7c:	61bb      	str	r3, [r7, #24]
 8005a7e:	e003      	b.n	8005a88 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005a80:	68bb      	ldr	r3, [r7, #8]
 8005a82:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005a84:	2300      	movs	r3, #0
 8005a86:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	2200      	movs	r2, #0
 8005a8c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    while (huart->TxXferCount > 0U)
 8005a90:	e02a      	b.n	8005ae8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005a92:	683b      	ldr	r3, [r7, #0]
 8005a94:	9300      	str	r3, [sp, #0]
 8005a96:	697b      	ldr	r3, [r7, #20]
 8005a98:	2200      	movs	r2, #0
 8005a9a:	2180      	movs	r1, #128	@ 0x80
 8005a9c:	68f8      	ldr	r0, [r7, #12]
 8005a9e:	f000 fb1f 	bl	80060e0 <UART_WaitOnFlagUntilTimeout>
 8005aa2:	4603      	mov	r3, r0
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d001      	beq.n	8005aac <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005aa8:	2303      	movs	r3, #3
 8005aaa:	e036      	b.n	8005b1a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005aac:	69fb      	ldr	r3, [r7, #28]
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d10b      	bne.n	8005aca <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005ab2:	69bb      	ldr	r3, [r7, #24]
 8005ab4:	881b      	ldrh	r3, [r3, #0]
 8005ab6:	461a      	mov	r2, r3
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005ac0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005ac2:	69bb      	ldr	r3, [r7, #24]
 8005ac4:	3302      	adds	r3, #2
 8005ac6:	61bb      	str	r3, [r7, #24]
 8005ac8:	e007      	b.n	8005ada <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005aca:	69fb      	ldr	r3, [r7, #28]
 8005acc:	781a      	ldrb	r2, [r3, #0]
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005ad4:	69fb      	ldr	r3, [r7, #28]
 8005ad6:	3301      	adds	r3, #1
 8005ad8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005ade:	b29b      	uxth	r3, r3
 8005ae0:	3b01      	subs	r3, #1
 8005ae2:	b29a      	uxth	r2, r3
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005aec:	b29b      	uxth	r3, r3
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d1cf      	bne.n	8005a92 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005af2:	683b      	ldr	r3, [r7, #0]
 8005af4:	9300      	str	r3, [sp, #0]
 8005af6:	697b      	ldr	r3, [r7, #20]
 8005af8:	2200      	movs	r2, #0
 8005afa:	2140      	movs	r1, #64	@ 0x40
 8005afc:	68f8      	ldr	r0, [r7, #12]
 8005afe:	f000 faef 	bl	80060e0 <UART_WaitOnFlagUntilTimeout>
 8005b02:	4603      	mov	r3, r0
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d001      	beq.n	8005b0c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005b08:	2303      	movs	r3, #3
 8005b0a:	e006      	b.n	8005b1a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	2220      	movs	r2, #32
 8005b10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 8005b14:	2300      	movs	r3, #0
 8005b16:	e000      	b.n	8005b1a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005b18:	2302      	movs	r3, #2
  }
}
 8005b1a:	4618      	mov	r0, r3
 8005b1c:	3720      	adds	r7, #32
 8005b1e:	46bd      	mov	sp, r7
 8005b20:	bd80      	pop	{r7, pc}

08005b22 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005b22:	b580      	push	{r7, lr}
 8005b24:	b084      	sub	sp, #16
 8005b26:	af00      	add	r7, sp, #0
 8005b28:	60f8      	str	r0, [r7, #12]
 8005b2a:	60b9      	str	r1, [r7, #8]
 8005b2c:	4613      	mov	r3, r2
 8005b2e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005b36:	b2db      	uxtb	r3, r3
 8005b38:	2b20      	cmp	r3, #32
 8005b3a:	d11d      	bne.n	8005b78 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8005b3c:	68bb      	ldr	r3, [r7, #8]
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d002      	beq.n	8005b48 <HAL_UART_Receive_IT+0x26>
 8005b42:	88fb      	ldrh	r3, [r7, #6]
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d101      	bne.n	8005b4c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005b48:	2301      	movs	r3, #1
 8005b4a:	e016      	b.n	8005b7a <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005b52:	2b01      	cmp	r3, #1
 8005b54:	d101      	bne.n	8005b5a <HAL_UART_Receive_IT+0x38>
 8005b56:	2302      	movs	r3, #2
 8005b58:	e00f      	b.n	8005b7a <HAL_UART_Receive_IT+0x58>
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	2201      	movs	r2, #1
 8005b5e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	2200      	movs	r2, #0
 8005b66:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005b68:	88fb      	ldrh	r3, [r7, #6]
 8005b6a:	461a      	mov	r2, r3
 8005b6c:	68b9      	ldr	r1, [r7, #8]
 8005b6e:	68f8      	ldr	r0, [r7, #12]
 8005b70:	f000 fb24 	bl	80061bc <UART_Start_Receive_IT>
 8005b74:	4603      	mov	r3, r0
 8005b76:	e000      	b.n	8005b7a <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8005b78:	2302      	movs	r3, #2
  }
}
 8005b7a:	4618      	mov	r0, r3
 8005b7c:	3710      	adds	r7, #16
 8005b7e:	46bd      	mov	sp, r7
 8005b80:	bd80      	pop	{r7, pc}
	...

08005b84 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005b84:	b580      	push	{r7, lr}
 8005b86:	b0ba      	sub	sp, #232	@ 0xe8
 8005b88:	af00      	add	r7, sp, #0
 8005b8a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	68db      	ldr	r3, [r3, #12]
 8005b9c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	695b      	ldr	r3, [r3, #20]
 8005ba6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8005baa:	2300      	movs	r3, #0
 8005bac:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8005bb0:	2300      	movs	r3, #0
 8005bb2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005bb6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005bba:	f003 030f 	and.w	r3, r3, #15
 8005bbe:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8005bc2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d10f      	bne.n	8005bea <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005bca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005bce:	f003 0320 	and.w	r3, r3, #32
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d009      	beq.n	8005bea <HAL_UART_IRQHandler+0x66>
 8005bd6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005bda:	f003 0320 	and.w	r3, r3, #32
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d003      	beq.n	8005bea <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005be2:	6878      	ldr	r0, [r7, #4]
 8005be4:	f000 fc03 	bl	80063ee <UART_Receive_IT>
      return;
 8005be8:	e256      	b.n	8006098 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005bea:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	f000 80de 	beq.w	8005db0 <HAL_UART_IRQHandler+0x22c>
 8005bf4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005bf8:	f003 0301 	and.w	r3, r3, #1
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d106      	bne.n	8005c0e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005c00:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005c04:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	f000 80d1 	beq.w	8005db0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005c0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005c12:	f003 0301 	and.w	r3, r3, #1
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d00b      	beq.n	8005c32 <HAL_UART_IRQHandler+0xae>
 8005c1a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005c1e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d005      	beq.n	8005c32 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c2a:	f043 0201 	orr.w	r2, r3, #1
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005c32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005c36:	f003 0304 	and.w	r3, r3, #4
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d00b      	beq.n	8005c56 <HAL_UART_IRQHandler+0xd2>
 8005c3e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005c42:	f003 0301 	and.w	r3, r3, #1
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d005      	beq.n	8005c56 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c4e:	f043 0202 	orr.w	r2, r3, #2
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005c56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005c5a:	f003 0302 	and.w	r3, r3, #2
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d00b      	beq.n	8005c7a <HAL_UART_IRQHandler+0xf6>
 8005c62:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005c66:	f003 0301 	and.w	r3, r3, #1
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d005      	beq.n	8005c7a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c72:	f043 0204 	orr.w	r2, r3, #4
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005c7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005c7e:	f003 0308 	and.w	r3, r3, #8
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d011      	beq.n	8005caa <HAL_UART_IRQHandler+0x126>
 8005c86:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005c8a:	f003 0320 	and.w	r3, r3, #32
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d105      	bne.n	8005c9e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005c92:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005c96:	f003 0301 	and.w	r3, r3, #1
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d005      	beq.n	8005caa <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ca2:	f043 0208 	orr.w	r2, r3, #8
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	f000 81ed 	beq.w	800608e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005cb4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005cb8:	f003 0320 	and.w	r3, r3, #32
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d008      	beq.n	8005cd2 <HAL_UART_IRQHandler+0x14e>
 8005cc0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005cc4:	f003 0320 	and.w	r3, r3, #32
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d002      	beq.n	8005cd2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005ccc:	6878      	ldr	r0, [r7, #4]
 8005cce:	f000 fb8e 	bl	80063ee <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	695b      	ldr	r3, [r3, #20]
 8005cd8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005cdc:	2b40      	cmp	r3, #64	@ 0x40
 8005cde:	bf0c      	ite	eq
 8005ce0:	2301      	moveq	r3, #1
 8005ce2:	2300      	movne	r3, #0
 8005ce4:	b2db      	uxtb	r3, r3
 8005ce6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005cee:	f003 0308 	and.w	r3, r3, #8
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d103      	bne.n	8005cfe <HAL_UART_IRQHandler+0x17a>
 8005cf6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d04f      	beq.n	8005d9e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005cfe:	6878      	ldr	r0, [r7, #4]
 8005d00:	f000 fa96 	bl	8006230 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	695b      	ldr	r3, [r3, #20]
 8005d0a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d0e:	2b40      	cmp	r3, #64	@ 0x40
 8005d10:	d141      	bne.n	8005d96 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	3314      	adds	r3, #20
 8005d18:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d1c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005d20:	e853 3f00 	ldrex	r3, [r3]
 8005d24:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8005d28:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005d2c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005d30:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	3314      	adds	r3, #20
 8005d3a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8005d3e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8005d42:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d46:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8005d4a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8005d4e:	e841 2300 	strex	r3, r2, [r1]
 8005d52:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8005d56:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d1d9      	bne.n	8005d12 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d013      	beq.n	8005d8e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d6a:	4a7d      	ldr	r2, [pc, #500]	@ (8005f60 <HAL_UART_IRQHandler+0x3dc>)
 8005d6c:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d72:	4618      	mov	r0, r3
 8005d74:	f7fc fe4a 	bl	8002a0c <HAL_DMA_Abort_IT>
 8005d78:	4603      	mov	r3, r0
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d016      	beq.n	8005dac <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d82:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005d84:	687a      	ldr	r2, [r7, #4]
 8005d86:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8005d88:	4610      	mov	r0, r2
 8005d8a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d8c:	e00e      	b.n	8005dac <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005d8e:	6878      	ldr	r0, [r7, #4]
 8005d90:	f000 f990 	bl	80060b4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d94:	e00a      	b.n	8005dac <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005d96:	6878      	ldr	r0, [r7, #4]
 8005d98:	f000 f98c 	bl	80060b4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d9c:	e006      	b.n	8005dac <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005d9e:	6878      	ldr	r0, [r7, #4]
 8005da0:	f000 f988 	bl	80060b4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	2200      	movs	r2, #0
 8005da8:	641a      	str	r2, [r3, #64]	@ 0x40
      }
    }
    return;
 8005daa:	e170      	b.n	800608e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005dac:	bf00      	nop
    return;
 8005dae:	e16e      	b.n	800608e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005db4:	2b01      	cmp	r3, #1
 8005db6:	f040 814a 	bne.w	800604e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005dba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005dbe:	f003 0310 	and.w	r3, r3, #16
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	f000 8143 	beq.w	800604e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005dc8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005dcc:	f003 0310 	and.w	r3, r3, #16
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	f000 813c 	beq.w	800604e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005dd6:	2300      	movs	r3, #0
 8005dd8:	60bb      	str	r3, [r7, #8]
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	60bb      	str	r3, [r7, #8]
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	685b      	ldr	r3, [r3, #4]
 8005de8:	60bb      	str	r3, [r7, #8]
 8005dea:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	695b      	ldr	r3, [r3, #20]
 8005df2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005df6:	2b40      	cmp	r3, #64	@ 0x40
 8005df8:	f040 80b4 	bne.w	8005f64 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	685b      	ldr	r3, [r3, #4]
 8005e04:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005e08:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	f000 8140 	beq.w	8006092 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005e16:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005e1a:	429a      	cmp	r2, r3
 8005e1c:	f080 8139 	bcs.w	8006092 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005e26:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e2c:	69db      	ldr	r3, [r3, #28]
 8005e2e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005e32:	f000 8088 	beq.w	8005f46 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	330c      	adds	r3, #12
 8005e3c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e40:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005e44:	e853 3f00 	ldrex	r3, [r3]
 8005e48:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005e4c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005e50:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005e54:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	330c      	adds	r3, #12
 8005e5e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8005e62:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005e66:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e6a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8005e6e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005e72:	e841 2300 	strex	r3, r2, [r1]
 8005e76:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8005e7a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d1d9      	bne.n	8005e36 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	3314      	adds	r3, #20
 8005e88:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e8a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005e8c:	e853 3f00 	ldrex	r3, [r3]
 8005e90:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8005e92:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005e94:	f023 0301 	bic.w	r3, r3, #1
 8005e98:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	3314      	adds	r3, #20
 8005ea2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005ea6:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8005eaa:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005eac:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8005eae:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8005eb2:	e841 2300 	strex	r3, r2, [r1]
 8005eb6:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005eb8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d1e1      	bne.n	8005e82 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	3314      	adds	r3, #20
 8005ec4:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ec6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005ec8:	e853 3f00 	ldrex	r3, [r3]
 8005ecc:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8005ece:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005ed0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005ed4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	3314      	adds	r3, #20
 8005ede:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8005ee2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005ee4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ee6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005ee8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005eea:	e841 2300 	strex	r3, r2, [r1]
 8005eee:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005ef0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d1e3      	bne.n	8005ebe <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	2220      	movs	r2, #32
 8005efa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	2200      	movs	r2, #0
 8005f02:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	330c      	adds	r3, #12
 8005f0a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f0c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005f0e:	e853 3f00 	ldrex	r3, [r3]
 8005f12:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005f14:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005f16:	f023 0310 	bic.w	r3, r3, #16
 8005f1a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	330c      	adds	r3, #12
 8005f24:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8005f28:	65ba      	str	r2, [r7, #88]	@ 0x58
 8005f2a:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f2c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005f2e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005f30:	e841 2300 	strex	r3, r2, [r1]
 8005f34:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005f36:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d1e3      	bne.n	8005f04 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f40:	4618      	mov	r0, r3
 8005f42:	f7fc fcf3 	bl	800292c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005f4e:	b29b      	uxth	r3, r3
 8005f50:	1ad3      	subs	r3, r2, r3
 8005f52:	b29b      	uxth	r3, r3
 8005f54:	4619      	mov	r1, r3
 8005f56:	6878      	ldr	r0, [r7, #4]
 8005f58:	f000 f8b6 	bl	80060c8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005f5c:	e099      	b.n	8006092 <HAL_UART_IRQHandler+0x50e>
 8005f5e:	bf00      	nop
 8005f60:	080062f7 	.word	0x080062f7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005f6c:	b29b      	uxth	r3, r3
 8005f6e:	1ad3      	subs	r3, r2, r3
 8005f70:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005f78:	b29b      	uxth	r3, r3
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	f000 808b 	beq.w	8006096 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8005f80:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	f000 8086 	beq.w	8006096 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	330c      	adds	r3, #12
 8005f90:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f94:	e853 3f00 	ldrex	r3, [r3]
 8005f98:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005f9a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005f9c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005fa0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	330c      	adds	r3, #12
 8005faa:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8005fae:	647a      	str	r2, [r7, #68]	@ 0x44
 8005fb0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fb2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005fb4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005fb6:	e841 2300 	strex	r3, r2, [r1]
 8005fba:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005fbc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d1e3      	bne.n	8005f8a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	3314      	adds	r3, #20
 8005fc8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fcc:	e853 3f00 	ldrex	r3, [r3]
 8005fd0:	623b      	str	r3, [r7, #32]
   return(result);
 8005fd2:	6a3b      	ldr	r3, [r7, #32]
 8005fd4:	f023 0301 	bic.w	r3, r3, #1
 8005fd8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	3314      	adds	r3, #20
 8005fe2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8005fe6:	633a      	str	r2, [r7, #48]	@ 0x30
 8005fe8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fea:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005fec:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005fee:	e841 2300 	strex	r3, r2, [r1]
 8005ff2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005ff4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d1e3      	bne.n	8005fc2 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	2220      	movs	r2, #32
 8005ffe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	2200      	movs	r2, #0
 8006006:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	330c      	adds	r3, #12
 800600e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006010:	693b      	ldr	r3, [r7, #16]
 8006012:	e853 3f00 	ldrex	r3, [r3]
 8006016:	60fb      	str	r3, [r7, #12]
   return(result);
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	f023 0310 	bic.w	r3, r3, #16
 800601e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	330c      	adds	r3, #12
 8006028:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800602c:	61fa      	str	r2, [r7, #28]
 800602e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006030:	69b9      	ldr	r1, [r7, #24]
 8006032:	69fa      	ldr	r2, [r7, #28]
 8006034:	e841 2300 	strex	r3, r2, [r1]
 8006038:	617b      	str	r3, [r7, #20]
   return(result);
 800603a:	697b      	ldr	r3, [r7, #20]
 800603c:	2b00      	cmp	r3, #0
 800603e:	d1e3      	bne.n	8006008 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006040:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006044:	4619      	mov	r1, r3
 8006046:	6878      	ldr	r0, [r7, #4]
 8006048:	f000 f83e 	bl	80060c8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800604c:	e023      	b.n	8006096 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800604e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006052:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006056:	2b00      	cmp	r3, #0
 8006058:	d009      	beq.n	800606e <HAL_UART_IRQHandler+0x4ea>
 800605a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800605e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006062:	2b00      	cmp	r3, #0
 8006064:	d003      	beq.n	800606e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8006066:	6878      	ldr	r0, [r7, #4]
 8006068:	f000 f959 	bl	800631e <UART_Transmit_IT>
    return;
 800606c:	e014      	b.n	8006098 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800606e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006072:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006076:	2b00      	cmp	r3, #0
 8006078:	d00e      	beq.n	8006098 <HAL_UART_IRQHandler+0x514>
 800607a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800607e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006082:	2b00      	cmp	r3, #0
 8006084:	d008      	beq.n	8006098 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8006086:	6878      	ldr	r0, [r7, #4]
 8006088:	f000 f999 	bl	80063be <UART_EndTransmit_IT>
    return;
 800608c:	e004      	b.n	8006098 <HAL_UART_IRQHandler+0x514>
    return;
 800608e:	bf00      	nop
 8006090:	e002      	b.n	8006098 <HAL_UART_IRQHandler+0x514>
      return;
 8006092:	bf00      	nop
 8006094:	e000      	b.n	8006098 <HAL_UART_IRQHandler+0x514>
      return;
 8006096:	bf00      	nop
  }
}
 8006098:	37e8      	adds	r7, #232	@ 0xe8
 800609a:	46bd      	mov	sp, r7
 800609c:	bd80      	pop	{r7, pc}
 800609e:	bf00      	nop

080060a0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80060a0:	b480      	push	{r7}
 80060a2:	b083      	sub	sp, #12
 80060a4:	af00      	add	r7, sp, #0
 80060a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80060a8:	bf00      	nop
 80060aa:	370c      	adds	r7, #12
 80060ac:	46bd      	mov	sp, r7
 80060ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b2:	4770      	bx	lr

080060b4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80060b4:	b480      	push	{r7}
 80060b6:	b083      	sub	sp, #12
 80060b8:	af00      	add	r7, sp, #0
 80060ba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80060bc:	bf00      	nop
 80060be:	370c      	adds	r7, #12
 80060c0:	46bd      	mov	sp, r7
 80060c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c6:	4770      	bx	lr

080060c8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80060c8:	b480      	push	{r7}
 80060ca:	b083      	sub	sp, #12
 80060cc:	af00      	add	r7, sp, #0
 80060ce:	6078      	str	r0, [r7, #4]
 80060d0:	460b      	mov	r3, r1
 80060d2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80060d4:	bf00      	nop
 80060d6:	370c      	adds	r7, #12
 80060d8:	46bd      	mov	sp, r7
 80060da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060de:	4770      	bx	lr

080060e0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80060e0:	b580      	push	{r7, lr}
 80060e2:	b090      	sub	sp, #64	@ 0x40
 80060e4:	af00      	add	r7, sp, #0
 80060e6:	60f8      	str	r0, [r7, #12]
 80060e8:	60b9      	str	r1, [r7, #8]
 80060ea:	603b      	str	r3, [r7, #0]
 80060ec:	4613      	mov	r3, r2
 80060ee:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80060f0:	e050      	b.n	8006194 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80060f2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80060f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060f8:	d04c      	beq.n	8006194 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80060fa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d007      	beq.n	8006110 <UART_WaitOnFlagUntilTimeout+0x30>
 8006100:	f7fb ffc2 	bl	8002088 <HAL_GetTick>
 8006104:	4602      	mov	r2, r0
 8006106:	683b      	ldr	r3, [r7, #0]
 8006108:	1ad3      	subs	r3, r2, r3
 800610a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800610c:	429a      	cmp	r2, r3
 800610e:	d241      	bcs.n	8006194 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	330c      	adds	r3, #12
 8006116:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006118:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800611a:	e853 3f00 	ldrex	r3, [r3]
 800611e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006120:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006122:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8006126:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	330c      	adds	r3, #12
 800612e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8006130:	637a      	str	r2, [r7, #52]	@ 0x34
 8006132:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006134:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006136:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006138:	e841 2300 	strex	r3, r2, [r1]
 800613c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800613e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006140:	2b00      	cmp	r3, #0
 8006142:	d1e5      	bne.n	8006110 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	3314      	adds	r3, #20
 800614a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800614c:	697b      	ldr	r3, [r7, #20]
 800614e:	e853 3f00 	ldrex	r3, [r3]
 8006152:	613b      	str	r3, [r7, #16]
   return(result);
 8006154:	693b      	ldr	r3, [r7, #16]
 8006156:	f023 0301 	bic.w	r3, r3, #1
 800615a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	3314      	adds	r3, #20
 8006162:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006164:	623a      	str	r2, [r7, #32]
 8006166:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006168:	69f9      	ldr	r1, [r7, #28]
 800616a:	6a3a      	ldr	r2, [r7, #32]
 800616c:	e841 2300 	strex	r3, r2, [r1]
 8006170:	61bb      	str	r3, [r7, #24]
   return(result);
 8006172:	69bb      	ldr	r3, [r7, #24]
 8006174:	2b00      	cmp	r3, #0
 8006176:	d1e5      	bne.n	8006144 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	2220      	movs	r2, #32
 800617c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	2220      	movs	r2, #32
 8006184:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	2200      	movs	r2, #0
 800618c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_TIMEOUT;
 8006190:	2303      	movs	r3, #3
 8006192:	e00f      	b.n	80061b4 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	681a      	ldr	r2, [r3, #0]
 800619a:	68bb      	ldr	r3, [r7, #8]
 800619c:	4013      	ands	r3, r2
 800619e:	68ba      	ldr	r2, [r7, #8]
 80061a0:	429a      	cmp	r2, r3
 80061a2:	bf0c      	ite	eq
 80061a4:	2301      	moveq	r3, #1
 80061a6:	2300      	movne	r3, #0
 80061a8:	b2db      	uxtb	r3, r3
 80061aa:	461a      	mov	r2, r3
 80061ac:	79fb      	ldrb	r3, [r7, #7]
 80061ae:	429a      	cmp	r2, r3
 80061b0:	d09f      	beq.n	80060f2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80061b2:	2300      	movs	r3, #0
}
 80061b4:	4618      	mov	r0, r3
 80061b6:	3740      	adds	r7, #64	@ 0x40
 80061b8:	46bd      	mov	sp, r7
 80061ba:	bd80      	pop	{r7, pc}

080061bc <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80061bc:	b480      	push	{r7}
 80061be:	b085      	sub	sp, #20
 80061c0:	af00      	add	r7, sp, #0
 80061c2:	60f8      	str	r0, [r7, #12]
 80061c4:	60b9      	str	r1, [r7, #8]
 80061c6:	4613      	mov	r3, r2
 80061c8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	68ba      	ldr	r2, [r7, #8]
 80061ce:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	88fa      	ldrh	r2, [r7, #6]
 80061d4:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	88fa      	ldrh	r2, [r7, #6]
 80061da:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	2200      	movs	r2, #0
 80061e0:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	2222      	movs	r2, #34	@ 0x22
 80061e6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	2200      	movs	r2, #0
 80061ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	68da      	ldr	r2, [r3, #12]
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006200:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	695a      	ldr	r2, [r3, #20]
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	f042 0201 	orr.w	r2, r2, #1
 8006210:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	68da      	ldr	r2, [r3, #12]
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	f042 0220 	orr.w	r2, r2, #32
 8006220:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006222:	2300      	movs	r3, #0
}
 8006224:	4618      	mov	r0, r3
 8006226:	3714      	adds	r7, #20
 8006228:	46bd      	mov	sp, r7
 800622a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800622e:	4770      	bx	lr

08006230 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006230:	b480      	push	{r7}
 8006232:	b095      	sub	sp, #84	@ 0x54
 8006234:	af00      	add	r7, sp, #0
 8006236:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	330c      	adds	r3, #12
 800623e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006240:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006242:	e853 3f00 	ldrex	r3, [r3]
 8006246:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006248:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800624a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800624e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	330c      	adds	r3, #12
 8006256:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006258:	643a      	str	r2, [r7, #64]	@ 0x40
 800625a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800625c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800625e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006260:	e841 2300 	strex	r3, r2, [r1]
 8006264:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006266:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006268:	2b00      	cmp	r3, #0
 800626a:	d1e5      	bne.n	8006238 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	3314      	adds	r3, #20
 8006272:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006274:	6a3b      	ldr	r3, [r7, #32]
 8006276:	e853 3f00 	ldrex	r3, [r3]
 800627a:	61fb      	str	r3, [r7, #28]
   return(result);
 800627c:	69fb      	ldr	r3, [r7, #28]
 800627e:	f023 0301 	bic.w	r3, r3, #1
 8006282:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	3314      	adds	r3, #20
 800628a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800628c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800628e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006290:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006292:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006294:	e841 2300 	strex	r3, r2, [r1]
 8006298:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800629a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800629c:	2b00      	cmp	r3, #0
 800629e:	d1e5      	bne.n	800626c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80062a4:	2b01      	cmp	r3, #1
 80062a6:	d119      	bne.n	80062dc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	330c      	adds	r3, #12
 80062ae:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	e853 3f00 	ldrex	r3, [r3]
 80062b6:	60bb      	str	r3, [r7, #8]
   return(result);
 80062b8:	68bb      	ldr	r3, [r7, #8]
 80062ba:	f023 0310 	bic.w	r3, r3, #16
 80062be:	647b      	str	r3, [r7, #68]	@ 0x44
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	330c      	adds	r3, #12
 80062c6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80062c8:	61ba      	str	r2, [r7, #24]
 80062ca:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062cc:	6979      	ldr	r1, [r7, #20]
 80062ce:	69ba      	ldr	r2, [r7, #24]
 80062d0:	e841 2300 	strex	r3, r2, [r1]
 80062d4:	613b      	str	r3, [r7, #16]
   return(result);
 80062d6:	693b      	ldr	r3, [r7, #16]
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d1e5      	bne.n	80062a8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	2220      	movs	r2, #32
 80062e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	2200      	movs	r2, #0
 80062e8:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80062ea:	bf00      	nop
 80062ec:	3754      	adds	r7, #84	@ 0x54
 80062ee:	46bd      	mov	sp, r7
 80062f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f4:	4770      	bx	lr

080062f6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80062f6:	b580      	push	{r7, lr}
 80062f8:	b084      	sub	sp, #16
 80062fa:	af00      	add	r7, sp, #0
 80062fc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006302:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	2200      	movs	r2, #0
 8006308:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	2200      	movs	r2, #0
 800630e:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006310:	68f8      	ldr	r0, [r7, #12]
 8006312:	f7ff fecf 	bl	80060b4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006316:	bf00      	nop
 8006318:	3710      	adds	r7, #16
 800631a:	46bd      	mov	sp, r7
 800631c:	bd80      	pop	{r7, pc}

0800631e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800631e:	b480      	push	{r7}
 8006320:	b085      	sub	sp, #20
 8006322:	af00      	add	r7, sp, #0
 8006324:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800632c:	b2db      	uxtb	r3, r3
 800632e:	2b21      	cmp	r3, #33	@ 0x21
 8006330:	d13e      	bne.n	80063b0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	689b      	ldr	r3, [r3, #8]
 8006336:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800633a:	d114      	bne.n	8006366 <UART_Transmit_IT+0x48>
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	691b      	ldr	r3, [r3, #16]
 8006340:	2b00      	cmp	r3, #0
 8006342:	d110      	bne.n	8006366 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	6a1b      	ldr	r3, [r3, #32]
 8006348:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	881b      	ldrh	r3, [r3, #0]
 800634e:	461a      	mov	r2, r3
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006358:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	6a1b      	ldr	r3, [r3, #32]
 800635e:	1c9a      	adds	r2, r3, #2
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	621a      	str	r2, [r3, #32]
 8006364:	e008      	b.n	8006378 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	6a1b      	ldr	r3, [r3, #32]
 800636a:	1c59      	adds	r1, r3, #1
 800636c:	687a      	ldr	r2, [r7, #4]
 800636e:	6211      	str	r1, [r2, #32]
 8006370:	781a      	ldrb	r2, [r3, #0]
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800637c:	b29b      	uxth	r3, r3
 800637e:	3b01      	subs	r3, #1
 8006380:	b29b      	uxth	r3, r3
 8006382:	687a      	ldr	r2, [r7, #4]
 8006384:	4619      	mov	r1, r3
 8006386:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8006388:	2b00      	cmp	r3, #0
 800638a:	d10f      	bne.n	80063ac <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	68da      	ldr	r2, [r3, #12]
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800639a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	68da      	ldr	r2, [r3, #12]
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80063aa:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80063ac:	2300      	movs	r3, #0
 80063ae:	e000      	b.n	80063b2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80063b0:	2302      	movs	r3, #2
  }
}
 80063b2:	4618      	mov	r0, r3
 80063b4:	3714      	adds	r7, #20
 80063b6:	46bd      	mov	sp, r7
 80063b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063bc:	4770      	bx	lr

080063be <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80063be:	b580      	push	{r7, lr}
 80063c0:	b082      	sub	sp, #8
 80063c2:	af00      	add	r7, sp, #0
 80063c4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	68da      	ldr	r2, [r3, #12]
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80063d4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	2220      	movs	r2, #32
 80063da:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80063de:	6878      	ldr	r0, [r7, #4]
 80063e0:	f7ff fe5e 	bl	80060a0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80063e4:	2300      	movs	r3, #0
}
 80063e6:	4618      	mov	r0, r3
 80063e8:	3708      	adds	r7, #8
 80063ea:	46bd      	mov	sp, r7
 80063ec:	bd80      	pop	{r7, pc}

080063ee <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80063ee:	b580      	push	{r7, lr}
 80063f0:	b08c      	sub	sp, #48	@ 0x30
 80063f2:	af00      	add	r7, sp, #0
 80063f4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80063fc:	b2db      	uxtb	r3, r3
 80063fe:	2b22      	cmp	r3, #34	@ 0x22
 8006400:	f040 80ab 	bne.w	800655a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	689b      	ldr	r3, [r3, #8]
 8006408:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800640c:	d117      	bne.n	800643e <UART_Receive_IT+0x50>
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	691b      	ldr	r3, [r3, #16]
 8006412:	2b00      	cmp	r3, #0
 8006414:	d113      	bne.n	800643e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006416:	2300      	movs	r3, #0
 8006418:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800641e:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	685b      	ldr	r3, [r3, #4]
 8006426:	b29b      	uxth	r3, r3
 8006428:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800642c:	b29a      	uxth	r2, r3
 800642e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006430:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006436:	1c9a      	adds	r2, r3, #2
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	629a      	str	r2, [r3, #40]	@ 0x28
 800643c:	e026      	b.n	800648c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006442:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8006444:	2300      	movs	r3, #0
 8006446:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	689b      	ldr	r3, [r3, #8]
 800644c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006450:	d007      	beq.n	8006462 <UART_Receive_IT+0x74>
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	689b      	ldr	r3, [r3, #8]
 8006456:	2b00      	cmp	r3, #0
 8006458:	d10a      	bne.n	8006470 <UART_Receive_IT+0x82>
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	691b      	ldr	r3, [r3, #16]
 800645e:	2b00      	cmp	r3, #0
 8006460:	d106      	bne.n	8006470 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	685b      	ldr	r3, [r3, #4]
 8006468:	b2da      	uxtb	r2, r3
 800646a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800646c:	701a      	strb	r2, [r3, #0]
 800646e:	e008      	b.n	8006482 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	685b      	ldr	r3, [r3, #4]
 8006476:	b2db      	uxtb	r3, r3
 8006478:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800647c:	b2da      	uxtb	r2, r3
 800647e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006480:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006486:	1c5a      	adds	r2, r3, #1
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006490:	b29b      	uxth	r3, r3
 8006492:	3b01      	subs	r3, #1
 8006494:	b29b      	uxth	r3, r3
 8006496:	687a      	ldr	r2, [r7, #4]
 8006498:	4619      	mov	r1, r3
 800649a:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800649c:	2b00      	cmp	r3, #0
 800649e:	d15a      	bne.n	8006556 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	68da      	ldr	r2, [r3, #12]
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	f022 0220 	bic.w	r2, r2, #32
 80064ae:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	68da      	ldr	r2, [r3, #12]
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80064be:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	695a      	ldr	r2, [r3, #20]
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	f022 0201 	bic.w	r2, r2, #1
 80064ce:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	2220      	movs	r2, #32
 80064d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80064dc:	2b01      	cmp	r3, #1
 80064de:	d135      	bne.n	800654c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	2200      	movs	r2, #0
 80064e4:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	330c      	adds	r3, #12
 80064ec:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064ee:	697b      	ldr	r3, [r7, #20]
 80064f0:	e853 3f00 	ldrex	r3, [r3]
 80064f4:	613b      	str	r3, [r7, #16]
   return(result);
 80064f6:	693b      	ldr	r3, [r7, #16]
 80064f8:	f023 0310 	bic.w	r3, r3, #16
 80064fc:	627b      	str	r3, [r7, #36]	@ 0x24
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	330c      	adds	r3, #12
 8006504:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006506:	623a      	str	r2, [r7, #32]
 8006508:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800650a:	69f9      	ldr	r1, [r7, #28]
 800650c:	6a3a      	ldr	r2, [r7, #32]
 800650e:	e841 2300 	strex	r3, r2, [r1]
 8006512:	61bb      	str	r3, [r7, #24]
   return(result);
 8006514:	69bb      	ldr	r3, [r7, #24]
 8006516:	2b00      	cmp	r3, #0
 8006518:	d1e5      	bne.n	80064e6 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	f003 0310 	and.w	r3, r3, #16
 8006524:	2b10      	cmp	r3, #16
 8006526:	d10a      	bne.n	800653e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006528:	2300      	movs	r3, #0
 800652a:	60fb      	str	r3, [r7, #12]
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	60fb      	str	r3, [r7, #12]
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	685b      	ldr	r3, [r3, #4]
 800653a:	60fb      	str	r3, [r7, #12]
 800653c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006542:	4619      	mov	r1, r3
 8006544:	6878      	ldr	r0, [r7, #4]
 8006546:	f7ff fdbf 	bl	80060c8 <HAL_UARTEx_RxEventCallback>
 800654a:	e002      	b.n	8006552 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800654c:	6878      	ldr	r0, [r7, #4]
 800654e:	f7fb fbe1 	bl	8001d14 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006552:	2300      	movs	r3, #0
 8006554:	e002      	b.n	800655c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8006556:	2300      	movs	r3, #0
 8006558:	e000      	b.n	800655c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800655a:	2302      	movs	r3, #2
  }
}
 800655c:	4618      	mov	r0, r3
 800655e:	3730      	adds	r7, #48	@ 0x30
 8006560:	46bd      	mov	sp, r7
 8006562:	bd80      	pop	{r7, pc}

08006564 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006564:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006568:	b0c0      	sub	sp, #256	@ 0x100
 800656a:	af00      	add	r7, sp, #0
 800656c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006570:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	691b      	ldr	r3, [r3, #16]
 8006578:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800657c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006580:	68d9      	ldr	r1, [r3, #12]
 8006582:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006586:	681a      	ldr	r2, [r3, #0]
 8006588:	ea40 0301 	orr.w	r3, r0, r1
 800658c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800658e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006592:	689a      	ldr	r2, [r3, #8]
 8006594:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006598:	691b      	ldr	r3, [r3, #16]
 800659a:	431a      	orrs	r2, r3
 800659c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80065a0:	695b      	ldr	r3, [r3, #20]
 80065a2:	431a      	orrs	r2, r3
 80065a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80065a8:	69db      	ldr	r3, [r3, #28]
 80065aa:	4313      	orrs	r3, r2
 80065ac:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80065b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	68db      	ldr	r3, [r3, #12]
 80065b8:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80065bc:	f021 010c 	bic.w	r1, r1, #12
 80065c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80065c4:	681a      	ldr	r2, [r3, #0]
 80065c6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80065ca:	430b      	orrs	r3, r1
 80065cc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80065ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	695b      	ldr	r3, [r3, #20]
 80065d6:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80065da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80065de:	6999      	ldr	r1, [r3, #24]
 80065e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80065e4:	681a      	ldr	r2, [r3, #0]
 80065e6:	ea40 0301 	orr.w	r3, r0, r1
 80065ea:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80065ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80065f0:	681a      	ldr	r2, [r3, #0]
 80065f2:	4b8f      	ldr	r3, [pc, #572]	@ (8006830 <UART_SetConfig+0x2cc>)
 80065f4:	429a      	cmp	r2, r3
 80065f6:	d005      	beq.n	8006604 <UART_SetConfig+0xa0>
 80065f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80065fc:	681a      	ldr	r2, [r3, #0]
 80065fe:	4b8d      	ldr	r3, [pc, #564]	@ (8006834 <UART_SetConfig+0x2d0>)
 8006600:	429a      	cmp	r2, r3
 8006602:	d104      	bne.n	800660e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006604:	f7fd fbf8 	bl	8003df8 <HAL_RCC_GetPCLK2Freq>
 8006608:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800660c:	e003      	b.n	8006616 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800660e:	f7fd fbdf 	bl	8003dd0 <HAL_RCC_GetPCLK1Freq>
 8006612:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006616:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800661a:	69db      	ldr	r3, [r3, #28]
 800661c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006620:	f040 810c 	bne.w	800683c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006624:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006628:	2200      	movs	r2, #0
 800662a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800662e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8006632:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8006636:	4622      	mov	r2, r4
 8006638:	462b      	mov	r3, r5
 800663a:	1891      	adds	r1, r2, r2
 800663c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800663e:	415b      	adcs	r3, r3
 8006640:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006642:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8006646:	4621      	mov	r1, r4
 8006648:	eb12 0801 	adds.w	r8, r2, r1
 800664c:	4629      	mov	r1, r5
 800664e:	eb43 0901 	adc.w	r9, r3, r1
 8006652:	f04f 0200 	mov.w	r2, #0
 8006656:	f04f 0300 	mov.w	r3, #0
 800665a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800665e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006662:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006666:	4690      	mov	r8, r2
 8006668:	4699      	mov	r9, r3
 800666a:	4623      	mov	r3, r4
 800666c:	eb18 0303 	adds.w	r3, r8, r3
 8006670:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006674:	462b      	mov	r3, r5
 8006676:	eb49 0303 	adc.w	r3, r9, r3
 800667a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800667e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006682:	685b      	ldr	r3, [r3, #4]
 8006684:	2200      	movs	r2, #0
 8006686:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800668a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800668e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8006692:	460b      	mov	r3, r1
 8006694:	18db      	adds	r3, r3, r3
 8006696:	653b      	str	r3, [r7, #80]	@ 0x50
 8006698:	4613      	mov	r3, r2
 800669a:	eb42 0303 	adc.w	r3, r2, r3
 800669e:	657b      	str	r3, [r7, #84]	@ 0x54
 80066a0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80066a4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80066a8:	f7f9 fd8e 	bl	80001c8 <__aeabi_uldivmod>
 80066ac:	4602      	mov	r2, r0
 80066ae:	460b      	mov	r3, r1
 80066b0:	4b61      	ldr	r3, [pc, #388]	@ (8006838 <UART_SetConfig+0x2d4>)
 80066b2:	fba3 2302 	umull	r2, r3, r3, r2
 80066b6:	095b      	lsrs	r3, r3, #5
 80066b8:	011c      	lsls	r4, r3, #4
 80066ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80066be:	2200      	movs	r2, #0
 80066c0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80066c4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80066c8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80066cc:	4642      	mov	r2, r8
 80066ce:	464b      	mov	r3, r9
 80066d0:	1891      	adds	r1, r2, r2
 80066d2:	64b9      	str	r1, [r7, #72]	@ 0x48
 80066d4:	415b      	adcs	r3, r3
 80066d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80066d8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80066dc:	4641      	mov	r1, r8
 80066de:	eb12 0a01 	adds.w	sl, r2, r1
 80066e2:	4649      	mov	r1, r9
 80066e4:	eb43 0b01 	adc.w	fp, r3, r1
 80066e8:	f04f 0200 	mov.w	r2, #0
 80066ec:	f04f 0300 	mov.w	r3, #0
 80066f0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80066f4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80066f8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80066fc:	4692      	mov	sl, r2
 80066fe:	469b      	mov	fp, r3
 8006700:	4643      	mov	r3, r8
 8006702:	eb1a 0303 	adds.w	r3, sl, r3
 8006706:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800670a:	464b      	mov	r3, r9
 800670c:	eb4b 0303 	adc.w	r3, fp, r3
 8006710:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006714:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006718:	685b      	ldr	r3, [r3, #4]
 800671a:	2200      	movs	r2, #0
 800671c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006720:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8006724:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8006728:	460b      	mov	r3, r1
 800672a:	18db      	adds	r3, r3, r3
 800672c:	643b      	str	r3, [r7, #64]	@ 0x40
 800672e:	4613      	mov	r3, r2
 8006730:	eb42 0303 	adc.w	r3, r2, r3
 8006734:	647b      	str	r3, [r7, #68]	@ 0x44
 8006736:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800673a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800673e:	f7f9 fd43 	bl	80001c8 <__aeabi_uldivmod>
 8006742:	4602      	mov	r2, r0
 8006744:	460b      	mov	r3, r1
 8006746:	4611      	mov	r1, r2
 8006748:	4b3b      	ldr	r3, [pc, #236]	@ (8006838 <UART_SetConfig+0x2d4>)
 800674a:	fba3 2301 	umull	r2, r3, r3, r1
 800674e:	095b      	lsrs	r3, r3, #5
 8006750:	2264      	movs	r2, #100	@ 0x64
 8006752:	fb02 f303 	mul.w	r3, r2, r3
 8006756:	1acb      	subs	r3, r1, r3
 8006758:	00db      	lsls	r3, r3, #3
 800675a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800675e:	4b36      	ldr	r3, [pc, #216]	@ (8006838 <UART_SetConfig+0x2d4>)
 8006760:	fba3 2302 	umull	r2, r3, r3, r2
 8006764:	095b      	lsrs	r3, r3, #5
 8006766:	005b      	lsls	r3, r3, #1
 8006768:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800676c:	441c      	add	r4, r3
 800676e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006772:	2200      	movs	r2, #0
 8006774:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006778:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800677c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8006780:	4642      	mov	r2, r8
 8006782:	464b      	mov	r3, r9
 8006784:	1891      	adds	r1, r2, r2
 8006786:	63b9      	str	r1, [r7, #56]	@ 0x38
 8006788:	415b      	adcs	r3, r3
 800678a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800678c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8006790:	4641      	mov	r1, r8
 8006792:	1851      	adds	r1, r2, r1
 8006794:	6339      	str	r1, [r7, #48]	@ 0x30
 8006796:	4649      	mov	r1, r9
 8006798:	414b      	adcs	r3, r1
 800679a:	637b      	str	r3, [r7, #52]	@ 0x34
 800679c:	f04f 0200 	mov.w	r2, #0
 80067a0:	f04f 0300 	mov.w	r3, #0
 80067a4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80067a8:	4659      	mov	r1, fp
 80067aa:	00cb      	lsls	r3, r1, #3
 80067ac:	4651      	mov	r1, sl
 80067ae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80067b2:	4651      	mov	r1, sl
 80067b4:	00ca      	lsls	r2, r1, #3
 80067b6:	4610      	mov	r0, r2
 80067b8:	4619      	mov	r1, r3
 80067ba:	4603      	mov	r3, r0
 80067bc:	4642      	mov	r2, r8
 80067be:	189b      	adds	r3, r3, r2
 80067c0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80067c4:	464b      	mov	r3, r9
 80067c6:	460a      	mov	r2, r1
 80067c8:	eb42 0303 	adc.w	r3, r2, r3
 80067cc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80067d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80067d4:	685b      	ldr	r3, [r3, #4]
 80067d6:	2200      	movs	r2, #0
 80067d8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80067dc:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80067e0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80067e4:	460b      	mov	r3, r1
 80067e6:	18db      	adds	r3, r3, r3
 80067e8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80067ea:	4613      	mov	r3, r2
 80067ec:	eb42 0303 	adc.w	r3, r2, r3
 80067f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80067f2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80067f6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80067fa:	f7f9 fce5 	bl	80001c8 <__aeabi_uldivmod>
 80067fe:	4602      	mov	r2, r0
 8006800:	460b      	mov	r3, r1
 8006802:	4b0d      	ldr	r3, [pc, #52]	@ (8006838 <UART_SetConfig+0x2d4>)
 8006804:	fba3 1302 	umull	r1, r3, r3, r2
 8006808:	095b      	lsrs	r3, r3, #5
 800680a:	2164      	movs	r1, #100	@ 0x64
 800680c:	fb01 f303 	mul.w	r3, r1, r3
 8006810:	1ad3      	subs	r3, r2, r3
 8006812:	00db      	lsls	r3, r3, #3
 8006814:	3332      	adds	r3, #50	@ 0x32
 8006816:	4a08      	ldr	r2, [pc, #32]	@ (8006838 <UART_SetConfig+0x2d4>)
 8006818:	fba2 2303 	umull	r2, r3, r2, r3
 800681c:	095b      	lsrs	r3, r3, #5
 800681e:	f003 0207 	and.w	r2, r3, #7
 8006822:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	4422      	add	r2, r4
 800682a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800682c:	e106      	b.n	8006a3c <UART_SetConfig+0x4d8>
 800682e:	bf00      	nop
 8006830:	40011000 	.word	0x40011000
 8006834:	40011400 	.word	0x40011400
 8006838:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800683c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006840:	2200      	movs	r2, #0
 8006842:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006846:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800684a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800684e:	4642      	mov	r2, r8
 8006850:	464b      	mov	r3, r9
 8006852:	1891      	adds	r1, r2, r2
 8006854:	6239      	str	r1, [r7, #32]
 8006856:	415b      	adcs	r3, r3
 8006858:	627b      	str	r3, [r7, #36]	@ 0x24
 800685a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800685e:	4641      	mov	r1, r8
 8006860:	1854      	adds	r4, r2, r1
 8006862:	4649      	mov	r1, r9
 8006864:	eb43 0501 	adc.w	r5, r3, r1
 8006868:	f04f 0200 	mov.w	r2, #0
 800686c:	f04f 0300 	mov.w	r3, #0
 8006870:	00eb      	lsls	r3, r5, #3
 8006872:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006876:	00e2      	lsls	r2, r4, #3
 8006878:	4614      	mov	r4, r2
 800687a:	461d      	mov	r5, r3
 800687c:	4643      	mov	r3, r8
 800687e:	18e3      	adds	r3, r4, r3
 8006880:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006884:	464b      	mov	r3, r9
 8006886:	eb45 0303 	adc.w	r3, r5, r3
 800688a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800688e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006892:	685b      	ldr	r3, [r3, #4]
 8006894:	2200      	movs	r2, #0
 8006896:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800689a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800689e:	f04f 0200 	mov.w	r2, #0
 80068a2:	f04f 0300 	mov.w	r3, #0
 80068a6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80068aa:	4629      	mov	r1, r5
 80068ac:	008b      	lsls	r3, r1, #2
 80068ae:	4621      	mov	r1, r4
 80068b0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80068b4:	4621      	mov	r1, r4
 80068b6:	008a      	lsls	r2, r1, #2
 80068b8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80068bc:	f7f9 fc84 	bl	80001c8 <__aeabi_uldivmod>
 80068c0:	4602      	mov	r2, r0
 80068c2:	460b      	mov	r3, r1
 80068c4:	4b60      	ldr	r3, [pc, #384]	@ (8006a48 <UART_SetConfig+0x4e4>)
 80068c6:	fba3 2302 	umull	r2, r3, r3, r2
 80068ca:	095b      	lsrs	r3, r3, #5
 80068cc:	011c      	lsls	r4, r3, #4
 80068ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80068d2:	2200      	movs	r2, #0
 80068d4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80068d8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80068dc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80068e0:	4642      	mov	r2, r8
 80068e2:	464b      	mov	r3, r9
 80068e4:	1891      	adds	r1, r2, r2
 80068e6:	61b9      	str	r1, [r7, #24]
 80068e8:	415b      	adcs	r3, r3
 80068ea:	61fb      	str	r3, [r7, #28]
 80068ec:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80068f0:	4641      	mov	r1, r8
 80068f2:	1851      	adds	r1, r2, r1
 80068f4:	6139      	str	r1, [r7, #16]
 80068f6:	4649      	mov	r1, r9
 80068f8:	414b      	adcs	r3, r1
 80068fa:	617b      	str	r3, [r7, #20]
 80068fc:	f04f 0200 	mov.w	r2, #0
 8006900:	f04f 0300 	mov.w	r3, #0
 8006904:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006908:	4659      	mov	r1, fp
 800690a:	00cb      	lsls	r3, r1, #3
 800690c:	4651      	mov	r1, sl
 800690e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006912:	4651      	mov	r1, sl
 8006914:	00ca      	lsls	r2, r1, #3
 8006916:	4610      	mov	r0, r2
 8006918:	4619      	mov	r1, r3
 800691a:	4603      	mov	r3, r0
 800691c:	4642      	mov	r2, r8
 800691e:	189b      	adds	r3, r3, r2
 8006920:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006924:	464b      	mov	r3, r9
 8006926:	460a      	mov	r2, r1
 8006928:	eb42 0303 	adc.w	r3, r2, r3
 800692c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006930:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006934:	685b      	ldr	r3, [r3, #4]
 8006936:	2200      	movs	r2, #0
 8006938:	67bb      	str	r3, [r7, #120]	@ 0x78
 800693a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800693c:	f04f 0200 	mov.w	r2, #0
 8006940:	f04f 0300 	mov.w	r3, #0
 8006944:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8006948:	4649      	mov	r1, r9
 800694a:	008b      	lsls	r3, r1, #2
 800694c:	4641      	mov	r1, r8
 800694e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006952:	4641      	mov	r1, r8
 8006954:	008a      	lsls	r2, r1, #2
 8006956:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800695a:	f7f9 fc35 	bl	80001c8 <__aeabi_uldivmod>
 800695e:	4602      	mov	r2, r0
 8006960:	460b      	mov	r3, r1
 8006962:	4611      	mov	r1, r2
 8006964:	4b38      	ldr	r3, [pc, #224]	@ (8006a48 <UART_SetConfig+0x4e4>)
 8006966:	fba3 2301 	umull	r2, r3, r3, r1
 800696a:	095b      	lsrs	r3, r3, #5
 800696c:	2264      	movs	r2, #100	@ 0x64
 800696e:	fb02 f303 	mul.w	r3, r2, r3
 8006972:	1acb      	subs	r3, r1, r3
 8006974:	011b      	lsls	r3, r3, #4
 8006976:	3332      	adds	r3, #50	@ 0x32
 8006978:	4a33      	ldr	r2, [pc, #204]	@ (8006a48 <UART_SetConfig+0x4e4>)
 800697a:	fba2 2303 	umull	r2, r3, r2, r3
 800697e:	095b      	lsrs	r3, r3, #5
 8006980:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006984:	441c      	add	r4, r3
 8006986:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800698a:	2200      	movs	r2, #0
 800698c:	673b      	str	r3, [r7, #112]	@ 0x70
 800698e:	677a      	str	r2, [r7, #116]	@ 0x74
 8006990:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8006994:	4642      	mov	r2, r8
 8006996:	464b      	mov	r3, r9
 8006998:	1891      	adds	r1, r2, r2
 800699a:	60b9      	str	r1, [r7, #8]
 800699c:	415b      	adcs	r3, r3
 800699e:	60fb      	str	r3, [r7, #12]
 80069a0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80069a4:	4641      	mov	r1, r8
 80069a6:	1851      	adds	r1, r2, r1
 80069a8:	6039      	str	r1, [r7, #0]
 80069aa:	4649      	mov	r1, r9
 80069ac:	414b      	adcs	r3, r1
 80069ae:	607b      	str	r3, [r7, #4]
 80069b0:	f04f 0200 	mov.w	r2, #0
 80069b4:	f04f 0300 	mov.w	r3, #0
 80069b8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80069bc:	4659      	mov	r1, fp
 80069be:	00cb      	lsls	r3, r1, #3
 80069c0:	4651      	mov	r1, sl
 80069c2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80069c6:	4651      	mov	r1, sl
 80069c8:	00ca      	lsls	r2, r1, #3
 80069ca:	4610      	mov	r0, r2
 80069cc:	4619      	mov	r1, r3
 80069ce:	4603      	mov	r3, r0
 80069d0:	4642      	mov	r2, r8
 80069d2:	189b      	adds	r3, r3, r2
 80069d4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80069d6:	464b      	mov	r3, r9
 80069d8:	460a      	mov	r2, r1
 80069da:	eb42 0303 	adc.w	r3, r2, r3
 80069de:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80069e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80069e4:	685b      	ldr	r3, [r3, #4]
 80069e6:	2200      	movs	r2, #0
 80069e8:	663b      	str	r3, [r7, #96]	@ 0x60
 80069ea:	667a      	str	r2, [r7, #100]	@ 0x64
 80069ec:	f04f 0200 	mov.w	r2, #0
 80069f0:	f04f 0300 	mov.w	r3, #0
 80069f4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80069f8:	4649      	mov	r1, r9
 80069fa:	008b      	lsls	r3, r1, #2
 80069fc:	4641      	mov	r1, r8
 80069fe:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006a02:	4641      	mov	r1, r8
 8006a04:	008a      	lsls	r2, r1, #2
 8006a06:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8006a0a:	f7f9 fbdd 	bl	80001c8 <__aeabi_uldivmod>
 8006a0e:	4602      	mov	r2, r0
 8006a10:	460b      	mov	r3, r1
 8006a12:	4b0d      	ldr	r3, [pc, #52]	@ (8006a48 <UART_SetConfig+0x4e4>)
 8006a14:	fba3 1302 	umull	r1, r3, r3, r2
 8006a18:	095b      	lsrs	r3, r3, #5
 8006a1a:	2164      	movs	r1, #100	@ 0x64
 8006a1c:	fb01 f303 	mul.w	r3, r1, r3
 8006a20:	1ad3      	subs	r3, r2, r3
 8006a22:	011b      	lsls	r3, r3, #4
 8006a24:	3332      	adds	r3, #50	@ 0x32
 8006a26:	4a08      	ldr	r2, [pc, #32]	@ (8006a48 <UART_SetConfig+0x4e4>)
 8006a28:	fba2 2303 	umull	r2, r3, r2, r3
 8006a2c:	095b      	lsrs	r3, r3, #5
 8006a2e:	f003 020f 	and.w	r2, r3, #15
 8006a32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	4422      	add	r2, r4
 8006a3a:	609a      	str	r2, [r3, #8]
}
 8006a3c:	bf00      	nop
 8006a3e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8006a42:	46bd      	mov	sp, r7
 8006a44:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006a48:	51eb851f 	.word	0x51eb851f

08006a4c <FSMC_NORSRAM_Init>:
  * @param  Device Pointer to NORSRAM device instance
  * @param  Init Pointer to NORSRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_InitTypeDef* Init)
{ 
 8006a4c:	b480      	push	{r7}
 8006a4e:	b085      	sub	sp, #20
 8006a50:	af00      	add	r7, sp, #0
 8006a52:	6078      	str	r0, [r7, #4]
 8006a54:	6039      	str	r1, [r7, #0]
  uint32_t tmpr = 0U;
 8006a56:	2300      	movs	r3, #0
 8006a58:	60fb      	str	r3, [r7, #12]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
  assert_param(IS_FSMC_CONTINOUS_CLOCK(Init->ContinuousClock));
#endif /* STM32F412Zx || STM32F412Vx || STM32F413xx || STM32F423xx */
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Init->NSBank];
 8006a5a:	683b      	ldr	r3, [r7, #0]
 8006a5c:	681a      	ldr	r2, [r3, #0]
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a64:	60fb      	str	r3, [r7, #12]

#if defined(STM32F405xx) || defined(STM32F415xx) || defined(STM32F407xx) || defined(STM32F417xx)
  /* Clear MBKEN, MUXEN, MTYP, MWID, FACCEN, BURSTEN, WAITPOL, WRAPMOD, WAITCFG, WREN,
           WAITEN, EXTMOD, ASYNCWAIT, CPSIZE and CBURSTRW bits */
  tmpr &= ((uint32_t)~(FSMC_BCR1_MBKEN     | FSMC_BCR1_MUXEN    | FSMC_BCR1_MTYP     | \
 8006a66:	68fa      	ldr	r2, [r7, #12]
 8006a68:	4b20      	ldr	r3, [pc, #128]	@ (8006aec <FSMC_NORSRAM_Init+0xa0>)
 8006a6a:	4013      	ands	r3, r2
 8006a6c:	60fb      	str	r3, [r7, #12]
                       FSMC_BCR1_MWID      | FSMC_BCR1_FACCEN   | FSMC_BCR1_BURSTEN  | \
                       FSMC_BCR1_WAITPOL   | FSMC_BCR1_WRAPMOD  | FSMC_BCR1_WAITCFG  | \
                       FSMC_BCR1_WREN      | FSMC_BCR1_WAITEN   | FSMC_BCR1_EXTMOD   | \
                       FSMC_BCR1_ASYNCWAIT | FSMC_BCR1_CPSIZE   | FSMC_BCR1_CBURSTRW));
  /* Set NORSRAM device control parameters */
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8006a6e:	683b      	ldr	r3, [r7, #0]
 8006a70:	685a      	ldr	r2, [r3, #4]
                     Init->MemoryType           |\
 8006a72:	683b      	ldr	r3, [r7, #0]
 8006a74:	689b      	ldr	r3, [r3, #8]
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8006a76:	431a      	orrs	r2, r3
                     Init->MemoryDataWidth      |\
 8006a78:	683b      	ldr	r3, [r7, #0]
 8006a7a:	68db      	ldr	r3, [r3, #12]
                     Init->MemoryType           |\
 8006a7c:	431a      	orrs	r2, r3
                     Init->BurstAccessMode      |\
 8006a7e:	683b      	ldr	r3, [r7, #0]
 8006a80:	691b      	ldr	r3, [r3, #16]
                     Init->MemoryDataWidth      |\
 8006a82:	431a      	orrs	r2, r3
                     Init->WaitSignalPolarity   |\
 8006a84:	683b      	ldr	r3, [r7, #0]
 8006a86:	695b      	ldr	r3, [r3, #20]
                     Init->BurstAccessMode      |\
 8006a88:	431a      	orrs	r2, r3
                     Init->WrapMode             |\
 8006a8a:	683b      	ldr	r3, [r7, #0]
 8006a8c:	699b      	ldr	r3, [r3, #24]
                     Init->WaitSignalPolarity   |\
 8006a8e:	431a      	orrs	r2, r3
                     Init->WaitSignalActive     |\
 8006a90:	683b      	ldr	r3, [r7, #0]
 8006a92:	69db      	ldr	r3, [r3, #28]
                     Init->WrapMode             |\
 8006a94:	431a      	orrs	r2, r3
                     Init->WriteOperation       |\
 8006a96:	683b      	ldr	r3, [r7, #0]
 8006a98:	6a1b      	ldr	r3, [r3, #32]
                     Init->WaitSignalActive     |\
 8006a9a:	431a      	orrs	r2, r3
                     Init->WaitSignal           |\
 8006a9c:	683b      	ldr	r3, [r7, #0]
 8006a9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                     Init->WriteOperation       |\
 8006aa0:	431a      	orrs	r2, r3
                     Init->ExtendedMode         |\
 8006aa2:	683b      	ldr	r3, [r7, #0]
 8006aa4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
                     Init->WaitSignal           |\
 8006aa6:	431a      	orrs	r2, r3
                     Init->AsynchronousWait     |\
 8006aa8:	683b      	ldr	r3, [r7, #0]
 8006aaa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
                     Init->ExtendedMode         |\
 8006aac:	431a      	orrs	r2, r3
                     Init->PageSize             |\
 8006aae:	683b      	ldr	r3, [r7, #0]
 8006ab0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
                     Init->AsynchronousWait     |\
 8006ab2:	431a      	orrs	r2, r3
                     Init->WriteBurst
 8006ab4:	683b      	ldr	r3, [r7, #0]
 8006ab6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
                     Init->PageSize             |\
 8006ab8:	4313      	orrs	r3, r2
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8006aba:	68fa      	ldr	r2, [r7, #12]
 8006abc:	4313      	orrs	r3, r2
 8006abe:	60fb      	str	r3, [r7, #12]
                     Init->ContinuousClock      |\
                     Init->PageSize             |\
                     Init->WriteFifo);
#endif /* STM32F405xx || STM32F415xx || STM32F407xx || STM32F417xx */ 
            
  if(Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 8006ac0:	683b      	ldr	r3, [r7, #0]
 8006ac2:	689b      	ldr	r3, [r3, #8]
 8006ac4:	2b08      	cmp	r3, #8
 8006ac6:	d103      	bne.n	8006ad0 <FSMC_NORSRAM_Init+0x84>
  {
    tmpr |= (uint32_t)FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006ace:	60fb      	str	r3, [r7, #12]
  }

  Device->BTCR[Init->NSBank] = tmpr;
 8006ad0:	683b      	ldr	r3, [r7, #0]
 8006ad2:	681a      	ldr	r2, [r3, #0]
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	68f9      	ldr	r1, [r7, #12]
 8006ad8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  {
    Device->BTCR[FSMC_NORSRAM_BANK1] |= (uint32_t)(Init->WriteFifo);
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 8006adc:	2300      	movs	r3, #0
}
 8006ade:	4618      	mov	r0, r3
 8006ae0:	3714      	adds	r7, #20
 8006ae2:	46bd      	mov	sp, r7
 8006ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae8:	4770      	bx	lr
 8006aea:	bf00      	nop
 8006aec:	fff00080 	.word	0xfff00080

08006af0 <FSMC_NORSRAM_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8006af0:	b480      	push	{r7}
 8006af2:	b087      	sub	sp, #28
 8006af4:	af00      	add	r7, sp, #0
 8006af6:	60f8      	str	r0, [r7, #12]
 8006af8:	60b9      	str	r1, [r7, #8]
 8006afa:	607a      	str	r2, [r7, #4]
  uint32_t tmpr = 0U;
 8006afc:	2300      	movs	r3, #0
 8006afe:	617b      	str	r3, [r7, #20]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Bank + 1U];
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	1c5a      	adds	r2, r3, #1
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b0a:	617b      	str	r3, [r7, #20]

  /* Clear ADDSET, ADDHLD, DATAST, BUSTURN, CLKDIV, DATLAT and ACCMOD bits */
  tmpr &= ((uint32_t)~(FSMC_BTR1_ADDSET  | FSMC_BTR1_ADDHLD | FSMC_BTR1_DATAST | \
 8006b0c:	697b      	ldr	r3, [r7, #20]
 8006b0e:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8006b12:	617b      	str	r3, [r7, #20]
                       FSMC_BTR1_BUSTURN | FSMC_BTR1_CLKDIV | FSMC_BTR1_DATLAT | \
                       FSMC_BTR1_ACCMOD));
  
  /* Set FSMC_NORSRAM device timing parameters */  
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8006b14:	68bb      	ldr	r3, [r7, #8]
 8006b16:	681a      	ldr	r2, [r3, #0]
                    ((Timing->AddressHoldTime) << 4U)          |\
 8006b18:	68bb      	ldr	r3, [r7, #8]
 8006b1a:	685b      	ldr	r3, [r3, #4]
 8006b1c:	011b      	lsls	r3, r3, #4
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8006b1e:	431a      	orrs	r2, r3
                    ((Timing->DataSetupTime) << 8U)            |\
 8006b20:	68bb      	ldr	r3, [r7, #8]
 8006b22:	689b      	ldr	r3, [r3, #8]
 8006b24:	021b      	lsls	r3, r3, #8
                    ((Timing->AddressHoldTime) << 4U)          |\
 8006b26:	431a      	orrs	r2, r3
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 8006b28:	68bb      	ldr	r3, [r7, #8]
 8006b2a:	68db      	ldr	r3, [r3, #12]
 8006b2c:	041b      	lsls	r3, r3, #16
                    ((Timing->DataSetupTime) << 8U)            |\
 8006b2e:	431a      	orrs	r2, r3
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 8006b30:	68bb      	ldr	r3, [r7, #8]
 8006b32:	691b      	ldr	r3, [r3, #16]
 8006b34:	3b01      	subs	r3, #1
 8006b36:	051b      	lsls	r3, r3, #20
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 8006b38:	431a      	orrs	r2, r3
                    (((Timing->DataLatency)-2U) << 24U)        |\
 8006b3a:	68bb      	ldr	r3, [r7, #8]
 8006b3c:	695b      	ldr	r3, [r3, #20]
 8006b3e:	3b02      	subs	r3, #2
 8006b40:	061b      	lsls	r3, r3, #24
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 8006b42:	431a      	orrs	r2, r3
                    (Timing->AccessMode));
 8006b44:	68bb      	ldr	r3, [r7, #8]
 8006b46:	699b      	ldr	r3, [r3, #24]
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8006b48:	4313      	orrs	r3, r2
 8006b4a:	697a      	ldr	r2, [r7, #20]
 8006b4c:	4313      	orrs	r3, r2
 8006b4e:	617b      	str	r3, [r7, #20]
  
  Device->BTCR[Bank + 1] = tmpr; 
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	1c5a      	adds	r2, r3, #1
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	6979      	ldr	r1, [r7, #20]
 8006b58:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    tmpr |= (uint32_t)(((Timing->CLKDivision)-1U) << 20U);
    Device->BTCR[FSMC_NORSRAM_BANK1 + 1U] = tmpr;
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 8006b5c:	2300      	movs	r3, #0
}
 8006b5e:	4618      	mov	r0, r3
 8006b60:	371c      	adds	r7, #28
 8006b62:	46bd      	mov	sp, r7
 8006b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b68:	4770      	bx	lr
	...

08006b6c <FSMC_NORSRAM_Extended_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank, uint32_t ExtendedMode)
{
 8006b6c:	b480      	push	{r7}
 8006b6e:	b087      	sub	sp, #28
 8006b70:	af00      	add	r7, sp, #0
 8006b72:	60f8      	str	r0, [r7, #12]
 8006b74:	60b9      	str	r1, [r7, #8]
 8006b76:	607a      	str	r2, [r7, #4]
 8006b78:	603b      	str	r3, [r7, #0]
  uint32_t tmpr = 0U;
 8006b7a:	2300      	movs	r3, #0
 8006b7c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if(ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 8006b7e:	683b      	ldr	r3, [r7, #0]
 8006b80:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006b84:	d122      	bne.n	8006bcc <FSMC_NORSRAM_Extended_Timing_Init+0x60>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
    /* Get the BWTR register value */
    tmpr = Device->BWTR[Bank];
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	687a      	ldr	r2, [r7, #4]
 8006b8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b8e:	617b      	str	r3, [r7, #20]
    
    /* Clear ADDSET, ADDHLD, DATAST, BUSTURN and ACCMOD bits */
    tmpr &= ((uint32_t)~(FSMC_BWTR1_ADDSET  | FSMC_BWTR1_ADDHLD | FSMC_BWTR1_DATAST | \
 8006b90:	697a      	ldr	r2, [r7, #20]
 8006b92:	4b15      	ldr	r3, [pc, #84]	@ (8006be8 <FSMC_NORSRAM_Extended_Timing_Init+0x7c>)
 8006b94:	4013      	ands	r3, r2
 8006b96:	617b      	str	r3, [r7, #20]
                         FSMC_BWTR1_BUSTURN | FSMC_BWTR1_ACCMOD));

    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8006b98:	68bb      	ldr	r3, [r7, #8]
 8006b9a:	681a      	ldr	r2, [r3, #0]
                      ((Timing->AddressHoldTime) << 4U)          |\
 8006b9c:	68bb      	ldr	r3, [r7, #8]
 8006b9e:	685b      	ldr	r3, [r3, #4]
 8006ba0:	011b      	lsls	r3, r3, #4
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8006ba2:	431a      	orrs	r2, r3
                      ((Timing->DataSetupTime) << 8U)            |\
 8006ba4:	68bb      	ldr	r3, [r7, #8]
 8006ba6:	689b      	ldr	r3, [r3, #8]
 8006ba8:	021b      	lsls	r3, r3, #8
                      ((Timing->AddressHoldTime) << 4U)          |\
 8006baa:	431a      	orrs	r2, r3
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 8006bac:	68bb      	ldr	r3, [r7, #8]
 8006bae:	68db      	ldr	r3, [r3, #12]
 8006bb0:	041b      	lsls	r3, r3, #16
                      ((Timing->DataSetupTime) << 8U)            |\
 8006bb2:	431a      	orrs	r2, r3
                      (Timing->AccessMode));
 8006bb4:	68bb      	ldr	r3, [r7, #8]
 8006bb6:	699b      	ldr	r3, [r3, #24]
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 8006bb8:	4313      	orrs	r3, r2
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8006bba:	697a      	ldr	r2, [r7, #20]
 8006bbc:	4313      	orrs	r3, r2
 8006bbe:	617b      	str	r3, [r7, #20]
    
    Device->BWTR[Bank] = tmpr;
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	687a      	ldr	r2, [r7, #4]
 8006bc4:	6979      	ldr	r1, [r7, #20]
 8006bc6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8006bca:	e005      	b.n	8006bd8 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>
  }
  else                                        
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	687a      	ldr	r2, [r7, #4]
 8006bd0:	f06f 4170 	mvn.w	r1, #4026531840	@ 0xf0000000
 8006bd4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }   
  
  return HAL_OK;  
 8006bd8:	2300      	movs	r3, #0
}
 8006bda:	4618      	mov	r0, r3
 8006bdc:	371c      	adds	r7, #28
 8006bde:	46bd      	mov	sp, r7
 8006be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be4:	4770      	bx	lr
 8006be6:	bf00      	nop
 8006be8:	cff00000 	.word	0xcff00000

08006bec <memset>:
 8006bec:	4402      	add	r2, r0
 8006bee:	4603      	mov	r3, r0
 8006bf0:	4293      	cmp	r3, r2
 8006bf2:	d100      	bne.n	8006bf6 <memset+0xa>
 8006bf4:	4770      	bx	lr
 8006bf6:	f803 1b01 	strb.w	r1, [r3], #1
 8006bfa:	e7f9      	b.n	8006bf0 <memset+0x4>

08006bfc <__libc_init_array>:
 8006bfc:	b570      	push	{r4, r5, r6, lr}
 8006bfe:	4d0d      	ldr	r5, [pc, #52]	@ (8006c34 <__libc_init_array+0x38>)
 8006c00:	4c0d      	ldr	r4, [pc, #52]	@ (8006c38 <__libc_init_array+0x3c>)
 8006c02:	1b64      	subs	r4, r4, r5
 8006c04:	10a4      	asrs	r4, r4, #2
 8006c06:	2600      	movs	r6, #0
 8006c08:	42a6      	cmp	r6, r4
 8006c0a:	d109      	bne.n	8006c20 <__libc_init_array+0x24>
 8006c0c:	4d0b      	ldr	r5, [pc, #44]	@ (8006c3c <__libc_init_array+0x40>)
 8006c0e:	4c0c      	ldr	r4, [pc, #48]	@ (8006c40 <__libc_init_array+0x44>)
 8006c10:	f000 f818 	bl	8006c44 <_init>
 8006c14:	1b64      	subs	r4, r4, r5
 8006c16:	10a4      	asrs	r4, r4, #2
 8006c18:	2600      	movs	r6, #0
 8006c1a:	42a6      	cmp	r6, r4
 8006c1c:	d105      	bne.n	8006c2a <__libc_init_array+0x2e>
 8006c1e:	bd70      	pop	{r4, r5, r6, pc}
 8006c20:	f855 3b04 	ldr.w	r3, [r5], #4
 8006c24:	4798      	blx	r3
 8006c26:	3601      	adds	r6, #1
 8006c28:	e7ee      	b.n	8006c08 <__libc_init_array+0xc>
 8006c2a:	f855 3b04 	ldr.w	r3, [r5], #4
 8006c2e:	4798      	blx	r3
 8006c30:	3601      	adds	r6, #1
 8006c32:	e7f2      	b.n	8006c1a <__libc_init_array+0x1e>
 8006c34:	08009c14 	.word	0x08009c14
 8006c38:	08009c14 	.word	0x08009c14
 8006c3c:	08009c14 	.word	0x08009c14
 8006c40:	08009c18 	.word	0x08009c18

08006c44 <_init>:
 8006c44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c46:	bf00      	nop
 8006c48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c4a:	bc08      	pop	{r3}
 8006c4c:	469e      	mov	lr, r3
 8006c4e:	4770      	bx	lr

08006c50 <_fini>:
 8006c50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c52:	bf00      	nop
 8006c54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c56:	bc08      	pop	{r3}
 8006c58:	469e      	mov	lr, r3
 8006c5a:	4770      	bx	lr
